# name: test/sql/function/sql-pgq/test_create_csr.test
# description: Test create csr function
# group: [sql-pgq]


# statement ok
# CREATE TABLE regex(s STRING, p STRING)

# statement ok
# INSERT INTO regex VALUES ('asdf', 'sd'), ('asdf', '^sd'), (NULL, '^sd'), ('asdf', NULL)

# statement ok
# CREATE SEQUENCE seq;

# query R
# SELECT AVG(nextval('seq'))
# ----
# 1


# query T
# SELECT regexp_matches(s, '.*') FROM regex
# ----
# 1
# 1
# NULL
# 1

# query T
# SELECT regexp_matches(s, p) FROM regex
# ----
# 1
# 0
# NULL
# NULL

#statement ok
#SELECT test_age(LIST_VALUE(25, 10)) t
# statement ok
# CREATE TABLE csr(a INTEGER, b INTEGER, c INTEGER)

# statement ok
# INSERT INTO csr VALUES (1,10, 0), (1,10, 2), (1,10, 3)

statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (173, 'A'), (478, 'B'), (297, 'C'), (869, 'D');

statement ok
INSERT INTO Transfers VALUES
  (955, 173, 478, 150),
  (769, 173, 297, 50),
  (607, 478, 297, 250),
  (184, 297, 869, 350);

statement ok
CREATE TABLE TestSerial(tid int);

statement ok
INSERT INTO TestSerial VALUES(0), (1), (2);

# query T
# SELECT sum(CREATE_CSR_VERTEX(0, 3, tid)) 
# FROM 
# (SELECT tid from TestSerial) ts
# ----
# 3


query T
SELECT v.vcount FROM (SELECT count(c.cid) as vcount FROM Customer c) v;
----
4


# query T
# SELECT sum(CREATE_CSR_VERTEX(0, 4, 
# CAST (sub.dense_id AS INT) , CAST (sub.cnt AS INT))) AS numEdges
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub
# ----
# 4

query T
SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c), 
sub.dense_id , sub.cnt)) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c  
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub
----
4


# (SELECT count(c.cid) as vcount FROM Customer c)


statement ok
SELECT CREATE_CSR_VERTEX( 
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c  
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub,  (SELECT count(c.cid) as vcount FROM Customer c) v

# SELECT sin((SELECT count(cid) as vcount FROM Customer c)), 
# CAST(sub.dense_id AS INT), CAST(sub.cnt AS INT)
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub

# SELECT CAST(v.vcount AS INT), 
# CAST(sub.dense_id AS INT), CAST(sub.cnt AS INT)
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub, 
# (SELECT count(c.cid) as vcount FROM Customer c) v

# UNION SELECT v.vcount FROM (SELECT count(c.cid) as vcount FROM Customer c) v

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c), 
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c), 
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c  
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT), 
src.rowid, dst.rowid ))
FROM 
  Transfers t 
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dest VALUES(0, 4, 0, 3), (0, 4, 1, 2), (0, 4, 1, 0), (0, 4, 0, 2);

#csr will be deleted after calling reachability. 
query T
SELECT reachability(id, false, v_size, src, dst) FROM src_dest;
----
1
1
0
1

# ----
# 1

# SELECT sum(CREATE_CSR_VERTEX(0, 5, CAST(sub.dense_id AS INT), CAST(sub.cnt AS INT))) AS numEdges
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub
# (SELECT count(c.cid) FROM Customer c) AS INT)
# (SELECT count(c.cid) FROM Customer c)

# statement ok
# SELECT CREATE_CSR_VERTEX(1, 10, 0 ,1 , 3)

#statement ok
#SELECT CREATE_CSR_VERTEX_TEST(10)

#statement error
#SELECT CREATE_CSR_VERTEX()


#, LIST_VALUE(0, 1, 3))
#SELECT LIST_VALUE(1,2,3)
#

# SELECT c.rowid as dense_id, count(t.from_id) as cnt FROM Customer c  LEFT JOIN  Transfers t ON t.from_id = c.cid GROUP BY c.rowid