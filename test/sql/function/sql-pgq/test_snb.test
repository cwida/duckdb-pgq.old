# name: test/sql/function/sql-pgq/test_snb.test
# description: Test snb benchmark
# group: [sql-pgq]

# Can only be run if sf0.1 snb data is stored under data/ldbc-snb/ directory

# statement ok
# CREATE TABLE Person(PersonId bigint NOT NULL);


# statement ok
# COPY Person(PersonId) FROM  'data/ldbc-snb/social-network-sf0.1-projected-fk/Person.csv'       ( HEADER, FORMAT csv);

# statement ok
# CREATE TABLE Person_knows_Person      (Person1Id bigint NOT NULL, Person2Id    bigint NOT NULL);

# statement ok
# COPY Person_knows_Person (Person1id, Person2id) FROM 'data/ldbc-snb/social-network-sf0.1-projected-fk/Person_knows_Person.csv'       (DELIMITER '|', HEADER, FORMAT csv);

# statement ok
# COPY Person_knows_Person (Person2id, Person1id) FROM 'data/ldbc-snb/social-network-sf0.1-projected-fk/Person_knows_Person.csv'       (DELIMITER '|', HEADER, FORMAT csv);

# statement ok
# CREATE TABLE src_dest(id int, is_variant boolean, v_size bigint, src bigint, dst bigint);

# statement ok
# CREATE TABLE Person_Subset_l(rid bigint);

# statement ok
# INSERT INTO Person_Subset_l( SELECT person.rowid from Person ORDER BY md5(person.rowid) LIMIT 100);

# statement ok
# CREATE TABLE Person_Subset_r(rid bigint);

# statement ok
# INSERT INTO Person_Subset_r( SELECT person.rowid from Person ORDER BY md5(person.rowid) LIMIT 100);

# statement ok
# CREATE TABLE Person_ids(lid bigint, rid bigint);

# statement ok
# INSERT INTO Person_ids( SELECT pl.rid, pr.rid from Person_Subset_l pl, Person_Subset_r pr ORDER BY md5(pl.rowid + pr.rowid) );

# statement ok
# INSERT INTO Person_ids VALUES (0 , 0);

# statement ok
# INSERT INTO Person_ids VALUES( 7, 9);


# statement ok
# INSERT INTO src_dest (id, is_variant, v_size, src, dst) 
# WITH cte as (
# 	SELECT count(p.personid) as vcount FROM Person p
# 	)
# SELECT 0, false, cte.vcount, p.lid, p.rid FROM cte, Person_ids p;

# statement ok
# CREATE TABLE t (id bigint);

# statement ok
# INSERT INTO t VALUES(1);

# statement ok
# SELECT min(CREATE_CSR_EDGE(0, (SELECT count(p.personid) as vcount FROM Person p), 
# CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(p.personid) as vcount FROM Person p), 
# sub.dense_id , sub.cnt )) AS numEdges
# FROM (
#     SELECT p.rowid as dense_id, count(pkp.person1id) as cnt
#     FROM Person p  
#     LEFT JOIN  Person_knows_Person pkp ON pkp.person1id = p.personid
#     GROUP BY p.rowid
# ) sub) AS BIGINT), 
# src.rowid, dst.rowid ))
# FROM 
#   Person_knows_Person pkp 
#   JOIN Person src ON pkp.person1id = src.personid
#   JOIN Person dst ON pkp.person2id = dst.personid;


# query II
# SELECT max(src),min(dst) from src_dest where reach(src_dest.id, is_variant, v_size, src, dst, 'run2.out') = 1;
# ----
# 1677	0

# statement ok
# SELECT min(CREATE_CSR_EDGE(0, (SELECT count(p.personid) as vcount FROM Person p), 
# CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(p.personid) as vcount FROM Person p), 
# sub.dense_id , sub.cnt )) AS numEdges
# FROM (
#     SELECT p.rowid as dense_id, count(pkp.person1id) as cnt
#     FROM Person p  
#     LEFT JOIN  Person_knows_Person pkp ON pkp.person1id = p.personid
#     GROUP BY p.rowid
# ) sub) AS BIGINT), 
# src.rowid, dst.rowid ))
# FROM 
#   Person_knows_Person pkp 
#   JOIN Person src ON pkp.person1id = src.personid
#   JOIN Person dst ON pkp.person2id = dst.personid;

# query I
# SELECT count(*) from src_dest where reachability(src_dest.id, is_variant, v_size, src, dst) = 1;
# ----
# 7584