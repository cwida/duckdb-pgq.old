/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    LAMBDA_ARROW = 270,
    LESS_EQUALS = 271,
    GREATER_EQUALS = 272,
    NOT_EQUALS = 273,
    ABORT_P = 274,
    ABSOLUTE_P = 275,
    ACCESS = 276,
    ACTION = 277,
    ADD_P = 278,
    ADMIN = 279,
    AFTER = 280,
    AGGREGATE = 281,
    ALL = 282,
    ALSO = 283,
    ALTER = 284,
    ALWAYS = 285,
    ANALYSE = 286,
    ANALYZE = 287,
    AND = 288,
    ANY = 289,
    ARRAY = 290,
    AS = 291,
    ASC_P = 292,
    ASSERTION = 293,
    ASSIGNMENT = 294,
    ASYMMETRIC = 295,
    AT = 296,
    ATTACH = 297,
    ATTRIBUTE = 298,
    AUTHORIZATION = 299,
    BACKWARD = 300,
    BEFORE = 301,
    BEGIN_P = 302,
    BETWEEN = 303,
    BIGINT = 304,
    BINARY = 305,
    BIT = 306,
    BOOLEAN_P = 307,
    BOTH = 308,
    BY = 309,
    CACHE = 310,
    CALL_P = 311,
    CALLED = 312,
    CASCADE = 313,
    CASCADED = 314,
    CASE = 315,
    CAST = 316,
    CATALOG_P = 317,
    CHAIN = 318,
    CHAR_P = 319,
    CHARACTER = 320,
    CHARACTERISTICS = 321,
    CHEAPEST = 322,
    CHECK_P = 323,
    CHECKPOINT = 324,
    CLASS = 325,
    CLOSE = 326,
    CLUSTER = 327,
    COALESCE = 328,
    COLLATE = 329,
    COLLATION = 330,
    COLUMN = 331,
    COLUMNS = 332,
    COMMENT = 333,
    COMMENTS = 334,
    COMMIT = 335,
    COMMITTED = 336,
    COMPRESSION = 337,
    CONCURRENTLY = 338,
    CONFIGURATION = 339,
    CONFLICT = 340,
    CONNECTION = 341,
    CONSTRAINT = 342,
    CONSTRAINTS = 343,
    CONTENT_P = 344,
    CONTINUE_P = 345,
    CONVERSION_P = 346,
    COPY = 347,
    COST = 348,
    CREATE_P = 349,
    CROSS = 350,
    CSV = 351,
    CUBE = 352,
    CURRENT_P = 353,
    CURRENT_CATALOG = 354,
    CURRENT_DATE = 355,
    CURRENT_ROLE = 356,
    CURRENT_SCHEMA = 357,
    CURRENT_TIME = 358,
    CURRENT_TIMESTAMP = 359,
    CURRENT_USER = 360,
    CURSOR = 361,
    CYCLE = 362,
    DATA_P = 363,
    DATABASE = 364,
    DAY_P = 365,
    DAYS_P = 366,
    DEALLOCATE = 367,
    DEC = 368,
    DECIMAL_P = 369,
    DECLARE = 370,
    DEFAULT = 371,
    DEFAULTS = 372,
    DEFERRABLE = 373,
    DEFERRED = 374,
    DEFINER = 375,
    DELETE_P = 376,
    DELIMITER = 377,
    DELIMITERS = 378,
    DEPENDS = 379,
    DESC_P = 380,
    DESCRIBE = 381,
    DESTINATION = 382,
    DETACH = 383,
    DICTIONARY = 384,
    DISABLE_P = 385,
    DISCARD = 386,
    DISCRIMINATOR = 387,
    DISTINCT = 388,
    DO = 389,
    DOCUMENT_P = 390,
    DOMAIN_P = 391,
    DOUBLE_P = 392,
    DROP = 393,
    EACH = 394,
    EDGE = 395,
    ELSE = 396,
    ENABLE_P = 397,
    ENCODING = 398,
    ENCRYPTED = 399,
    END_P = 400,
    ENUM_P = 401,
    ESCAPE = 402,
    EVENT = 403,
    EXCEPT = 404,
    EXCLUDE = 405,
    EXCLUDING = 406,
    EXCLUSIVE = 407,
    EXECUTE = 408,
    EXISTS = 409,
    EXPLAIN = 410,
    EXPORT_P = 411,
    EXTENSION = 412,
    EXTERNAL = 413,
    EXTRACT = 414,
    FALSE_P = 415,
    FAMILY = 416,
    FETCH = 417,
    FILTER = 418,
    FIRST_P = 419,
    FLOAT_P = 420,
    FOLLOWING = 421,
    FOR = 422,
    FORCE = 423,
    FOREIGN = 424,
    FORWARD = 425,
    FREEZE = 426,
    FROM = 427,
    FULL = 428,
    FUNCTION = 429,
    FUNCTIONS = 430,
    GENERATED = 431,
    GLOB = 432,
    GLOBAL = 433,
    GRANT = 434,
    GRANTED = 435,
    GRAPH = 436,
    GRAPH_TABLE = 437,
    GROUP_P = 438,
    GROUPING = 439,
    GROUPING_ID = 440,
    HANDLER = 441,
    HAVING = 442,
    HEADER_P = 443,
    HOLD = 444,
    HOUR_P = 445,
    HOURS_P = 446,
    IDENTITY_P = 447,
    IF_P = 448,
    IGNORE_P = 449,
    ILIKE = 450,
    IMMEDIATE = 451,
    IMMUTABLE = 452,
    IMPLICIT_P = 453,
    IMPORT_P = 454,
    IN_P = 455,
    INCLUDING = 456,
    INCREMENT = 457,
    INDEX = 458,
    INDEXES = 459,
    INHERIT = 460,
    INHERITS = 461,
    INITIALLY = 462,
    INLINE_P = 463,
    INNER_P = 464,
    INOUT = 465,
    INPUT_P = 466,
    INSENSITIVE = 467,
    INSERT = 468,
    INSTALL = 469,
    INSTEAD = 470,
    INT_P = 471,
    INTEGER = 472,
    INTERSECT = 473,
    INTERVAL = 474,
    INTO = 475,
    INVOKER = 476,
    IS = 477,
    ISNULL = 478,
    ISOLATION = 479,
    JOIN = 480,
    KEY = 481,
    LABEL = 482,
    LANGUAGE = 483,
    LARGE_P = 484,
    LAST_P = 485,
    LATERAL_P = 486,
    LEADING = 487,
    LEAKPROOF = 488,
    LEFT = 489,
    LEVEL = 490,
    LIKE = 491,
    LIMIT = 492,
    LISTEN = 493,
    LOAD = 494,
    LOCAL = 495,
    LOCALTIME = 496,
    LOCALTIMESTAMP = 497,
    LOCATION = 498,
    LOCK_P = 499,
    LOCKED = 500,
    LOGGED = 501,
    MACRO = 502,
    MAP = 503,
    MAPPING = 504,
    MATCH = 505,
    MATERIALIZED = 506,
    MAXVALUE = 507,
    METHOD = 508,
    MICROSECOND_P = 509,
    MICROSECONDS_P = 510,
    MILLISECOND_P = 511,
    MILLISECONDS_P = 512,
    MINUTE_P = 513,
    MINUTES_P = 514,
    MINVALUE = 515,
    MODE = 516,
    MONTH_P = 517,
    MONTHS_P = 518,
    MOVE = 519,
    NAME_P = 520,
    NAMES = 521,
    NATIONAL = 522,
    NATURAL = 523,
    NCHAR = 524,
    NEW = 525,
    NEXT = 526,
    NO = 527,
    NODE = 528,
    NONE = 529,
    NOT = 530,
    NOTHING = 531,
    NOTIFY = 532,
    NOTNULL = 533,
    NOWAIT = 534,
    NULL_P = 535,
    NULLIF = 536,
    NULLS_P = 537,
    NUMERIC = 538,
    OBJECT_P = 539,
    OF = 540,
    OFF = 541,
    OFFSET = 542,
    OIDS = 543,
    OLD = 544,
    ON = 545,
    ONLY = 546,
    OPERATOR = 547,
    OPTION = 548,
    OPTIONS = 549,
    OR = 550,
    ORDER = 551,
    ORDINALITY = 552,
    OUT_P = 553,
    OUTER_P = 554,
    OVER = 555,
    OVERLAPS = 556,
    OVERLAY = 557,
    OVERRIDING = 558,
    OWNED = 559,
    OWNER = 560,
    PARALLEL = 561,
    PARSER = 562,
    PARTIAL = 563,
    PARTITION = 564,
    PASSING = 565,
    PASSWORD = 566,
    PERCENT = 567,
    PLACING = 568,
    PLANS = 569,
    POLICY = 570,
    POSITION = 571,
    PRAGMA_P = 572,
    PRECEDING = 573,
    PRECISION = 574,
    PREPARE = 575,
    PREPARED = 576,
    PRESERVE = 577,
    PRIMARY = 578,
    PRIOR = 579,
    PRIVILEGES = 580,
    PROCEDURAL = 581,
    PROCEDURE = 582,
    PROGRAM = 583,
    PROPERTIES = 584,
    PROPERTY = 585,
    PUBLICATION = 586,
    QUOTE = 587,
    RANGE = 588,
    READ_P = 589,
    REAL = 590,
    REASSIGN = 591,
    RECHECK = 592,
    RECURSIVE = 593,
    REF = 594,
    REFERENCES = 595,
    REFERENCING = 596,
    REFRESH = 597,
    REINDEX = 598,
    RELATIONSHIP = 599,
    RELATIVE_P = 600,
    RELEASE = 601,
    RENAME = 602,
    REPEATABLE = 603,
    REPLACE = 604,
    REPLICA = 605,
    RESET = 606,
    RESPECT_P = 607,
    RESTART = 608,
    RESTRICT = 609,
    RETURNING = 610,
    RETURNS = 611,
    REVOKE = 612,
    RIGHT = 613,
    ROLE = 614,
    ROLLBACK = 615,
    ROLLUP = 616,
    ROW = 617,
    ROWS = 618,
    RULE = 619,
    SAMPLE = 620,
    SAVEPOINT = 621,
    SCHEMA = 622,
    SCHEMAS = 623,
    SCROLL = 624,
    SEARCH = 625,
    SECOND_P = 626,
    SECONDS_P = 627,
    SECURITY = 628,
    SELECT = 629,
    SEQUENCE = 630,
    SEQUENCES = 631,
    SERIALIZABLE = 632,
    SERVER = 633,
    SESSION = 634,
    SESSION_USER = 635,
    SET = 636,
    SETOF = 637,
    SETS = 638,
    SHARE = 639,
    SHORTEST = 640,
    SHOW = 641,
    SIMILAR = 642,
    SIMPLE = 643,
    SKIP = 644,
    SMALLINT = 645,
    SNAPSHOT = 646,
    SOME = 647,
    SOURCE = 648,
    SQL_P = 649,
    STABLE = 650,
    STANDALONE_P = 651,
    START = 652,
    STATEMENT = 653,
    STATISTICS = 654,
    STDIN = 655,
    STDOUT = 656,
    STORAGE = 657,
    STRICT_P = 658,
    STRIP_P = 659,
    STRUCT = 660,
    SUBSCRIPTION = 661,
    SUBSTRING = 662,
    SUMMARIZE = 663,
    SYMMETRIC = 664,
    SYSID = 665,
    SYSTEM_P = 666,
    TABLE = 667,
    TABLES = 668,
    TABLESAMPLE = 669,
    TABLESPACE = 670,
    TEMP = 671,
    TEMPLATE = 672,
    TEMPORARY = 673,
    TEXT_P = 674,
    THEN = 675,
    TIME = 676,
    TIMESTAMP = 677,
    TO = 678,
    TRAILING = 679,
    TRANSACTION = 680,
    TRANSFORM = 681,
    TREAT = 682,
    TRIGGER = 683,
    TRIM = 684,
    TRUE_P = 685,
    TRUNCATE = 686,
    TRUSTED = 687,
    TRY_CAST = 688,
    TYPE_P = 689,
    TYPES_P = 690,
    UNBOUNDED = 691,
    UNCOMMITTED = 692,
    UNENCRYPTED = 693,
    UNION = 694,
    UNIQUE = 695,
    UNKNOWN = 696,
    UNLISTEN = 697,
    UNLOGGED = 698,
    UNTIL = 699,
    UPDATE = 700,
    USER = 701,
    USING = 702,
    VACUUM = 703,
    VALID = 704,
    VALIDATE = 705,
    VALIDATOR = 706,
    VALUE_P = 707,
    VALUES = 708,
    VARCHAR = 709,
    VARIADIC = 710,
    VARYING = 711,
    VERBOSE = 712,
    VERSION_P = 713,
    VERTEX = 714,
    VIEW = 715,
    VIEWS = 716,
    VOLATILE = 717,
    WHEN = 718,
    WHERE = 719,
    WHITESPACE_P = 720,
    WINDOW = 721,
    WITH = 722,
    WITHIN = 723,
    WITHOUT = 724,
    WORK = 725,
    WRAPPER = 726,
    WRITE_P = 727,
    XML_P = 728,
    XMLATTRIBUTES = 729,
    XMLCONCAT = 730,
    XMLELEMENT = 731,
    XMLEXISTS = 732,
    XMLFOREST = 733,
    XMLNAMESPACES = 734,
    XMLPARSE = 735,
    XMLPI = 736,
    XMLROOT = 737,
    XMLSERIALIZE = 738,
    XMLTABLE = 739,
    YEAR_P = 740,
    YEARS_P = 741,
    YES_P = 742,
    ZONE = 743,
    NOT_LA = 744,
    NULLS_LA = 745,
    WITH_LA = 746,
    POSTFIXOP = 747,
    UMINUS = 748
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior			dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem			*defelt;
	PGSortBy			*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause		*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       		override;
	PGSortByDir            		sortorder;
	PGSortByNulls          		nullorder;
	PGLockClauseStrength 		lockstrength;
	PGLockWaitPolicy 		lockwaitpolicy;
	PGSubLinkType 			subquerytype;
	PGViewCheckOption 		viewcheckoption;

#line 831 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  612
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   54186

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  515
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  413
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1879
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3143

#define YYUNDEFTOK  2
#define YYMAXUTOK   748


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   512,     2,   500,     2,     2,
     505,   506,   498,   496,   509,   497,   507,   499,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   514,   508,
     492,   494,   493,   513,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   503,     2,   504,   501,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   510,     2,   511,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   495,   502
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   492,   492,   508,   520,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
     564,   566,     7,    21,    36,    56,    57,    84,    85,    86,
      87,    88,    89,    93,    94,    99,   104,   105,   106,   107,
     108,   113,   120,   121,   122,   139,   146,   153,   163,   173,
     185,   193,   202,   211,   230,   237,   242,   244,   246,   248,
     251,   256,   257,   261,   262,   263,   264,   269,   273,   274,
     279,   286,   291,   292,   293,   294,   295,   296,   297,   298,
     304,   305,   309,   314,   321,   328,   335,   347,   348,   349,
     350,   354,   359,   360,   361,   366,   371,   372,   373,   374,
     375,   376,   381,   404,   408,   415,   416,   420,   424,   425,
     426,   430,   434,   442,   443,   448,   449,   453,   461,   462,
     467,   468,   472,   477,   481,   485,   490,   498,   499,   503,
     504,   510,   521,   534,   548,   562,   576,   590,   613,   617,
     624,   628,   636,   641,   648,   658,   659,   660,   661,   662,
     669,   676,   677,   682,   683,     7,    14,    22,     9,    19,
       9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
      93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
     157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
     253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
     358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
     428,   433,   438,   446,   447,   452,   456,   457,   458,     9,
      19,    29,    39,    49,    59,    69,    79,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   112,   113,   114,   115,   116,   117,   118,   123,
     124,   129,   130,   131,   136,   137,   138,   141,   142,     7,
      18,    19,    23,    27,     7,    13,    19,    25,     6,     9,
      19,    32,    33,     7,    14,    31,    51,    52,     8,    21,
      27,    34,    40,    47,    57,    61,    70,    79,    88,    95,
      96,   101,   113,   118,   143,   153,   163,   169,   180,   191,
     206,   207,   213,   214,   219,   220,   226,   227,   231,   232,
     237,   239,   245,   246,   250,   251,   256,     5,    11,     3,
      10,    17,    24,    31,    38,    45,    55,    55,    57,    58,
       8,    21,    34,    52,    74,    75,    76,    77,     7,    47,
      48,    52,    53,    68,    69,    76,    84,    92,   100,   108,
     116,   127,   128,   155,   170,   186,   187,   206,   210,   214,
     231,   238,   245,   255,   256,   259,   271,   282,   290,   295,
     300,   305,   310,   318,   326,   331,   336,   343,   344,   348,
     349,   350,   357,   358,   362,   363,   367,   368,   369,   373,
     374,   378,   382,   383,   386,   395,   406,   407,   408,   411,
     412,   413,   417,   418,   419,   420,   424,   425,   429,   431,
     447,   449,   454,   457,   465,   469,   473,   477,   481,   485,
     492,   497,   504,   505,   509,   513,   517,   521,   528,   535,
     536,   541,   542,   546,   547,   552,   554,   556,   561,   581,
     582,   584,   589,   590,   594,   595,   598,   599,   624,   625,
     629,   630,   634,   635,   636,   637,   638,   642,   655,   662,
     669,   676,   677,   681,   682,   686,   687,   691,   692,   696,
     697,   701,   712,   713,   714,   715,   719,   720,   725,   726,
     727,   736,   742,   760,   761,   765,   766,   772,   778,   786,
     794,   803,   812,   816,   821,   846,   850,   863,   877,   892,
     904,   920,   926,   931,   937,   944,   945,   953,   957,   961,
     967,   974,   979,   980,   981,   982,   986,   987,   999,  1000,
    1005,  1012,  1019,  1026,  1058,  1069,  1082,  1087,  1088,  1091,
    1092,  1095,  1096,  1101,  1102,  1107,  1111,  1117,  1138,  1146,
    1159,  1162,  1166,  1166,  1168,  1173,  1180,  1185,  1191,  1196,
    1202,  1208,  1217,  1219,  1222,  1226,  1227,  1228,  1229,  1230,
    1231,  1236,  1256,  1257,  1258,  1259,  1270,  1284,  1285,  1291,
    1296,  1301,  1306,  1311,  1316,  1321,  1326,  1332,  1338,  1344,
    1351,  1373,  1382,  1386,  1394,  1398,  1406,  1418,  1439,  1443,
    1449,  1453,  1466,  1474,  1484,  1486,  1488,  1490,  1492,  1494,
    1499,  1500,  1507,  1516,  1524,  1533,  1544,  1552,  1553,  1554,
    1558,  1558,  1561,  1561,  1564,  1564,  1567,  1567,  1570,  1570,
    1573,  1573,  1576,  1576,  1579,  1579,  1582,  1584,  1586,  1588,
    1590,  1592,  1594,  1596,  1598,  1603,  1608,  1614,  1621,  1626,
    1632,  1638,  1669,  1671,  1673,  1681,  1696,  1698,  1700,  1702,
    1704,  1706,  1708,  1710,  1712,  1714,  1716,  1718,  1720,  1722,
    1725,  1727,  1729,  1732,  1734,  1736,  1738,  1741,  1746,  1751,
    1758,  1763,  1770,  1775,  1783,  1788,  1797,  1805,  1813,  1821,
    1839,  1847,  1855,  1863,  1871,  1879,  1883,  1887,  1891,  1899,
    1907,  1923,  1931,  1939,  1947,  1955,  1963,  1971,  1975,  1979,
    1983,  1987,  1995,  2003,  2011,  2019,  2039,  2061,  2072,  2079,
    2093,  2109,  2111,  2113,  2115,  2117,  2119,  2121,  2123,  2125,
    2127,  2129,  2131,  2133,  2135,  2137,  2139,  2141,  2143,  2145,
    2147,  2151,  2155,  2159,  2173,  2174,  2175,  2182,  2194,  2209,
    2221,  2223,  2235,  2246,  2270,  2281,  2290,  2294,  2301,  2309,
    2317,  2328,  2336,  2364,  2399,  2410,  2411,  2418,  2424,  2428,
    2432,  2436,  2440,  2444,  2448,  2452,  2456,  2460,  2464,  2468,
    2472,  2476,  2480,  2484,  2486,  2488,  2492,  2501,  2506,  2513,
    2528,  2535,  2539,  2543,  2547,  2551,  2565,  2566,  2570,  2571,
    2579,  2580,  2584,  2585,  2590,  2598,  2600,  2614,  2617,  2644,
    2645,  2648,  2649,  2660,  2666,  2673,  2682,  2699,  2744,  2752,
    2760,  2768,  2776,  2797,  2798,  2801,  2802,  2806,  2816,  2817,
    2819,  2820,  2821,  2824,  2825,  2828,  2829,  2830,  2831,  2832,
    2833,  2834,  2835,  2836,  2837,  2838,  2839,  2842,  2844,  2849,
    2851,  2856,  2858,  2860,  2862,  2864,  2866,  2868,  2870,  2884,
    2886,  2890,  2894,  2901,  2906,  2913,  2917,  2923,  2927,  2936,
    2947,  2948,  2952,  2956,  2963,  2964,  2965,  2966,  2967,  2968,
    2969,  2970,  2971,  2972,  2982,  2986,  2993,  3000,  3001,  3017,
    3021,  3026,  3030,  3045,  3050,  3054,  3057,  3060,  3061,  3062,
    3065,  3072,  3082,  3096,  3097,  3101,  3112,  3113,  3116,  3117,
    3120,  3124,  3131,  3135,  3143,  3154,  3155,  3159,  3160,  3164,
    3165,  3168,  3169,  3179,  3180,  3184,  3185,  3188,  3204,  3212,
    3220,  3235,  3253,  3254,  3257,  3258,  3261,  3265,  3266,  3269,
    3270,  3271,  3281,  3282,  3293,  3297,  3324,  3326,  3331,  3333,
    3343,  3346,  3357,  3361,  3365,  3377,  3381,  3390,  3397,  3435,
    3439,  3443,  3447,  3451,  3455,  3459,  3465,  3466,  3482,  3483,
    3484,  3487,  3488,  3494,  3495,  3496,  3499,  3500,  3501,  3504,
    3505,  3506,  3509,  3510,  3513,  3515,  3520,  3521,  3524,  3532,
    3533,  3534,  3535,  3538,  3539,     6,    15,    25,    35,    45,
      55,    65,    75,    85,    95,   106,   117,   127,   140,   141,
       7,    16,    34,    41,    46,    47,    48,    49,     9,    17,
      29,    30,    34,    35,    36,    41,    42,    43,    48,    52,
      56,    60,    64,    68,    72,    76,    80,    84,    88,    92,
      97,   101,   105,   112,   113,   117,   118,   119,     8,    33,
      62,    66,    67,    72,    73,    78,    79,    83,    84,    89,
      90,    11,    24,    41,    42,    43,    48,     1,    30,    53,
      54,    59,    63,    68,    72,    80,    81,    85,    86,    91,
      92,    96,    97,   102,   103,   104,   105,   106,   111,   119,
     123,   128,   129,   134,   138,   143,   147,   151,   155,   159,
     163,   167,   171,   175,   179,   183,   187,   191,   195,   203,
     209,   210,   211,   216,   220,     7,    16,    25,    34,    43,
      52,     2,     9,    15,    21,    28,    35,    45,    46,    47,
       7,    14,    20,    28,    29,     7,    22,    37,    63,    64,
      68,    72,    99,   103,   111,   112,   116,   117,   121,   122,
     127,   135,   143,   155,   156,   160,   164,   165,   169,   170,
     178,   185,   194,   204,   205,   206,   212,   221,   231,   242,
     254,   264,   274,   285,   298,   307,   316,   328,   338,   460,
     474,   488,   500,   508,   522,   523,   524,   525,   526,   539,
     540,   545,   546,   550,   551,     7,    20,     7,    21,    25,
      32,    43,    44,    50,    51,     7,    18,    19,    23,    24,
      25,    26,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    65,    66,    67,    72,
      73,    78,    82,    90,    91,    96,    97,    98,   104,   109,
     117,   118,     7,    17,    18,    21,    23,    10,    16,    22,
      28,    38,    39,    47,    58,    70,    78,    86,    93,   103,
     105,   111,   115,   119,   134,   141,   142,   143,   147,   148,
      11,    24,    35,    36,    41,    42,    46,    47,    51,    63,
      78,    82,    83,    87,    89,    93,    94,    98,     2,     7,
      14,    24,    25,    32,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    43,
      43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
      43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
      43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
      43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
      43,    43,    43,    43,    43,    43,    43,    43,    43,    43,
      43,    44,    44,    44,    44,    44,    44,    44,    44,    44,
      44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
      44,    44,    44,    44,    44,    44,    44,    45,    45,    45,
      45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
      45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
      45,    45,    46,    46,    46,    46,    46,    46,    46,    46,
      46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
      46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
      46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
      46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
      46,    46,    46,    46,    47,    47,    47,    47,    47,    47,
      47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
      47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
      47,    48,    48,    48,    48,    48,    48,    48,    48,    48,
      48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
      48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
      48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
      48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
      48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
      48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
      48,    48,    48,    48,    48,    48,    48,    48,    48,    48
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
  "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
  "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
  "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
  "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
  "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
  "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
  "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHEAPEST", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE",
  "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS",
  "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION",
  "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT",
  "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST",
  "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG",
  "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME",
  "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P",
  "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER",
  "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE",
  "DESTINATION", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISCRIMINATOR", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P",
  "DROP", "EACH", "EDGE", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
  "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
  "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION",
  "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P",
  "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE",
  "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL",
  "GRANT", "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING",
  "GROUPING_ID", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P",
  "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE",
  "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
  "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
  "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL",
  "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF",
  "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME",
  "LOCALTIMESTAMP", "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO",
  "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD",
  "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P",
  "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P",
  "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT",
  "NO", "NODE", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT",
  "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF",
  "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS",
  "OR", "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS",
  "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER",
  "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PLACING",
  "PLANS", "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY",
  "PUBLICATION", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK",
  "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX",
  "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE",
  "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHORTEST", "SHOW",
  "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE",
  "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS",
  "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "STRUCT",
  "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID",
  "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP",
  "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO",
  "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM",
  "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P",
  "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN",
  "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX", "VIEW", "VIEWS",
  "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN",
  "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES",
  "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES",
  "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P",
  "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'",
  "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'",
  "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','", "'{'", "'}'",
  "'#'", "'?'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "CreateStmt", "ConstraintAttributeSpec", "def_arg",
  "OptParenthesizedSeqOptList", "generic_option_arg", "key_action",
  "ColConstraint", "ColConstraintElem", "generic_option_elem",
  "key_update", "key_actions", "create_generic_options", "OnCommitOption",
  "reloptions", "opt_no_inherit", "TableConstraint", "TableLikeOption",
  "reloption_list", "ExistingIndex", "ConstraintAttr", "OptWith",
  "definition", "TableLikeOptionList", "generic_option_name",
  "ConstraintAttributeElem", "columnDef", "generic_option_list",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "func_type",
  "ConstraintElem", "TableElementList", "key_match", "TableLikeClause",
  "OptTemp", "generated_when", "PragmaStmt", "AnalyzeStmt",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "CreateFunctionStmt", "macro_alias", "param_list",
  "DeallocateStmt", "CallStmt", "CreateSeqStmt", "OptSeqOptList",
  "ExecuteStmt", "execute_param_clause", "InsertStmt", "insert_rest",
  "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "CheckPointStmt", "VariableShowStmt", "show_or_describe",
  "var_name", "ViewStmt", "opt_check_option", "UpdateStmt", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
  "func_alias_clause", "join_type", "join_outer", "join_qual",
  "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
  "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "sub_type", "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "expr_list", "opt_expr_list", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list", "target_list",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "opt_replace_list", "qualified_name_list",
  "qualified_name", "name_list", "name", "attr_name", "func_name",
  "AexprConst", "Iconst", "Sconst", "ColId", "ColIdOrString",
  "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabel",
  "ColLabelOrString", "RenameStmt", "opt_column", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "IndexStmt", "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "CreateAsStmt",
  "opt_with_data", "create_as_target", "CopyStmt", "copy_from",
  "copy_delimiter", "copy_generic_opt_arg_list", "opt_using", "opt_as",
  "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "AlterObjectSchemaStmt", "TransactionStmt",
  "opt_transaction", "LoadStmt", "file_name", "GraphTableStmt",
  "ColumnsClauseOptional", "ColumnList", "PathPatternList",
  "PathPatternNameOptional", "PathConcatenation", "ElementPattern",
  "ElementPatternFillerOptional", "VertexPatternFiller", "VertexPattern",
  "GraphPatternVariableDeclarationOptional", "IsLabelExpression",
  "IsLabelExpressionOptional", "IsOrColon", "MandatoryEdgePatternFiller",
  "EdgePattern", "FullEdgePattern", "FullEdgePointingRight",
  "FullEdgePointingLeft", "FullEdgeAnyDirection", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "ExportStmt", "ImportStmt", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "CreateEnumStmt", "opt_enum_val_list", "enum_val_list",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "CreatePropertyGraphStmt", "vertex_alias", "edge_alias",
  "VertexTableDefinitionList", "VertexTableDefinition",
  "GraphTableKeyClause", "LabelList", "LabelEnd",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "VariableResetStmt",
  "generic_reset", "reset_rest", "unreserved_keyword", "col_name_keyword",
  "func_name_keyword", "type_name_keyword", "other_keyword",
  "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,    60,    62,    61,   747,    43,    45,    42,    47,
      37,    94,   748,    91,    93,    40,    41,    46,    59,    44,
     123,   125,    35,    63,    58
};
# endif

#define YYPACT_NINF (-2723)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1801)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    5013,  -108,   708, -2723, -2723,  -108, 33817, -2723,  -108,    77,
    2567, 38677, -2723,  6331,  -108, 45481,   995,   242,   207,   309,
   39163, 39163, 45481, 45481, 39649,  -108,   287, 45967, -2723,  -108,
   23082, 36247,    17,  -177, 46453, 45481,   217,   489,   312, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723,    46, -2723, -2723, 22595, -2723, -2723, -2723,   171, -2723,
      72,   189,   -75,   270, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
     384, -2723, -2723, -2723, -2723, -2723, -2723, -2723, 40135, 45481,
   40621, 36733, 41107, -2723,   116, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723,   153, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723,   157, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723,   369,  -142, -2723,
     170, -2723, -2723, -2723, -2723,  1446, 41593, -2723,   692,   716,
   -2723,   498,   740, 46939, -2723, -2723, 45481, -2723, -2723,   556,
   41593,   730, -2723, -2723, -2723, 42079, -2723, -2723, -2723, -2723,
     684, -2723, -2723,   519, -2723,    90, -2723, -2723, -2723,   491,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,   596, -2723,
   52285, -2723, 47425, 47911, 48397, -2723,   497,   840,   779, 22108,
   -2723, -2723, -2723, -2723, -2723, -2723,   384,   989, -2723, 39163,
     989, -2723, -2723, -2723, -2723, -2723,   486,   505, -2723,   535,
     867,   609, -2723, -2723, -2723, -2723, -2723,   836,  9506,  9506,
   48883, 48883,   989, 48883,   645,   -11, -2723, -2723, -2723,  -177,
    1446,   609, -2723,   -75, -2723, 23569, -2723,   640,  -142, -2723,
   -2723,   209,   984, 12572, 45481,   653, -2723,   662,   653,   679,
     703,   713, -2723,  5013,  1029,   994, 36247, -2723,   741,  1009,
     609, -2723,   560,   560,  1185,   560,  1063,  1258, -2723,  1452,
   -2723,   771, -2723, 41593,  1098,   113,   938,  1161,  5243,  1176,
     120,  1189,   827,  6951, 12572, 32359, -2723,  -142, -2723, -2723,
   -2723, -2723,   739,   849, -2723, -2723, -2723, -2723,   840,  1295,
    1130, -2723,   859,  1378,   957, 42565, 43051, 41593,   918,  1348,
   -2723, -2723, -2723, -2723,   966, -2723, -2723,   163, -2723, -2723,
   -2723, -2723,   997, -2723,   997,   997, -2723, -2723, -2723, -2723,
     940,   940,  1147,   946, -2723, -2723, -2723,  1306, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,   963,   695,
   -2723,   997, -2723,   940, -2723, -2723, -2723, -2723, -2723, 53698,
   -2723, -2723, -2723, -2723,   370,   524, -2723, -2723, -2723,    59,
     965, -2723,  1440, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723,   991, -2723,  2923,   940, -2723, -2723,  1351,    74, -2723,
    1358,    75, -2723,  1371,  1239, 12572, -2723,  1122, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,  -177,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723,   454, -2723, -2723, 29800, -2723, -2723,   779,
    1033, -2723, -2723, 29800, 13083, 52756,  1506, -2723,  1320, 45481,
    1052, -2723, -2723, -2723, -2723, -2723, -2723,  1068,  1561,   132,
    1575, 12572,  1077,   132,   132,  1083,  1429, -2723, -2723, -2723,
     173,  1093,  1134, -2723,   176,   176, -2723,  1138,  1156, -2723,
     180,  1175,  1181,  1602,  1610,   139,  1191,  1213,   695,   132,
   12572, -2723,  1221,   176,  1228,  1235,  1246,  1679,  1264, -2723,
    1696,  1273,   125,   134,  1278,  1284, -2723,  1302, -2723,   182,
   12572, 12572, 12572,  1503, 12572,  7973, 41593,  1801, -2723,  -142,
    1307,   989, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
     142,  5436, -2723,  1346, -2723, -2723, -2723,   191, 12572, -2723,
    1810,    15, -2723,   183, -2723, -2723, -2723,    51,  1607,  1332,
   -2723, -2723, -2723, -2723,   205,  1731, 28828, 29314, 41593, -2723,
   -2723,  -142, -2723, -2723, -2723, -2723, -2723,   532, -2723, -2723,
     384, 31251,   557,  -142,   653, 45481, 45481,  1813,  1605, -2723,
   -2723, -2723, 36247, 41593, 49369,  1476, -2723,  1629, -2723, -2723,
     -75,   -75, 12572,   -75,   179,   628, 10017, 13594,  1695,  1581,
     568,   140,  1708, -2723,  1593,  1063,  1258, 12572,   662, 41593,
   34303,  1019,  1060,  1375,  1459,  1379,   543,  1817, -2723,  1387,
   -2723,  1491, 41593, 53698,   105, -2723,  1864,   105,   105,   657,
    1868,  1500,   229,  1662,   545,   355,  1387,   701, -2723, 36247,
     155,   602,  1387, 41593,  1505,   682,  1387,   106, 13083,   892,
    1056,   258,  1065,  1170,   110, 13083,  1468,  1489,  1510,  1534,
    1654,  1660,  1724,  1733,  1744,  1754,   150,  1774,  1805,  1809,
    1818,  1820,  1822,   152,  1825,   187, 13083,  1840,  1423, -2723,
   31251,   -40, -2723, -2723,  1846,   169, -2723, 27369,  1417, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723,  1511, 45481,  1466,   433,
      -3,  1782,  1845, 32359,  1436,  1799, 41593,  1671,   701,  1672,
    1443,  1913,   849, 10528,  1914, -2723, 49855, -2723, -2723, -2723,
   -2723, -2723, -2723,  1448, -2723, -2723, 12572, -2723, -2723, -2723,
    1946, -2723, 52756, 52756,   997,   997, -2723, -2723,  1921,  1536,
    1544,  1946, -2723,  1946, -2723, -2723, -2723, 52756, -2723, 45481,
    1464,  1470,  1946, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,  1946,
    1546, -2723,  1551,  1552,  1553, -2723, -2723, -2723, -2723, -2723,
   45481, 45481, -2723, 45481, 45481, -2723, 45481, 45481,   707, 43537,
     779, 37219, -2723, -2723, -2723, -2723,   793,   863, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, 32359, -2723,  2093,
   -2723, -2723, -2723,  1469,   712, -2723,   717,  1446, -2723, -2723,
   12572,  -142, 12572, 31251,  1516, 12572, 12572,  1475,  1946,  1946,
   -2723,  3918,  1946,  1946,  6139, 12572, 26494, 12572, 17171, 11039,
   12572, 12572,  8484, 12572,  6139,  1970,  1970, 24543, -2723,  1633,
    1478,  1480,  1768,  5936,  1481, -2723,   752, -2723,  1477, -2723,
    -142,  -142, 12572, -2723, 12572,  4103,  4103, -2723,   203, 52756,
   12572, 12572, 12572, 12572, 31873,  1568,   184, 45481, 12572, 12572,
    1487,   914, -2723, 12572,  1716, -2723,  1490, 12572,  1574,  1110,
   12572, 12572, 12572, 12572, 12572, 12572, 12572, 12572, 12572, -2723,
   -2723, 18690,   323,  1815,  1838,  -142, 12572,   -82,   250, 12572,
   37705,  9506,  1831,  6951, -2723,  -142, 27856,   164,  1831, -2723,
   -2723, -2723,   186, -2723, -2723, -2723, -2723, -2723,  1469, -2723,
    1469,  1498, 41593,   209, 35761, -2723, 12572, -2723,   718,  1501,
     156,  1560,   769,  1972, 45481, -2723, 25030, -2723,  1792, -2723,
    1504, -2723, 30282,  1792, -2723, -2723, 17668,  1628,  1788,  1725,
   -2723, -2723,  1703,  1705, -2723,  1509, 31294, 14105, 14105, -2723,
     699, 31251,  1525, -2723, -2723, -2723, -2723, -2723, -2723,   588,
   -2723, 41593,     3,  1695,   140,   722, -2723,   829,  1514, 50341,
   45481,  1794,  1746,  1796,  -121, -2723, -2723, -2723, 52756, -2723,
   45481, 45481, 50827, 51313, 32845, 45481, 32359, -2723, -2723, -2723,
   -2723, 45481,  1082, 45481,  5496, -2723, -2723, -2723,   105, -2723,
   -2723, -2723, -2723, -2723, 45481, 45481, -2723, -2723,   105, 45481,
   45481,   105, -2723,  1048, 45481, 45481, 45481, 45481,  1059, 45481,
   45481,   -33,   -33,  1728, -2723, 11550,    80, -2723, 12572, 12572,
   -2723, 12572,  1697, -2723,   753, -2723,  1740,   158,  1569, 41593,
   41593, -2723, -2723,  1618, 45481,   864, -2723, -2723, -2723, -2723,
   -2723, -2723, 32359,  1527,  1528,  1881, -2723,   701,  1885, 34789,
     855,  1209,  1573, -2723,   772, 12572,  1769, -2723, -2723,  1753,
   12572,   780,  1539,    59,   785, -2723, -2723,  1543,  1470,  1559,
    1562,  1550,  1555, -2723,   797, 52756,  1946,   122,  1556,  1557,
    1627,  1359,  1144,  1522,    74, -2723,    75, -2723,  1762,   231,
   -2723,  1784,   849,  2029, -2723, -2723, -2723, -2723, -2723, -2723,
   21621, -2723,   802, -2723, -2723,  2030,   989,  2030,   837, -2723,
   -2723,  2030, -2723,  2030, -2723, 29800, -2723, 13083, -2723, 52756,
   -2723,   811, -2723,  1564, 12572,    32, -2723, 30398,   883, 12572,
    1565,  1566, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723,  1567,  1898, -2723,  1570,  1576,  4784, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723,  1580,  1584, 30611,  1590, 17171, 17171,  7973,   881, -2723,
   17171,  1592, -2723, -2723,   895, 30316,  1478,  1595, 30751, 12061,
   12572, 12061, 12061, 30893,  1478,  1596, 30922, 45481, -2723, 14616,
   -2723, -2723, -2723, 12572, 41593, -2723, 12572,   903,  6174, -2723,
   -2723, -2723,  3509,  3509,  3509,  6139, -2723, -2723, -2723,  1586,
   -2723, 17171, 17171, -2723,  3272,   860,  7973, -2723, -2723,  1908,
   -2723,  1111, -2723,  1582, -2723, -2723,  1463, -2723, 26494,  4693,
   12572,   301, -2723, 12572,  1487, 12572,  1676,  3509,  3509,  3509,
     311,   311,   181,   181,   181,   335,   250, -2723, -2723, -2723,
    1600,  1603,  1609,  1806, 31251,  1264, 12572, -2723, 31251,   954,
    1003, 41593,  1587,  3161,  4225, -2723, -2723, -2723, 20160,  1643,
     -40,  1503,  1643,  1946,  4103, -2723,   662, -2723, -2723, -2723,
   31251, -2723,  1446,  2074,  2109,  2109,  -145,   630, 20160,  1651,
    1663,   342, 23082,  1827, -2723, 45481, -2723, 45481, -2723,     7,
    1626, -2723, 12572, -2723, -2723,  1076,  1632,  1832,  1833,   898,
     898,   699,  1836, -2723, -2723,  1683, -2723, -2723, -2723, 12572,
    8995,  1538, -2723,  1540, -2723, -2723, -2723, -2723,  1620, -2723,
   -2723,  1886, -2723, -2723, -2723, -2723,  1709,  1387, 12572,  1861,
   -2723,   112,  1634,  1984,  -115,  1948, 45481, -2723,  1859, -2723,
     749,  2005,   231,  2007,   231, 32359, 32359, 32359, -2723,   989,
     909, -2723, -2723, -2723,   941, -2723,   -97, -2723, -2723, -2723,
    1739,   882,  1387,   701, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723,   190,   908,  1387,  1741, -2723,  1742, -2723,  1743,   996,
    1387, -2723, -2723,    80,    80,    80, 13083, -2723,  1888,  1892,
    1657, 31251, 31251, 31251,  1664, -2723,   145, -2723, 45481, -2723,
   -2723, -2723,  1697, 41593,  1670,   849,  1678, -2723,   639, -2723,
     989, 45481, 41593, 41593, 41593, -2723, -2723, -2723,  1661,  1675,
   -2723, 52756,   -31,  1893,  1900, 45481,  1721,  1379,  2165, -2723,
   31251,  2049, 41593,   955, -2723, -2723, -2723, -2723,  1946, -2723,
   -2723,  -131,  -131, -2723, 45481, -2723,  1704, -2723,  1706, -2723,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   45481, -2723,  2055,  1446, -2723, 35275, -2723, -2723, -2723, -2723,
   32359, -2723,   989, -2723,   989,  1933, 45481, 28342,   989,   989,
   -2723, -2723, -2723, -2723, 30983, 12572, -2723,  2069, 52756, -2723,
    6218, -2723, -2723, -2723, 12572, -2723, -2723, 12572, -2723, 26494,
   12572,  2045, -2723,  2208,  2208,  5936, 52756, 17171, 17171, 17171,
   17171,   603,  1228, 17171, 17171, 17171, 17171, 17171, 17171, 17171,
   17171, 17171, 18179,   329, -2723, -2723, 12572, 12572,  2054,  2045,
   -2723, 52756,  1718,  1478,  1720,  1722, 12572, -2723, 52756,   971,
    7973, 31065, -2723,  -142,  6309, -2723, 31251, -2723,  4103, 12572,
     426,  2427, 12572,  1001, 12572,  2050, -2723, -2723,  1726, -2723,
   -2723, 52756, 12572,  1723,  3255, 17171, 17171,  4613, -2723,  4737,
   12572,  7973, -2723,  1728,  1763, 25517, -2723,  1821,  1821,  1821,
    1821, -2723, -2723, 41593, 41593, 41593,  1727, 20647,  2062, 19673,
   44023,  1729,  1084, -2723, 44023, 44509, -2723,  1751, -2723,  -142,
   12572,  2052,    80,  1633,  2052,  1737, -2723, -2723,  1738, -2723,
    -145,  -145,  2109,  2160,  1748,   131,  2243,   630, -2723, -2723,
   -2723, -2723, -2723, -2723, -2723,  1729, 12572,  1895, -2723, -2723,
   -2723,  1795, -2723,  1011, -2723,  2163,  1895, -2723,  1013, -2723,
   25030,  1651, 12572,  -142, -2723,  1747, -2723,  1632,   161, -2723,
   -2723, -2723,  1963, -2723, -2723, -2723, 41593, -2723, 45481, 26988,
    2101, -2723, 45481, 45481, 45481, -2723, 45481,  1022,   747,  1752,
   -2723,   747,  2080,   670,  1379,   229,  5039,    55, -2723, -2723,
   -2723,  1828, 45481, -2723, 45481, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, 32845, -2723, 32359, 26007, 32359, 45481, 45481, 45481,
   45481, 45481, 45481, 45481, 45481, 45481, 45481,  1757,  1759,  1761,
    1728, -2723, -2723, -2723, -2723, -2723, -2723, -2723,   355, -2723,
     145,  1764, 34789,  1573, 41593,  1845, 44995, -2723,  1766,  1750,
    1034,   701,  1765,  2232, -2723,   855, 34789, -2723, -2723, -2723,
    2193, -2723,   497,   167, -2723, -2723,  1446, 45481,  1830, -2723,
    1470,  1776, -2723, -2723,  1470, 52756, -2723, -2723,   231, 41593,
    1050, -2723, -2723, -2723, -2723, -2723, 45481,  1775, -2723,  1775,
   -2723, -2723, 12572, 31251, -2723,  1772, -2723, 31251, 27007, -2723,
   31251,  2054, -2723,  1829,  1829,  1829,  1648,  2111,   162,  1781,
    1829,  1829,  1829,   283,   283,   204,   204,   204,  2208,   329,
   31251, 31251, -2723, -2723,  1783, -2723, -2723, -2723,  1478,  1785,
   -2723,  5594, -2723,  1058, 45481, -2723, -2723,   343, 12572, 12572,
    3272, -2723, 31390, 12572, 52756,  1086,  3272,   336, 12572,  3356,
    3655, 12572, 12572,  5154, 27026,  1786, 12572, 51799, -2723, -2723,
   41593, 41593, 41593, 41593, -2723, -2723, -2723,  2284, -2723, 44023,
   44509,  1797, 19185,  1084,  1798, 41593, -2723,  1874,  1800, 20160,
    2075,  1991, -2723, 20160,  1991,  1039,  1991,  2076,  1874, 24056,
   -2723,  1874,  1802,  2006, -2723,   643, 31251,  2252,  2122,  1808,
   -2723,  2122,   989, -2723,  2160,  2160,   630,  1807,  1811,   137,
       4, -2723,  2308, -2723, -2723,  2312,   201,     4,  1812, -2723,
   31251,  9506, -2723,  1446,  1275, 45481,  -142,   -37, -2723,  1826,
   45481, -2723,  1895, 31251, 26494, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, 45481,  1091, -2723,  1096,   747, -2723,  1852, -2723,
     223,  2128,    78, -2723, 32359,  1645,   825, -2723,  2145,  2059,
   -2723,   105, -2723, 12572,   825,  2060,   103, 45481, -2723, -2723,
    2362, -2723, 52756,   231,   231, -2723, -2723,  1834,  1835,  1841,
    1844,  1847,  1848,  1849,  1851,  1853,  1854,  1855,  1860,  1862,
    1865,  1869,  1871,  1872,   963,  1875, -2723,  1878,  1747,  1879,
    1883,  1889, 53227,  1890,  1894,  1899,  1902,  1903,   793,   863,
   -2723, -2723, -2723, -2723, -2723,   859, -2723,  1905, -2723,  1858,
   -2723, -2723,  1922, -2723,  1936, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723,    80,  1033,   129, 45481,  1882,  2330,  2149,
    1097, -2723,  2105,  1887, -2723,   989,  1573, -2723, 34789,  1230,
     197,  1900, -2723,   166,  1721, -2723,  2285,  1935,  2110, 45481,
    1909, -2723, -2723, -2723,  2379, -2723, 35275,  1775, 31251, -2723,
   -2723, -2723, 17171,  2246,  1916, 52756, -2723, -2723, -2723, 12572,
   -2723,  3272,  3272, 31390,  1102, -2723,  3272, 12572, 12572,  3272,
    3272, 12572, -2723, -2723, 27055,  2117, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723, 33331, 44023,  1924, -2723, 38191, -2723, -2723,
   45481,  1084, 20160, -2723, -2723,  1426, -2723, 20160,  2194, -2723,
   20160, -2723, 45481,  1925, -2723, 45481, -2723, 15127, 12572,  1961,
     989,  1961, -2723,  1926,  1927,   630,  9506, 41593,  2308,  1934,
   -2723, -2723, -2723,    52,     4, -2723, -2723, -2723, -2723, -2723,
    1332, -2723,   342, -2723, -2723,  2349, 21134,  2303, 12572, -2723,
   -2723,  1940,   747, -2723,  2099,  1852,  1937, -2723, -2723, -2723,
   -2723, -2723, -2723, -2723,  1107,  1942, 45481, 45481, 17171, -2723,
     825,   635,   200, -2723,  2214, 41593,  1852,  2366, -2723, -2723,
   -2723, -2723,  2333,  2414,  2299, -2723, -2723, 31251, -2723, -2723,
    1946,  1946, -2723, -2723,  2380, -2723, -2723, -2723, -2723,   859,
     439, 26007, 45481, 45481,  1949, -2723, -2723,   355,  2334,  1116,
     855,  1446,  1951,  2234,   128, 41593,  2305, 34789, -2723,  2426,
    1957, 45481,  1721,   367,   367, -2723,  2103, -2723,  2104, -2723,
   -2723,   238, -2723, 41593, -2723, -2723, 21134,  1446, -2723,  3495,
   17171, 52756,  1117, -2723, -2723,  3272,  3272,  3272, -2723,  2410,
    1728, -2723,  1123,  2434, -2723, 45481,   -43,   -62,  1966,  1967,
   -2723, -2723,  1124, -2723, 12572,  1968, -2723, -2723, 20160,  1426,
    1125, -2723, 52756, 45481,  1132, 52756,  1969,   -90,  1976,  7462,
    1985, -2723, -2723, -2723, -2723, -2723, 31251, 31251, 45481,  2028,
   -2723,  2028, 41593, 41593, -2723,  1139, -2723,   372, -2723, 45481,
     159,   202, -2723,  2041, 45481, 12572, -2723,  1141,  2421,   214,
     -14, 31251, -2723, 41593, -2723, 32359, -2723,   747, -2723, 32359,
   12572, -2723,  1601,  1648,  2460, -2723, -2723, -2723, -2723,  1852,
     849, -2723, 45481, -2723,  2315, -2723, 45481,  2061,   485,  2077,
   -2723, -2723, -2723, -2723,  1033,   989,  1573,  1900,  1935, 45481,
     295,   199, -2723, -2723,  2096, -2723, 41593,  1446,   855,   497,
   -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723, -2723,
   -2723, -2723, -2723,  2444,  2220,  2446,  1830,  1146,  3495,  1148,
   -2723, 12572,    70,  1751, 33331,  2010, -2723,  1166, -2723, -2723,
   -2723, -2723, -2723, 45481,  1031, -2723, 31251, 45481, -2723, -2723,
   -2723, 45481,  2380,  1173, -2723, 12572,  2014, 12572, -2723, 15127,
    2011, -2723,  2485,  2158, -2723, -2723, -2723, -2723, -2723,  9506,
     168,  2027,  2021,  2514,   210, -2723, -2723,  1446, -2723, 27074,
    1643, 21134, 45481, 45481, 45481, -2723,  2146,   849,   747,  1179,
   -2723,  2034, -2723, 27134,  2250, -2723,  2339, -2723,  2282, -2723,
    2032, -2723, 12572, -2723,  2100, -2723, -2723, -2723,  2503, -2723,
   -2723,  1184, -2723, -2723, -2723, 45481,  2537,  2036,  2037,  1935,
    1900,  1721,  2251, -2723,  2253,  2038,  1573, -2723,  1478, 15638,
   15638,  2039, -2723, -2723, 45481, -2723,  1186,  2042,  1196, -2723,
   -2723, -2723,  1197, 15127,  1201, -2723, 45481,  2046, 38191, -2723,
    2535,  2053, -2723,  2056,  2543, -2723, -2723, -2723,  2421, -2723,
   -2723, -2723,   271, -2723,   271, 25030,  2282, -2723, 32359, 26007,
    2286,  2032,    87,  2264,   701, -2723, 31251, -2723,  1446, -2723,
   -2723, -2723, 41593, 34789, -2723, -2723, -2723, -2723, -2723, 21134,
    1643, 16660,  2197,   239, 30363, -2723, -2723, -2723, -2723,  1202,
   -2723,  2547,  2212, -2723, -2723,  1214, -2723, -2723, -2723, -2723,
    2552, -2723, -2723,  2058, 45481,  1632,  1632,  -128,  2264, -2723,
   -2723,  2358, -2723, -2723, -2723, -2723, -2723,   124,  2275, -2723,
    2276,  1591,  1935,  2149,  1216, -2723,  1218, -2723,  2534, -2723,
   -2723, -2723, -2723, -2723, -2723,  2063,  2066, -2723, -2723,  2064,
     219,   271, -2723, -2723, -2723, -2723, -2723,   671,   671,  2451,
   -2723,  2130, -2723, -2723, -2723,  2183, -2723, 41593,  1573, 16149,
   -2723,  2570,  2083, -2723, -2723,  1632,   747, -2723,  2560, -2723,
     213, -2723, -2723,  2149, -2723,  1643, -2723,  2079, -2723, -2723,
   -2723, -2723, -2723,  2247, -2723, -2723, 41593,  2456,  2149,  2249,
   41593,  2234,  2368
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     310,  1139,     0,  1244,  1243,  1139,     0,   338,  1139,  1104,
     172,     0,   347,     0,  1139,     0,   310,     0,     0,     0,
       0,     0,     0,     0,     0,  1139,   405,     0,   346,  1139,
       0,     0,  1200,     0,     0,     0,     0,     0,     2,     4,
      18,    30,     8,     7,    21,    14,    19,     9,    17,    22,
      28,     0,    10,    39,     0,    40,    35,    33,   372,   359,
     410,   371,   309,   375,    32,    16,     6,    27,    12,    11,
       5,    34,    29,    25,    36,    24,    26,    20,    31,    23,
    1227,    13,    38,    15,    37,  1138,  1137,  1131,     0,     0,
       0,     0,     0,  1132,   978,  1304,  1305,  1306,  1307,  1308,
    1309,  1310,  1311,  1312,  1313,  1314,  1315,  1316,  1317,  1318,
    1319,  1671,  1320,  1321,  1322,  1619,  1620,  1672,  1621,  1622,
    1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1623,  1624,
    1331,  1332,  1333,  1334,  1335,  1336,  1625,  1673,  1337,  1338,
    1339,  1340,  1341,  1342,  1674,  1343,  1344,  1345,  1346,  1347,
    1348,  1349,  1350,  1351,  1675,  1352,  1353,  1354,  1676,  1355,
    1356,  1357,  1358,  1359,  1360,  1361,  1626,  1627,  1362,  1363,
    1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,
    1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,  1383,
    1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1628,
    1393,  1394,  1395,  1396,  1629,  1397,  1398,  1399,  1630,  1400,
    1401,  1402,  1677,  1678,  1403,  1404,  1405,  1679,  1406,  1407,
    1631,  1632,  1408,  1409,  1410,  1411,  1412,  1413,  1414,  1415,
    1680,  1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,  1424,
    1425,  1426,  1681,  1633,  1427,  1428,  1429,  1430,  1431,  1634,
    1635,  1636,  1432,  1682,  1683,  1433,  1684,  1434,  1435,  1436,
    1437,  1438,  1439,  1685,  1440,  1686,  1441,  1442,  1443,  1444,
    1445,  1446,  1447,  1448,  1637,  1449,  1450,  1451,  1452,  1453,
    1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,  1463,
    1464,  1465,  1466,  1638,  1688,  1639,  1467,  1468,  1469,  1470,
    1640,  1471,  1472,  1689,  1473,  1641,  1474,  1642,  1475,  1476,
    1477,  1478,  1479,  1480,  1481,  1482,  1483,  1643,  1690,  1484,
    1691,  1644,  1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,
    1493,  1494,  1495,  1496,  1645,  1497,  1498,  1646,  1499,  1500,
    1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,
    1511,  1512,  1647,  1513,  1514,  1515,  1516,  1517,  1518,  1519,
    1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,
    1530,  1531,  1532,  1692,  1533,  1534,  1535,  1648,  1536,  1537,
    1538,  1539,  1540,  1541,  1542,  1543,  1544,  1545,  1546,  1547,
    1548,  1549,  1550,  1551,  1552,  1649,  1553,  1554,  1555,  1556,
    1693,  1557,  1558,  1650,  1559,  1560,  1561,  1562,  1563,  1564,
    1565,  1566,  1567,  1568,  1569,  1570,  1571,  1651,  1572,  1652,
    1573,  1574,  1575,  1576,  1695,  1577,  1578,  1579,  1580,  1581,
    1653,  1654,  1582,  1583,  1655,  1584,  1656,  1585,  1586,  1657,
    1587,  1588,  1589,  1590,  1591,  1592,  1593,  1594,  1595,  1596,
    1597,  1598,  1599,  1600,  1601,  1658,  1659,  1602,  1696,  1603,
    1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1612,  1613,
    1614,  1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,  1668,
    1669,  1670,  1615,  1616,  1617,  1618,   288,     0,     0,   960,
     979,   980,   988,  1134,  1103,   310,     0,   280,     0,     0,
     281,     0,     0,     0,   166,   165,     0,  1069,   171,     0,
       0,     0,   978,   286,  1637,  1499,  1651,   284,   958,   979,
       0,   255,   256,     0,   264,     0,   249,   253,   250,     0,
     274,   266,   275,   267,   248,   268,   257,   247,     0,   276,
       0,   251,     0,     0,     0,  1135,   297,   172,   310,     0,
    1232,  1233,  1231,  1235,  1234,  1222,  1227,     0,   337,     0,
       0,   977,  1143,  1144,  1141,  1140,   175,  1217,  1300,  1653,
    1582,  1299,   348,  1301,  1298,  1136,   404,   402,     0,   934,
    1406,  1443,  1540,  1551,  1653,     0,  1257,  1261,  1133,  1658,
       0,   341,   340,     0,   982,     0,   376,   540,   981,   954,
    1199,     0,  1204,     0,  1515,   380,   383,   997,   381,     0,
     372,     0,     1,   310,     0,     0,     0,   345,  1653,  1582,
     342,   339,   401,   401,     0,   401,     0,   364,   372,   367,
     371,     0,  1226,   178,  1414,     0,     0,  1414,     0,  1414,
       0,  1414,     0,     0,   926,     0,   927,   961,  1219,  1220,
    1218,  1221,     0,   139,   170,   169,   168,   167,   172,     0,
    1414,  1023,   992,     0,     0,     0,     0,     0,     0,  1064,
     287,   285,   262,   263,     0,   254,   252,     0,   989,  1697,
     592,  1698,   621,   599,   621,   621,  1699,  1700,  1701,  1702,
     588,   588,  1379,   601,  1703,  1704,  1705,  1414,  1706,  1707,
     589,   590,   626,  1708,  1709,  1710,  1711,  1712,     0,     0,
    1713,   621,  1714,   588,  1715,  1716,   593,  1717,   562,     0,
    1718,   591,   563,  1719,   629,   629,  1720,   616,  1721,   273,
       0,   277,   574,   575,   576,   577,   602,   603,   578,   608,
     609,   613,   579,   661,   588,   990,   991,  1414,   273,   269,
    1414,   273,   956,  1414,     0,     0,   293,     0,  1224,  1236,
    1722,  1723,  1724,  1725,  1727,  1726,  1728,  1729,  1730,  1731,
    1732,  1733,  1734,  1735,  1736,  1739,  1737,  1738,  1740,  1741,
    1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,
    1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,
    1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,
    1772,  1773,  1250,     0,  1251,  1241,  1230,  1237,  1238,   310,
    1102,  1142,  1206,     0,     0,     0,     0,  1302,     0,     0,
       0,   963,   965,   966,   857,   976,   929,     0,  1620,  1621,
    1622,   919,     0,  1623,  1624,  1625,  1673,   791,   778,   787,
     792,   779,   781,   788,  1626,  1627,   729,  1628,  1629,   974,
    1630,  1631,  1632,  1634,  1635,  1636,   783,   785,  1638,  1639,
       0,   975,  1641,  1642,  1480,  1644,  1645,  1647,  1648,   789,
    1650,  1652,  1653,  1654,  1655,  1656,   973,  1657,   790,  1659,
       0,     0,     0,   945,   874,     0,     0,     0,   929,   762,
       0,     0,   582,   583,   604,   605,   584,   610,   611,   585,
       0,   939,   662,   807,   929,   774,   835,   705,     0,   760,
     754,   387,   935,     0,   755,   962,   929,   920,   387,   933,
    1260,  1258,  1264,  1259,     0,     0,     0,     0,     0,   542,
     541,   955,  1198,  1196,  1197,  1195,  1201,     0,  1194,  1203,
    1227,   871,     0,   920,   382,     0,     0,     0,     0,   362,
     361,     3,     0,     0,  1208,     0,   343,     0,   399,   400,
       0,     0,     0,     0,     0,     0,     0,     0,   488,   424,
     425,   427,   485,   489,   497,     0,   368,     0,   997,     0,
       0,  1019,  1019,     0,     0,     0,     0,     0,   233,   182,
     226,     0,     0,     0,     0,  1041,  1054,     0,     0,     0,
       0,     0,  1051,     0,     0,  1034,   184,  1028,  1030,     0,
    1019,     0,   180,     0,     0,     0,   186,   978,     0,  1671,
    1672,  1673,  1674,  1675,   792,     0,  1677,  1678,  1679,  1680,
    1681,  1682,  1683,  1684,  1685,  1686,  1637,  1688,  1689,  1690,
    1691,  1692,  1693,  1651,  1695,  1657,     0,  1696,     0,   766,
     877,   410,   875,   998,     0,   979,   985,   925,     0,   999,
    1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,  1809,  1810,
    1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,  1819,  1820,
    1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,  1830,
    1831,  1832,  1833,  1834,  1835,  1836,  1837,  1838,  1839,  1840,
    1841,  1842,  1843,  1844,  1845,  1846,  1847,  1848,  1849,  1850,
    1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,  1860,
    1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1869,  1870,
    1871,  1872,  1873,  1874,  1761,  1875,  1876,  1877,  1878,  1879,
     922,   959,  1001,  1000,  1002,   928,     0,     0,  1100,     0,
    1281,     0,  1020,     0,   993,     0,     0,  1414,   292,  1414,
     139,     0,   139,     0,     0,  1063,  1066,   265,   261,   259,
     258,   260,   620,   607,   615,   614,     0,   597,   596,   595,
       0,   594,     0,     0,   621,   621,   619,   598,   574,     0,
       0,     0,   625,     0,   623,   271,   272,     0,   245,     0,
     568,   564,     0,   634,   635,   636,   637,   644,   645,   642,
     643,   638,   639,   632,   633,   640,   641,   630,   631,     0,
     646,   647,   648,   649,   650,   651,   652,   653,   580,   586,
       0,     0,   240,     0,     0,   242,     0,     0,     0,     0,
     310,     0,  1035,  1246,  1247,  1245,     0,     0,  1055,  1240,
    1229,  1038,  1249,  1239,  1248,  1228,  1223,     0,  1205,  1091,
    1270,  1269,  1278,   176,     0,   880,     0,   310,  1303,   349,
       0,   758,   874,   918,     0,     0,     0,     0,     0,     0,
     764,   883,     0,     0,   685,     0,     0,     0,   898,     0,
     904,     0,     0,     0,   686,   666,   667,     0,   944,   951,
     873,     0,   762,   871,     0,   838,     0,   981,     0,   756,
     757,   763,     0,   969,     0,   661,   661,   938,   857,     0,
     854,   855,   856,     0,     0,     0,   932,     0,   865,   867,
       0,     0,   701,   863,     0,   704,     0,     0,     0,     0,
     851,   852,   853,   845,   846,   847,   848,   849,   850,   861,
     844,   682,     0,     0,   809,   761,     0,     0,   681,     0,
       0,     0,   504,     0,   967,   964,     0,   921,   504,  1272,
    1276,  1277,     0,  1271,  1275,  1263,  1262,  1267,  1265,  1268,
    1266,     0,  1192,     0,  1189,   501,     0,   384,     0,     0,
    1155,  1214,     0,   304,     0,  1209,     0,   344,   379,   378,
     411,   412,   418,   377,   466,   467,     0,     0,     0,     0,
     494,   492,   963,   976,   454,   428,   453,     0,     0,   432,
       0,   458,   662,   487,   366,   422,   423,   426,   365,     0,
     490,     0,   500,   488,   427,     0,   179,     0,     0,     0,
       0,     0,  1414,     0,     0,   217,   198,    91,     0,  1018,
       0,     0,     0,     0,     0,     0,     0,   225,   222,   223,
     224,     0,     0,     0,     0,  1039,  1040,  1053,     0,  1044,
    1045,  1042,  1046,  1047,     0,     0,  1032,  1033,     0,     0,
       0,     0,  1031,     0,     0,     0,     0,     0,     0,     0,
       0,   410,   410,   410,   772,     0,   408,   409,     0,     0,
     923,   926,  1090,   147,     0,   137,     0,     0,     0,     0,
       0,  1283,  1282,     0,     0,   172,  1024,  1026,  1027,  1022,
    1025,   994,     0,     0,     0,     0,   289,   291,     0,   136,
     110,     0,  1068,   282,     0,     0,  1414,  1065,   127,     0,
       0,     0,     0,   273,     0,   618,   617,   569,   565,     0,
       0,     0,     0,   278,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   273,   270,   273,   957,     0,   273,
     296,  1414,   139,     0,  1225,  1242,  1036,  1056,  1037,  1057,
    1097,  1123,     0,  1105,  1110,  1088,     0,  1088,     0,  1107,
    1111,  1088,  1106,  1088,  1101,     0,   177,     0,  1216,     0,
    1215,     0,   930,     0,     0,   917,   913,     0,     0,     0,
       0,     0,   884,   885,   886,   887,   888,   889,   890,   891,
     892,     0,     0,   893,     0,     0,     0,   843,   854,   855,
     856,   851,   852,   853,   845,   846,   847,   848,   849,   850,
     869,     0,     0,     0,     0,     0,     0,     0,     0,   731,
       0,     0,   754,   834,     0,   871,   903,     0,     0,     0,
       0,     0,     0,   871,   909,     0,     0,     0,   943,     0,
     940,   707,   929,     0,     0,   706,     0,     0,     0,   971,
     972,   663,   677,   678,   679,   683,  1004,  1003,   937,     0,
     931,     0,     0,   664,   687,   692,     0,   910,   725,     0,
     713,     0,   700,     0,   711,   715,   688,   703,     0,   684,
       0,   932,   866,   868,     0,   864,     0,   674,   675,   676,
     668,   669,   670,   671,   672,   673,   680,   842,   840,   841,
       0,     0,     0,   817,   708,     0,     0,   710,   709,  1406,
    1443,     0,   398,   398,   398,   386,   396,   936,     0,   554,
     410,   945,   554,     0,   661,   543,   997,  1202,  1191,  1190,
     872,   996,   310,     0,  1155,  1155,   554,     0,     0,  1212,
       0,     0,     0,   316,   299,     0,  1210,     0,   332,   504,
       0,   929,     0,   416,   417,     0,   421,  1648,  1536,     0,
       0,     0,     0,   459,   495,     0,   486,   456,   457,     0,
     455,   963,   460,   962,   461,   464,   465,   433,   496,   952,
     498,     0,   491,   370,   369,   502,     0,   183,     0,  1414,
     200,     0,     0,     0,     0,     0,     0,    45,    82,    45,
     238,  1414,   273,  1414,   273,  1308,  1380,  1552,   229,     0,
       0,   196,   115,  1012,     0,   100,   144,   219,   234,  1005,
       0,     0,   185,  1029,  1043,  1048,  1008,  1052,  1049,  1127,
    1050,  1019,     0,   181,     0,  1006,     0,  1125,     0,     0,
     187,  1010,  1129,   408,   408,   408,     0,   876,     0,     0,
       0,   878,   879,   925,     0,  1089,     0,   138,     0,  1099,
    1079,  1080,  1090,     0,     0,   139,     0,  1023,     0,   995,
    1254,     0,     0,     0,     0,   130,   128,   158,     0,   135,
     129,   137,     0,     0,    86,     0,  1075,     0,     0,   283,
     279,     0,     0,     0,   587,   600,   246,   574,     0,   628,
     627,   629,   629,   574,     0,   560,     0,   572,     0,   612,
     581,   654,   655,   656,   657,   658,   659,   660,   239,   241,
       0,   243,     0,     0,  1095,     0,  1094,  1098,  1093,  1092,
       0,  1087,     0,  1118,     0,     0,     0,     0,     0,     0,
    1279,   881,   403,   730,     0,     0,   914,     0,     0,   805,
       0,   780,   782,   795,     0,   784,   786,     0,   858,     0,
       0,     0,   796,   733,   734,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   749,   748,   797,   833,     0,     0,   901,   902,
     798,     0,     0,   908,     0,     0,     0,   803,     0,     0,
       0,     0,   950,   759,   872,   839,   837,   765,   661,     0,
       0,     0,     0,     0,     0,     0,   714,   702,     0,   712,
     716,     0,     0,     0,   696,     0,     0,   694,   726,   690,
       0,     0,   727,     0,     0,     0,   773,   398,   398,   398,
     398,   395,   397,     0,     0,     0,     0,     0,  1536,     0,
     526,   503,   505,   512,   526,   531,   775,   552,   776,   981,
       0,   469,   408,   951,   469,     0,  1273,  1193,     0,  1154,
     554,   554,  1155,  1149,     0,     0,     0,  1152,  1156,  1158,
    1159,  1172,  1173,  1174,  1175,  1213,     0,   321,   303,   323,
     322,     0,   330,     0,   929,     0,   321,   305,     0,   324,
       0,  1212,     0,   336,   413,     0,   859,   421,     0,   415,
     463,   462,     0,   431,   493,   429,     0,   499,     0,     0,
       0,    90,     0,     0,     0,    45,     0,     0,   154,     0,
     141,   218,     0,     0,     0,   192,   237,   210,   202,   188,
     216,     0,     0,   221,     0,   214,   231,   232,   230,    74,
      55,   235,     0,    87,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     410,   406,   407,   767,   924,  1121,  1122,  1120,  1034,   148,
       0,     0,   136,  1068,     0,  1021,     0,  1255,     0,  1253,
       0,   292,   139,     0,   114,   110,     0,   108,   107,   109,
       0,  1076,   297,     0,  1071,  1067,     0,     0,  1062,   606,
     571,     0,   624,   622,   570,     0,   566,   573,   273,     0,
       0,  1083,  1119,  1124,  1108,  1113,     0,  1117,  1115,  1114,
    1109,  1112,     0,   916,   912,     0,   777,   882,     0,   870,
     896,   895,   732,   744,   745,   746,   897,     0,     0,     0,
     741,   742,   743,   735,   736,   737,   738,   739,   740,   747,
     906,   905,   899,   900,     0,   800,   801,   802,   907,     0,
     942,   871,   947,     0,     0,   836,   970,   665,     0,     0,
     693,   911,   717,     0,     0,     0,   689,   858,     0,     0,
       0,     0,     0,   698,     0,     0,     0,   820,   815,   816,
       0,     0,     0,     0,   389,   388,   394,     0,   514,   526,
     531,     0,   372,     0,   512,     0,   525,   450,   524,     0,
       0,   537,   535,     0,   537,     0,   537,     0,   450,     0,
     527,   450,   524,     0,   544,   955,   553,     0,   484,     0,
     941,   484,     0,   385,  1149,  1149,     0,     0,     0,     0,
    1167,  1168,  1164,  1169,  1171,     0,     0,  1167,     0,  1157,
    1211,     0,  1207,     0,     0,     0,   311,   308,   298,     0,
       0,   333,   321,   312,     0,   414,   419,   420,   430,   953,
    1013,    45,     0,     0,   199,     0,   156,   102,   134,   117,
       0,     0,     0,    46,     0,   122,     0,   191,   211,     0,
     207,     0,   236,     0,     0,     0,     0,     0,   206,   194,
       0,   189,     0,   273,   273,   197,   101,   989,  1697,  1698,
    1699,  1700,  1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,
    1709,  1710,  1711,  1712,  1790,  1713,    52,  1714,  1480,  1715,
    1716,  1717,     0,  1718,   563,  1719,  1720,  1721,   845,   846,
     143,    47,   149,    49,    51,     0,    50,   990,    48,   146,
    1009,  1128,     0,  1007,     0,  1126,  1016,  1014,  1011,  1130,
     770,   771,   768,   408,  1102,  1082,     0,     0,     0,     0,
       0,  1286,  1414,     0,  1252,     0,  1068,   290,   136,     0,
     164,    86,   159,     0,  1075,  1073,     0,   357,     0,     0,
       0,   567,   561,   244,     0,  1096,     0,  1116,   915,   793,
     804,   894,     0,     0,     0,     0,   799,   794,   949,     0,
     946,   723,   721,   718,     0,   719,   697,     0,     0,   695,
     691,     0,   728,   806,     0,   822,   819,   393,   392,   391,
     390,   511,   509,     0,   515,   981,   522,   443,   449,   510,
       0,   506,     0,   536,   532,     0,   533,     0,     0,   534,
       0,   507,     0,   981,   508,     0,   551,     0,     0,   811,
     767,   811,  1274,     0,     0,  1153,     0,     0,  1164,     0,
    1166,  1170,  1163,     0,  1167,  1165,  1179,  1187,  1161,  1162,
     320,   300,     0,   301,   331,     0,     0,     0,     0,   325,
     358,     0,   152,   201,     0,   134,     0,    45,   119,   118,
     121,   116,   120,   123,     0,     0,     0,     0,     0,   103,
       0,     0,     0,    66,     0,     0,   134,     0,   140,    62,
      63,   173,     0,     0,     0,   203,   193,   190,   195,   204,
       0,     0,   205,   208,   559,   220,   213,  1790,  1797,     0,
       0,     0,     0,     0,     0,  1078,  1085,  1034,     0,     0,
     110,     0,     0,     0,     0,     0,     0,   136,  1256,     0,
       0,     0,  1075,     0,     0,    42,     0,    83,     0,   294,
    1074,     0,   350,     0,  1060,  1061,     0,     0,  1084,   750,
       0,     0,     0,   948,   720,   724,   722,   699,   808,     0,
     410,   547,     0,   550,   513,     0,     0,   438,   445,     0,
     448,   442,     0,   516,     0,     0,   518,   520,     0,     0,
       0,   555,     0,     0,     0,   958,  1353,  1631,  1535,     0,
     468,   470,   473,   475,   474,   476,   472,   483,     0,   441,
     968,   441,     0,     0,  1150,     0,  1147,     0,  1183,     0,
       0,     0,  1160,     0,     0,     0,   334,     0,   327,   327,
       0,   313,   860,     0,    45,     0,   133,   153,    81,     0,
       0,    64,     0,    71,     0,   105,   106,   104,    65,   134,
     139,    67,     0,   174,     0,   212,     0,   228,     0,     0,
     145,  1017,  1015,   769,  1102,     0,  1068,    86,   357,     0,
       0,  1289,  1284,  1285,     0,  1287,     0,     0,   110,   297,
    1072,    99,    92,    93,    94,    95,    96,    97,    98,   113,
     112,    84,    85,     0,     0,     0,  1062,     0,   751,     0,
     752,     0,   825,   552,     0,     0,   546,     0,   436,   434,
     437,   439,   435,     0,     0,   523,   539,     0,   519,   517,
     528,     0,   559,     0,   530,     0,     0,     0,   477,     0,
     810,   812,     0,     0,   374,   373,  1146,  1145,  1148,     0,
       0,     0,     0,     0,     0,  1176,  1184,     0,   307,     0,
     554,     0,     0,   329,   329,   315,     0,   139,   155,     0,
     125,   132,   124,     0,     0,    61,     0,    68,   163,    70,
      54,   558,     0,   215,     0,   150,  1077,  1081,     0,    44,
     351,     0,  1293,  1294,  1291,     0,     0,     0,     0,   357,
      86,  1075,     0,   354,     0,     0,  1068,   753,   821,     0,
       0,     0,   545,   548,     0,   521,     0,     0,     0,   556,
     557,   529,     0,     0,     0,   471,     0,     0,   443,  1151,
       0,     0,  1180,     0,     0,  1177,  1185,   302,   327,   306,
     335,   326,   418,   328,   418,     0,   163,   111,     0,     0,
      89,    54,     0,    80,     0,   209,   227,   151,     0,  1290,
    1288,  1292,     0,   136,   352,    43,   295,   355,   356,     0,
     554,  1619,  1354,  1589,     0,   823,   826,   824,   818,     0,
     446,     0,   452,   538,   479,     0,   478,   813,   814,   440,
       0,  1181,  1188,     0,   329,   421,   421,   554,    80,   126,
     131,     0,    69,    72,   160,   161,   162,     0,    76,    73,
      77,     0,   357,     0,     0,  1295,     0,  1058,     0,   830,
     829,   828,   832,   831,   549,     0,     0,   444,   480,     0,
       0,   418,   318,   317,   314,    45,    88,     0,     0,     0,
      78,     0,    79,    53,   353,     0,  1280,     0,  1068,     0,
     447,     0,     0,  1178,  1186,   421,   157,    58,     0,    57,
       0,   142,    75,     0,  1296,   554,   827,     0,  1182,   319,
      56,    60,    59,     0,  1059,   451,     0,     0,     0,     0,
       0,     0,  1297
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2723, -2723, -2723,  1980, -1135, -1807, -2496,  -414, -2723,  -500,
   -2723,  -212, -1781,  -469,  -455, -2723, -2396,  -923, -2723,  1612,
    -110, -2723,   774, -2723, -2158, -2723, -2723,   760, -2723,  -946,
   -2723, -2723, -1861,   373,  -396, -2333, -2154,   715,  -651, -2723,
    -451,   425, -1758, -2723,   789, -2723,  -383, -2723,  -486, -2208,
   -2723,  1231, -2723, -2723, -2723,   449, -2723,  1155, -2723,   437,
    -534,   795, -2723, -2723, -2723, -2723,  1393,  -638, -2723,  1444,
   -2723, -2723, -2723, -2723, -2723, -1128,   406, -2723, -2140,    36,
   -2723, -2723, -2723, -2723,   233,   499, -2723,  -280, -1872,    10,
   -2723, -2521, -2220, -2723,  -362, -2522, -1716, -2723, -2723, -2723,
     325, -1111, -2590,    37,    20,   592,   -29,    30,    38,    19,
      64,  1689,  1719, -2723, -1021,   807, -2723, -2723, -1789,  -621,
     -50, -2723,   854, -2227, -2085,  -456,  1208,  1673,  1677,  -230,
    -126, -2723,  -331, -2723, -1069, -2723, -2723,   852,  1248, -1290,
   -1276, -2723,   558,  -318,  -232, -2723, -2723, -2723, -2723, -2723,
     289,  -442,  1225, -2723,  1690, -2723, -2723, -2723, -2723, -1250,
     893, -1988,   585, -1884, -1850,   327,   310,  -928,   -81,    27,
     593,  -192, -2723, -2723,  -190, -1709, -2419,  -206,  -204, -2723,
   -2723,  -394, -1119,  -696, -2723, -2723,   680,  -452, -2723, -2723,
   -2723,  -297,  1381, -2723, -2723,  2065,  2129, -2723,  -559,  2133,
    -480,  -676,  1399, -1064,  1400, -1059,  -975,  -829,  1401,  1402,
   -1245,  2926,   470,  -681,    24, -2723, -2423, -1602, -2723, -2723,
      83, -2723,  -291, -2723,  -287, -2723, -2723, -2723,  -268, -2722,
   -2723,  1336,  1020, -2723, -2723, -1265, -2723,  4011,   911, -2723,
   -1627,  -506,  1425,  -708, -1000, -1147, -2723, -2723, -2723, -2723,
   -2723, -2723, -1197, -1823,  -479,   985, -2723, -2723,  1101, -2723,
   -2723,  1715,  -558,  1200,  -560,  -839,   987, -2723,  -573, -1349,
   -2723,   952, -1935, -2723,   619, -2723,   -47,  -540,   300,  -970,
      48, -2723,  3562,   208,    -6,  -863, -2126, -2723, -2723,  -502,
   -2241,  -915, -2723,  -603, -2723, -2723,  -927, -2723,   816, -2723,
   -2723,  -637,  -968,  -805, -1004, -2723,   272, -1110, -2723,  -141,
   -2723, -2723, -2160, -2723,    98, -2412, -1194, -2723, -2723, -2723,
   -2723, -2723,  -802,   822, -2317, -2723,   756, -2723, -2723, -2723,
   -2723,   185,   507, -2723, -2723, -2723,   828, -2723,    82,   642,
    -475, -2723,   141,   617,   344, -2010,   114, -2723, -2723, -2723,
   -1842, -2151, -2723,   345, -2723, -2723, -2723, -2723, -2723, -2723,
    1345, -2723, -2723, -2723, -2723, -2723,    39,  1780,   605, -2723,
   -2723, -2723, -1083, -2723,  -415, -2723,  -472,  -459, -2723, -2723,
      41,  -790,  1493, -2723, -2723, -2723, -2723, -2723,   615, -2723,
    1143, -2723,   975, -2723, -2723, -2723, -2723,    44, -2037,  -390,
   -2723, -2723,  -354, -2723, -2723, -2723,  1873, -2723, -2723, -2723,
    -537, -2723, -2125
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    37,    38,    39,    40,  2168,  2490,  3015,  2189,  3121,
    2668,  2669,  1848,  3068,  3069,  2170,  2241,  1470,  3062,  1915,
    2859,  1854,  1837,  2670,  1924,  2806,  2530,  1849,  2433,  1916,
    2654,  2929,  1547,  1917,  2930,  2647,  1918,  1513,  1540,  2435,
    3070,  1855,  1514,  2491,  1457,  1919,  3013,  1920,   509,  2673,
      41,    42,    43,  2177,  2178,  2179,  1850,   998,  2943,  1851,
     999,  1000,  2181,    44,   542,   543,   748,  1208,   544,   729,
      45,   510,  1174,    46,    47,    48,  1536,    49,   756,   550,
    1783,  1402,  2637,    51,  2132,  1788,  2136,  2796,  2402,  2131,
    2138,  2923,  3002,  2133,  1789,  2797,  1790,    52,    53,    54,
     585,    55,  2722,   551,   552,   899,    59,    60,    61,   593,
     605,   606,  1372,  1755,  2083,   970,   578,   579,  1890,   626,
    1507,  1410,  1411,  1796,  2149,  1437,  1438,   979,   980,  2748,
    2904,  2749,  2750,  2588,  2589,  3087,  1425,  1429,  1430,  1812,
    1802,  1416,  2378,  2770,  2771,  2772,  2773,  2774,  2775,   900,
    2609,  1433,  1434,   982,   983,   984,  1442,  1822,    63,  1759,
    2091,  2092,  2093,  2356,  2357,  2371,  2367,  2594,  2756,  2094,
    2095,  2741,  2742,  2876,  2374,  2101,  2760,  2761,  2827,  1564,
     730,  1275,  1211,   732,   901,   733,  1187,   902,  1191,   735,
     903,   904,   905,   738,   906,   907,   908,   741,  1183,   909,
     910,  1202,  1230,  1231,  1232,  1233,  1234,  1235,  1236,  1237,
    1238,   951,  1658,   912,   913,   914,  2097,   915,  1364,  1743,
    2779,  2900,  2901,  2076,  2338,  2575,  2740,  2971,  3035,  3036,
     916,   917,  1315,  1316,  1740,  1359,  1360,   918,  2493,  1362,
    1651,  1314,  1311,  1061,  1062,  1276,  1631,  1632,  1654,  2001,
    1661,  1667,  2028,  2029,  1675,  1708,   919,  1615,  1616,  1987,
    1284,   920,   646,  1068,   647,  1281,  1702,   928,   921,   922,
    1308,  1309,  2042,  2313,  1680,  1818,   597,  2752,   752,  1150,
     923,   924,   925,   926,   953,   599,  1063,   489,   744,  3003,
    1164,   957,  1064,  1852,  1698,    64,  1461,    65,  1162,  1529,
      66,  1537,  1488,  1270,  1018,  1478,  1261,    67,  2725,  2540,
    1176,  1549,  1928,   511,   553,  2244,  1171,    69,  1902,  2697,
    2260,  2698,  1972,  1896,  1268,  1967,  1591,  1517,  1269,   496,
    1604,  2261,  2218,  1592,    70,    71,    87,    72,   564,    73,
    2388,  2785,  1776,  1777,  2117,  2118,  2623,  2398,  2119,  2624,
    2620,  2621,  2395,  2396,  2120,  2121,  2122,  2123,  2124,    74,
     946,   602,   947,   950,    75,    76,   554,   965,  2127,  1779,
      78,   826,   652,    79,   633,  1262,   555,  1263,  1264,   813,
      80,  1271,   815,   816,    81,  2228,  2229,    82,   586,   587,
    1272,  1385,  1273,    83,  1523,  2844,  2520,  2521,  2703,  2841,
    2954,  3074,  3075,    84,   573,   574,   519,   491,   492,   746,
    1153,  1066,  1154
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     488,  1017,  1158,   751,   663,   518,   929,   611,   985,   518,
     627,  1260,   818,  1492,   563,   563,   566,   518,   572,    62,
      57,   572,  1757,  1198,   572,   598,  1265,  1526,   518,   518,
     486,  1650,  2171,  1318,  1527,    62,    50,    56,   941,    77,
     749,   635,  1151,   638,  1456,   642,  1554,  1491,   572,  1204,
     592,  1528,  1530,  2104,   487,  1583,  1503,   556,   596,  1320,
     743,   757,  2415,  2518,  2186,  1463,  2188,  2113,  2517,  2495,
    2498,  2139,  1467,  1446,   621,  1365,   758,  2531,  2167,  1558,
    1689,  1690,   598,   518,   598,   598,   598,  1375,   734,  1155,
     812,  2063,   629,  1496,  2207,  2208,  2209,   952,    68,   608,
     630,  2353,  2534,   565,  1016,  2312,  1022,  2399,  1026,  1252,
    1242,  -986,   835,  1245,   835, -1676,  1274,  1205,   640,  -983,
    -983,  -986,  2719, -1779, -1779,  1184,  1185,   494,  1762,  1384,
    -629,   835,  1205,  1205,  2390,  2715,   990,  -621,  1814,  -629,
    2390,   819,   991,   990,  -626,  2789,   731,   561,  -626,   991,
     561,   835,  1196,  2230,  1817, -1687,  2098, -1694, -1687,  1773,
    2743,   935, -1694, -1790, -1790, -1797, -1797,   614,  2913,  -961,
     978,  -360,  1159,  1985,  -987,  -987,  2098,  2990, -1676,  1758,
    1448,  -588,  -984,  -984,   981,  -601,  2764,  -616,   561,  -363,
     600,   561,  1329,  1531,  1610,  2830,  2651,  2695,   674,  1476,
   -1799, -1799,  1479,  1480,  2867,  2302,  1366,  1204,  1379,  1252,
     561,  2370,   942,  2798,   835,  2006,  2626,  2915,  2267,  2269,
     609,   622,  1335,  1774,  1700,  2995,  2391,  1624,   562,   562,
    -843,  1459,  1626, -1034,  3113,  1370,  2678,  -843, -1034,   743,
       3,     4,  1494,   736,  2368,  3097,  2628,  1178,  2950,  1248,
    2880,   992, -1086,  2635,  2690,  1337,   624,  2237,   992,   615,
    3064,  1329,  2925,   624,  2408,  -360,  1459,   734,  2842,  2878,
    1521, -1776, -1776,  2394,  1888,  2535,   558,  2199,  2924,   818,
    1745,  1451,  1820,  -363,  1184,  1185,   818,  2716,  2922,  1205,
     623,  1335,  1179,  2896,  2006,  2553,  1432,  2863,  2952,    26,
    2850,  2881,   974,  2798,  2717,  2427,  2864,  1475,  1793,  3078,
    1196,   517,  2804,  2379,   576,   546,  1627,    85,  2817,  2100,
    1501,  1380,  1329,   567,  1337,  2416,  1835,  1502,   603,  3131,
    1900,  2955,  1835,  2821,   607,   607,  2100,    31,  1199,  1321,
    2006,  1700,  2648,  1414,  2893,   743,  1329,  1266,  2713,   571,
    1737,   557,  1335,  2391,  1329,   591,  2689,  1738,  2426,  2391,
    1200,   644,    86,  -862,  2112,   645,  2709,  1377,   624,  3024,
    -862,  2591,  2279,   734,  2710,  2595,  1335,   976,    33,   620,
     943,  2140,   944,  1155,  1836,  1337,  2538,  3126,  1310,   636,
    2164,  2417,  1821,  1377,  2851,  3065,  1794,  2195,  2714,   818,
     818,  2384,  2385,  2969,  2423,  3080,  2425,   993,  2175,  1337,
    2196,  2953,   936,  1206,   993,  -481,  1398,  1337,   560,  2649,
     577,   559,   736,  1746,   702,  1287,  2956,   977,  1206,  1206,
     590,  2926,  1889,  2970,   834,  1453,  2450,  2006,  2882,  2536,
    1506,  2949,  2007,  2008,  2009,  1381,  2852,  2554,  2828,   653,
    1415,  2743,  2814,  1650,  1382,  2853,  1522,  2879,  2551,  2318,
     994,  -360,  1628,   668,   995,  1544,  2370,  1020,  2636,  1505,
    1180,   995,  2843,  2792,  1466,  3066,  1607,  3054,  2865,  -363,
    2818,  1445,  3104,   937,  2854,  2098,  2937,  2098,  2718,   612,
     598,   616,  1367,  3132,   996,  1614,   829,   661,  2798,  2581,
     662,  1021,   675,  1830,   598,  1887,  1951,  3076,  2547,   518,
    1814,   625,  1952,  3060,    62,   650,  2140,  2946,  2393,  2106,
     611,  1542,   601,   743,  1371,  2152,  -360,  2652,   736,  1443,
    2146,   648,   649,  1492,   651,  1394,   662,   518,   518,  2141,
    2640,  1775,  2837,  1444,  -363,  2215,  2216,  2394,   939,  3026,
    2790,   734,  1454,   563,   644,  3039,  2791,  3081,  1376,  2855,
    1151,   611,  1909,   997,  3025,  2495,  2498,    62,  1207,  3098,
     997,  2856,   927,   927,   572,   572,  2696,   572,  1495,   986,
    1181,  1901,   495,  1241,  1244,  1206,   988,   968,  1182,   598,
     814,    26,    58,  1701,  1199,  -843,  1953,  1955,   518,  2680,
    2681,  1256,  1257,  1199,  2753,  2399,  2798,  1887,    58,  2757,
     598,  -986,  2759,  2200,  2642, -1676,  1200,  1659,  1168,  1170,
    1172,  -986,    58,   629,  2733,  1200,  1947,   598,   610,    31,
    1201,   630,    62,    57,  2392,  1555,  1556,  -621,  -360,  1203,
    2618,   821,   948,   964,  -626,  2393,    58,  1324,  2011,    50,
      56,  2393,    77,  2653,   628, -1687,  -363, -1694, -1687,   598,
     598,   598, -1694,  2914,  1590,  1760,   945,   644,   954,  -961,
      33,   645,  2991,  1864,  -987,  -987,  2948,  -360, -1676,  -360,
    1551,  1186,  1358,  1867,    34,  1190,  1870,  -616,  1373,  2108,
    2960,  1763,  1303,   969,  2639,  -363,  1486,  -363,  2627,  2916,
    2744,  1256,  1257,  1576,  3004,  2021,   736,  2996,    35,  2961,
    2065,    68,   743,   743,   818,  1739,  3114,   644,  2012,  2233,
    1487,   645,   590,  1612,  2694, -1034, -1034,   743,  -862,  3117,
     974,  1697,  2084,  2085,  1650,  1803,  2287,  1003,   749,  1575,
     734,   734,  1954,  1956,  1957,  1579,  1353,  1354,  1355,  1356,
    1357,  1358,  1321,  2129,  2815,   734,  1004,  2098,  2699,  1194,
    1195,  2098,  1612,  1155,  1481,   820,  2857,   562,   822,  2858,
    2888,  1518,  2172,  1151,  1611,  3055,  1310,  3056,  1584,   631,
    1618,  2018,  2019,  2020,  2021,  1966,  2437,  2641,  2130,  1468,
     932,  1468,   812,  1664,  1666,  1974,  1674,  1586,   731,  1978,
    1968,  1979,   835,  2316,  2281,   976,  3030,  1612,  1005,  1355,
    1356,  1357,  1358,  1563,  1417,   671,  1687,  1612,  2250,  1155,
     613,  1318,  1486,  1279,  2254,  2016,  2017,  2018,  2019,  2020,
    2021,  2816,  2303,    93,  3091,  1703,   493,  1863,    62,  1199,
    2807,   632,   545,  2043,   754,  1519,  1487,   658,  1468,   743,
     990,  2107,   990,   575,  1417,  2671,   991,   588,   991,  1492,
    1418,  1200,  2438,  1856,  3115,  2429,   611,  1588,  1328,  2710,
    2910,  1329,   835,   547,   643,  1201,  2911,   734,  2288,  2672,
    1883,  1884,  1885,  2495,  2498,  1780,  2210,  2173,  2289,   834,
    1317,  1391,  2006,  1520,   664,   736,   736,  2007,  2008,  2009,
    1418,  1335,  2150,  1006,   607, -1774, -1774,   835, -1801,  1482,
     736,    88,  1490,  1827,  2325,  1936,  1403,  1483,  2013,  2014,
    2015,   659,  2016,  2017,  2018,  2019,  2020,  2021,  1468,  1151,
    2146,   665,   598,   669,  1337,  1691,  1958,   672,  1959,  2829,
    1862,  1961,  1447,  3118,  2201,  2439,  1532,   673,  3125,   518,
     518,   676,  2143,  1007,  2430,  1474,   598,   598,  1405,  1873,
    1250,  1008,  1419,  1251,  1880,   992,   677,   992,   666,  1497,
    3092,  3093,  1420,  1009,  1659,  1659,  1498,   664,   743,  1659,
     823,  2098,  1865,   598,  1458,  2944,  1469,  1868,  1469,   964,
    2098,   824,  1532,  1199,   561,  2098,   598,  2928,  2098,  2238,
    1408,  1409,   755,  1413,  2245,  1010,   734,  2052,   630,   630,
     825,   630,  1420,   598,   665,  1200,   667,   598,   498,  2431,
    1659,  1659,  2432,   827,  1259,  3119,     3,     4,  2932,  1203,
    3129,  1259,   736,  1421,  2098,  2746,  3105, -1801,  1392,  1908,
    2747,  1393,   498,   993,  1933,  1469,  1493,  1709,  1466,  1500,
    1466,  2226,  3120,   818,  1012, -1801,  2340,  2341,  2342,  2343,
   -1801,  1815,  1816,  1395,  1838,  2544,  1396, -1070,   818, -1775,
   -1775,   990,  1781,  1421,  1710,    89,  1013,   991, -1777, -1777,
     499,  2010,   990,    90,  1637,   743,  3133,    58,   991,   547,
    1526,   828,  1638,  1639,  1640,  1459, -1801,  1527,  1015,   667,
    2174,  3139,  2175,  2011,   499,   990,  1460,  1466,   654,  1323,
     655,   991,  1975,   734,  1528,  1530,   829,  1976,  1326,  1534,
      91,   993,  2114,   993,  2098,  1469,   830,  2115,  1468,   743,
    2176,  1374,   656,   934,   657,  2116,  1459,  2039,   940,  2102,
      58,   610,  1383,    26,  1259,  1259,   644,  1462,  -961,  1650,
     645,  1515,  1346,    26,  1468,   949,  2098,   734,  1721,   501,
     598,   736,   955,  1674,  2033,  1674,  1674,   956,    92,  1977,
    1548,  1945,  2449,  2012,  1024,  2262,  1826,  2564,   995,  2360,
     995,    31,   610, -1778, -1778,   628,   992,  1466,   958,  1711,
    2032,    31,  2034,  2035,  1712,   930,   931,   992,   933,  1713,
    2053,   962,  1582,  1565,  2183,    58,  2185,  2441,  1025,   959,
     996,  2999,  2361,  1580,   963,  1981,  1396,  2424,  1606,   960,
     992,  1607,    33,  1608,  1771,   974,  1609,  1244,  1825,   966,
     975,  1396,    33,   967,   662,   662,    34,   518,   518,   972,
     518,   662,  1468,   598,  2055,  1156,    34, -1801,  2362,  2198,
    2514,  2440,   989,  2448,  2223,   607,   504,  2361,   505,  1897,
      35,  1684,  1898,  1685,  2597,  2252,  2253,  2784,   736,    62,
      35,  2056,  2098,  2364,  1782,  2202,   987,   997,  1929,   997,
     504,  1607,   505,   508,   590,  1001,  1934,  1722,  3116,  1396,
    1652,  1937,   814,  2362,  1609,  2406,    62,   650,  1160,  2601,
     976,  1678,  2604,  1943,   507,  1723,  1944,   508,  1969,  2363,
    1724,  1970,   736,   648,   649,  1002,   651,  1982,  2364,  2098,
    1396,  3077,  1922,  1756,  1923,  1469,  1659,  1659,  1659,  1659,
    1019,   662,  1659,  1659,  1659,  1659,  1659,  1659,  1659,  1659,
    1659,  1659,   993,  1023,  1714,  1766,  1725,  1769,  3094, -1801,
     977,  1469,  2365,   993,  1157,  1715,  1353,  1354,  1355,  1356,
    1357,  1358,  1925,  2206,   598,   927,  1163,  1590,  2145,    26,
    2077,  1188,  2078,  2013,  2014,  2015,   993,  2016,  2017,  2018,
    2019,  2020,  2021,  2711,  1659,  1659,   598,  1466,   598,  1989,
    2496,  2057,  1396,  1197,  1819,  1871,  2058,  2366,  1786,   995,
    1791,  2025,  1221,  1222,  1396,  1161,  1878,    31,  2732,  2047,
     995,    58,  1396,  1466,  1165,  2191,  3134,  1166,  2192,  2079,
    -409,  2080,  1784,  1173,  1239,  -409,  2146,  2098,   818,  1872,
     971,  1175,   973,   995,   948,   598,  2596,  1177,  2599,  1469,
    1879,   743,  2366,  1458,   518,  1186,  2449,  2193,    33,  1290,
    2194,  1190,   548,  1182,   518,  1840,   518,  1844,  2258,   518,
    1192,  2249,    34,   996,  1396,   518,  1189,   518,  1193,   734,
    1209,  1328,  1904,  1905,  1329,  1210,  2643,  2310,   662,   518,
    1244, -1780, -1780,   662,   518,  1612,    35,  1312,   518,   518,
     518,   518,  2586,   518,   518,  -409,  1212,  1726,   997,  1633,
     549,  1466, -1781, -1781,  1335,  1240,  2586,  2321,   743,   997,
    1396, -1801,  1243,   598,   598,  1225,  1226,  2404,  1907,  2409,
    2405,  2360,  2410, -1782, -1782,  1246,   743,  1838,  2428,  1247,
    2308,  1898,   997,  1921,  1249,  1188,   734,  1337,  1267,  2375,
    2526,  2059,  1277,  1898,  1577,  -409,  1578, -1783, -1783,  1215,
    1216,   743,  2060,  1197,   734,  1278,  2545,  1280,   743,  2546,
    2989,  1926,   628,   628,  2558,   628,  -592,  2559,  1641,  1642,
    1643,  1282,  1644,  1645,  1646,  1647,  1648,  1649,  2632,   734,
    -599,   743,  1285,    26,  2869,  1612,   734, -1578,  1286,  2513,
    1764,  1856,  2565,  2499,  2275,  1609,  1287,  2644,  1288,  2361,
    1898,   622,  2645,  2704,    26,  1898,  2705,  -589,  2734,   734,
    2062,  1609,  2282,  2808,  -410,  -590,  2809,  1221,  1222,  -410,
    2543,    31,  2836,  2870,   736,  1898,  1609,  1003,   611,  2873,
    2885,  2890,  2874,  1244,  2891,  2362,  2676,  2304,  2894,  1289,
   -1801,  2891,    31,   590,  2309,  2908,  1004,  2920,  2909,    26,
    2921,  2363,  2966,  1307,  2967,  2921,   834,  1609, -1801,  2006,
    2364,  1291,    33, -1801,  2007,  2008,  2009, -1784, -1784,  2655,
     623,   518,  2975, -1785, -1785,  1244,    34,   611,  1317,  2981,
    -481, -1578,  2891,    33,  -593,  3007,  -482,    31,  3008,  -410,
    3019,   736,  3040,  1244,  2365,  3041,  1292,    34,  1005, -1801,
      35,  -591,  3043,  3044,  2081,  1244,  1396,  3046,  3084,   736,
    1396,  2891,  1652,  2655,   590,   743,  2754,  2658,  1293,  2656,
    3088,    35,  3106,  2899,  3108,  3107,  1295,  2921,    33,  2834,
    1225,  1226,  2657,  1296,   736,   590, -1578, -1786, -1786,  -410,
    1297,   736,    34,   734,  2146,   598, -1787, -1787,   624, -1578,
    1831,  1298,  2099,   611, -1578,  1346,  2262, -1788, -1788, -1578,
    1839,  2658,  1842,  2659,   736,  1853,    35, -1789, -1789,  1299,
   -1578,  1857,  2099,  1859, -1578,   743,  2134,  2660,  1300,  2137,
     590,  1791,  2096,  1301,  2366,  1866,  1198, -1791, -1791,  1302,
    1869,    62,   650,  1006,  1874,  1875,  1876,  1877,  1259,  1881,
    1882,  2492,  2096,   734,  1973, -1578,   487,  1303,   648,   649,
    1319,   651,  1322,  1259,  1363,  2685,  2686,  1155, -1792, -1792,
      26,  2660, -1793, -1793, -1578,  1369,   487,  1370,  2630,  1386,
    1515, -1794, -1794, -1795, -1795, -1796, -1796,   834, -1798, -1798,
    2006,  1371,    58,  1007,   743, -1801, -1801, -1801,  1612,  1399,
   -1801,  1008,  2661, -1800, -1800,  1400,  2221,  1406,    31,  1508,
    1509,  2542,   975,  1009,  1407,  2231,  2232,  2234,   977,    58,
    2011,  1659,   734,  2755, -1578,  1439,  2934, -1578,  1441,   490,
    1464,  2663,  1465, -1578,  1466,  2248,  2496,  -459,  -459,  1223,
    1224,   625,  1515,  1225,  1226,  1010,  1472,   598,   736,    33,
    -463,  -463,  -462,  -462,  1471,  1515,   598,   598,   598,  2613,
    2614,  1388,  1390,    34,  1473,  2110,  2111,  -372,  1477,   518,
    2662,   737,  1484,  1485,  2664,  2663,   598,  1489,  1499,  1504,
    -372,  1511,  1707,  1516,  1512,  -372,  1524,    35,  2255,  1525,
    2012,  2665, -1578,  1532,  1012,  1533,  1535,  1538,  1539,  1541,
    1545,   590, -1801,  1550,   662,   835,  1557,  1559,   736,  1353,
    1354,  1355,  1356,  1357,  1358,  1560,  1013,  1566,  2664,  1570,
    1515,  1515,   743,  1567,  1571,  1572,  1573,  1659,  1605,  1614,
    1619,  1329,  1679,  1926,  1681,  2665,  -372,  1396,  1015,  1699,
    1683,  1686,  1706,  1652,    58,  1718,  1717,  1720,  1741,  2082,
     734,  1742,   743,  1758,  1765,  -372,  1772,  1778,  1785,   818,
     623,   611,  1804,  1792,  1805,  1807,  1806,  1808,  1809,  1828,
    1832,  1833,  1834,  2335,   624,  1895, -1578,   736,  1899,  1903,
     734,  1906,  1910,  1911, -1578,  1912,  2344,  2345,  2346,  1913,
    1927,  2666,   611,  1932,  1931,  1935,  1938,  1939,  2667,  1659,
    1940, -1578,  1960, -1578, -1578,  -372,  1941,  2190,  2684,  1962,
     611,  1942,  1949,  1950,  -372,  1963,  1971,  1492,  1983,  2339,
    1994,  1991,  1992,  1993,  2049,   743,  1995,   598,   598,   598,
    2054,   488,  1996,  2099,  2358,  2666,  1998,  2061,  2358,  2372,
   -1578,  1999,  2667, -1578, -1578, -1578,  2002,  3103,  2024,  2070,
     737,  2030,  2037,   734,  2217,  2071,  2075,  2100,  2073,  2419,
    2109,  2096,  1773,  2096,  2074,  2126,  2128,  2135,  2227,  2872,
    2142,  2012,  2148,  -464,  -465,  2003,  2004,  2153,  2154,  2156,
    2023,  2157,  2158,    58,  1791,   487,  2160,   487,  2163,  2162,
    2013,  2014,  2015,  1593,  2016,  2017,  2018,  2019,  2020,  2021,
     598,  2166,   518,  2169,  2811,   736,  1515,  1458,  1515,  2182,
    1548,  2184,  2197,  2213,  2203,  2204,  2205,  2235,  2214,  2938,
    2211,  2050,  2051,  1259,  2212,  2222,   518,  2519,  2454,  2523,
    2264,  2239,  2265,  2224,  2236,   736,  2270,  2271,  2243,  1594,
    2240,   518,   518,   518,   518,   518,   518,   518,   518,   518,
     518,  2246,  2931,  2247,  2496,  2877,   737,  -372,  2256,  2259,
    2257,   743,  1582,  2266,  2274,  1595,  1458,  2027,   598,  2006,
     598,  2026,  2323,  2877,  2305,  2242,  2306,  2336,  2307,  2327,
    1458,  2324,  2347,  2082,  2351,  2377,  1596,  2387,  2359,   734,
    1597,  1548,  2373,  2382,  2383,  2389,  2397,  2403,  2407,  1312,
    2401,   743,  2414,   598,  2418,  2422,  2436,  2434,   736,  2525,
    1515,  1598,  2452,  2510,  1599,  2511,  2537,  2512,  2529,  2516,
    2528,   644,  2524,  2533,   959,   645,  3006,  2539,  2549,   734,
    2541,  1600,   743,  2552,  1898,   743,  2555,   609,  2587,  2556,
    2593,  2557,  2573,  2577,  2578,  2579,  2580,  2492,  1312,  2951,
    2592,  2600,  2583,  2606,  2584,  2590,  2607,  2605,  2560,  2608,
     734,  2622,  2616,   734,  2610,  2625,  1707,  2617,  2629,  2646,
    2638, -1801, -1801, -1801,  2941,  2016,  2017,  2018,  2019,  2020,
    2021,  2576,  2072,  2650,   598,   598,   598,   598,  2674,  2675,
    2679,  -983, -1774,  2358,  2372,  2692,  2358,  2978, -1775,  2585,
    2090, -1776,  2691,  2099, -1777, -1778, -1779,  2099, -1780,  2693,
   -1781, -1782, -1783,  2603,    58,  2968,  2701, -1784,  2892, -1785,
    2090,  2892, -1786,  1601,   610,  2702, -1787,  3071, -1788, -1789,
    2706,  1602, -1791,  2096,   737, -1792, -1793,  2096,  2700,  2982,
   -1794,  2984,  2707,  2720,   736,   927, -1795, -1796,  1003,  2134,
    2723, -1797,  2721,  2494,  1791,  2931, -1798,   487,  1652, -1799,
   -1800,   487,  -984,   745,  2726,  2727,  1458,  1004,  2730,  2758,
    3001,  2731,   817,  2631,  2633,  1603,  2739,  2778,  2217,  2745,
    2763,  2788,  2782,  2783,   736,   834,  2794,  2800,  2006,  2803,
    2819,  2683,  2805,  2007,  2008,  2009,  2802,  2810,  2822,  2823,
    2824,   490,   490,  2825,  2826,  2833,  2839,  2835,  2420,  2846,
    2319,  2840,  2847,  2848,  2871,   736,  2861,  2862,   736,  1005,
    2875,  2883,  2884,  2887,  2895,  2903,   490,  2283,  2284,  2285,
    2286,  2897,  2453,  2290,  2291,  2292,  2293,  2294,  2295,  2296,
    2297,  2298,  2299,  2917,  2899,  2922,  2936,  2500,  2501,  2502,
    2503,  2504,  2505,  2506,  2507,  2508,  2509,  2940,  2942,  2957,
    1515,  2945,  2962,  2963,  2964,  2974,  1065,   490,  1152,  2983,
    2986,  2987,  1921,  2988,  2992,  2993,  2994,  3005,  3009,   743,
    2818,  3011,  3012,  2724,  3017,  2329,  2330,  3014,  2444,  3018,
    3021,  3022,  3023,  3029,  3027,  3038,  3028,  3050,  3042,  2712,
    3051,  2337,  3053,  3052,  3067,    58,  3085,   734,  3061,  3079,
    3086,  3089,  3090,  3096,  1006,  3099,  3101,  3109,  3112,  3110,
    2786,  3111,  3097,   737,   737,  3098,  3123,   488,  2358,  3127,
    3128,  2751,  3130,  3138,   518,  3135,  2099,  3136,   737,  3140,
    2612,  2099,   745,   961,  2099,  2956,  2762,  3063,  3122,  2765,
    2935,  3102,  1455,  3095,  2860,   739,  2187,  2096,  2165,  2532,
     927,   598,  3059,  2219,  1007,  2492,  2096,  3100,  2820,  2456,
    2161,  2096,  1008,  3058,  2096,  1768,  2451,  1858,   490,  2455,
    2799,   487,  1312,  1574,  1009,  2180,  1553,  2527,  2634,  2411,
     487,  3000,  2793,  3057,  1397,   487,  2144,  1378,   487,  2011,
     662,   518,  1824,  1436,  2977,  2905,  1435,  3049,  2519,   598,
    2096,  2155,  2381,  1312,  1801,  3045,  1010,  2985,  1823,   740,
    2611,  2125,  1440,   742,  2354,  2598,  2866,  2582,  2889,  2349,
    2350,  2352,  2973,  2972,   487,  2979,   518,   518,  2980,   817,
    1623,  1625,  1629,  1630,  2781,  3047,   817,  1065,   745,   598,
    3048,  1458,  3037,  1747,  2045,   518,  2147,  1613,  2066,  2068,
     737,  1894,   736,  2103,   490,  1012,  1986,   598,  2682,  2012,
    2799,  2838,  2380,  2225,  2220,  2965,  2263,  2515,  2348,  2386,
    2615,  2728,  2787,  2708,  2619,  2906,  2907,  1013,  1767,   518,
     611,   497,  1401,   490,  1585,   498,  2412,  2712,  1980,  2845,
    2096,  3142,  2099,  3124,  1259,     0,  2927,  2765,     0,  1015,
       0,     0,     0,   490,   490,   490,     0,   490,   490,     0,
   -1070,     0,  2902,     0,   487,     0,   598,   598,     0,     0,
       0,     0,  2096,  2912,   739,     0,     0,     0,   518,     0,
       0,   490,     0,     0,     0,     0,     0,   598,     0,  2958,
       0,     0,     0,     0,     0,     0,   487,   499,     0,   817,
     817,     0,     0,     0,   500,     0,   518,     0,  2780,     0,
     662,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   518,     0,     0,     0,     0,    58,   737,
     598,     0,     0,     0,     0,   490,     0,     0,   740,   490,
     490,     0,   742,     0,     0,     0,     0,     0,     0,     0,
     490,     0,   501,     0,     0,     0,     0,  2959,   488,     0,
       0,     0,     0,     0,     0,     0,   745,  2976,     0,     0,
       0,   518,     0,     0,     0,  2762,     0,     0,     0,     0,
     739,     0,     0,     0,     0,     0,     0,   502,  2096,  2494,
       0,  1065,     0,   927,     0,     0,     0,     0,  1065,     0,
       0,     0,     0,     0,     0,  2799,   662,   662,   662,  2013,
    2014,  2015,   487,  2016,  2017,  2018,  2019,  2020,  2021,  1065,
       0,     0,     0,     0,   503,     0,     0,  2997,     0,     0,
       0,     0,     0,     0,     0,  2096,   737,     0,     0,  3020,
       0,  2090,     0,     0,   740,  2090,     0,  2812,   742,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2762,   487,
       0,     0,     0,     0,     0,  3073,     0,     0,     0,     0,
    2902,     0,  2751,   504,     0,   505,     0,     0,     0,     0,
     737,     0,  2831,  2832,     0,    58,    58,     0,     0,  1791,
       0,   506,     0,     0,     0,     0,     0,   507,     0,     0,
     508,  2849,     0,  1662,     0,     0,   598,  1458,     0,     0,
       0,     0,  2729,  2799,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1213,  1214,     0,  1152,     0,  3072,     0,
       0,     0,     0,  2947,     0,     0,  1065,     0,   662,     0,
       0,     0,     0,  2096,     0,     0,     0,     0,     0,   490,
    3073,     0,     0,     0,     0,   745,   745,     0,   739,     0,
       0,     0,     0,     0,     0,     0,     0,   487,     0,     0,
     745,     0,     0,     0,     0,     0,     0,     0,     0,  3137,
       0,     0,     0,  3141,  2918,     0,     0,     0,     0,     0,
       0,   598,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1215,  1216,     0,     0,     0,     0,     0,
       0,    58,  2939,     0,   817,     0,     0,     0,  2813,     0,
     598,  1662,   740,     0,   598,     0,   742,     0,     0,     0,
    1152,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   490,     0,   490,     0,     0,   490,   490,
       0, -1580,     0,     0,     0,     0,     0,     0,   490,     0,
     490,   490,   490,   490,   490,   490,   490,  1217,  1218,  1219,
    1220,  1221,  1222,     0,  2090,  1223,  1224,     0,     0,  2090,
       0,     0,  2090,     0,     0,   490,     0,   490,     0,     0,
    2868,     0,   745,   490,   490,   490,   490,  1152,     0,     0,
       0,   490,   490,     0,     0,     0,   490,  2494,     0,     0,
     490,     0,     0,   490,   490,   490,   490,   490,   490,   490,
     490,   490,     0,     0,   490,     0,     0,     0,     0,   490,
       0,     0,   490,     0,   490,     0,  1065,     0,     0,  1152,
       0,     0,     0,     0,     0, -1580,     0,   739,   739,     0,
       0,     0,     0,  1328,     0,     0,  1329,     0,     0,   490,
       0,     0,   739,     0,     0,     0,     0,     0,     0,     0,
    1328,     0,     0,  1329,     0,     0,     0,     0,     0,   490,
       0,     0,     0,    58,  1225,  1226,  1335,     0,     0,     0,
     490,   490,   737, -1801,     0,     0,     0,     0,     0,     0,
   -1580,     0,     0,  1335,     0,     0,     0,     0,     0,    58,
   -1801,   740,   740, -1580,     0,   742,   742,     0, -1580,  1337,
       0,   745,     0, -1580,     0,     0,   740,  1152,     0,  1152,
     742,     0,     0,     0, -1580,     0,  1337,     0, -1580,     0,
    2090,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1312,     0,     0,   834,     0,     0,  2006,     0,   737,
    1662,  1662,  2007,  2008,  2009,  1662,     0,     0,  1065, -1580,
       0,   490,   490,     0,   490,     0,     0,   737,     0,  2567,
       0,     0,     0,     0,   739,     0,     0,     0, -1580,     0,
       0,     0,  2328,     0,     0,  1152,     0,     0,  1227,  1228,
       0,     0,   737,     0,     0,     0,  1662,  1662,   490,   737,
       0,     0,     0,   490,     0,     0,     0,     0,  1229,     0,
       0,     0, -1801,     0,     0,     0,     0,     0,   745,    58,
       0,     0,   737,     0,     0,     0,     0,     0, -1580, -1801,
   -1801, -1580,     0,     0,     0, -1801,     0, -1580,   740,     0,
       0,     0,   742,   817,     0,     0,     0, -1801,     0,     0,
       0,     0, -1801,     0,     0,     0,     0,     0,   817,     0,
    1065,     0,   745,     0,     0,     0,     0,   490,     0,     0,
       0, -1801,   490,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   834,   911,   911,  2006,     0, -1801,    58,
       0,  2007,  2008,  2009,     0,     0, -1580,  1328,     0,     0,
    1329,     0,     0,   739,     0, -1801, -1801, -1801,   490,   490,
     490,     0,     0,   490,     0,     0,     0,     0,     0,     0,
       0,     0,   490,   490,   490,   490,     0,  1346,     0,     0,
    1335,     0,   490,     0,     0,     0,   490,  1336,     0,   490,
       0,     0,     0,     0,  1346,     0,     0,     0,     0,  1060,
    1067,     0,     0,  2082,   490,   490,   737,     0,  2011,   490,
       0,     0,     0,  1337,     0,     0,     0,   740,     0,     0,
       0,   742,     0,   490,     0,     0,   490,     0,   490,     0,
   -1580,     0,     0,     0,     0,     0,     0,     0, -1580,     0,
      58,     0,     0,     0,     0,     0,     0,     0,     0,   490,
       0,     0,     0,     0,     0, -1580,     0, -1580, -1580,     0,
     739,   490,     0,     0,     0,     0,   737,     0,     0,     0,
       0,     0, -1801,     0,     0,     0,     0,     0,  2012,     0,
       0,   490,     0,     0,     0,     0,     0,     0,     0, -1801,
       0,     0,     0,   834, -1580,   490,  2006, -1580, -1580, -1580,
       0,  2007,  2008,  2009,   739,     0,     0,     0,     0,     0,
       0,     0,   490,   490,     0,     0,  1338,     0,  2568,     0,
       0,     0,     0,     0,   740,     0,     0,     0,   742,     0,
       0,   490,     0,     0,  1339,   737,     0,     0,     0,  1340,
       0,     0,     0,     0,     0,     0,     0, -1801,  1152,  1152,
    1152,     0,  1662,  1662,  1662,  1662,     0,     0,  1662,  1662,
    1662,  1662,  1662,  1662,  1662,  1662,  1662,  1662,   740,     0,
       0,     0,   742,     0, -1801,  1343,     0,     0,     0,     0,
    1060,  1353,  1354,  1355,  1356,  1357,  1358,     0,     0,  1065,
       0, -1801,     0,     0,     0,     0,     0,  1283,  1353,  1354,
    1355,  1356,  1357,  1358,     0,     0,     0,     0,     0,     0,
    1662,  1662,     0,     0,     0,     0,     0,  2012,     0,     0,
       0,     0,     0,     0,   745,     0,  1294,     0,     0,     0,
       0,  1346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1304,  1305,  1306,     0,
       0,  1313,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   737,     0,     0,     0,     0,   817,     0,
       0,     0,     0,  1152,  1368,     0,     0,     0,  2013,  2014,
    2015,     0,  2016,  2017,  2018,  2019,  2020,  2021,   490,     0,
       0,   745,     0,   737,     0,     0,     0,   490,     0,     0,
     490,     0,     0,   490,     0,     0,     0,  2011,     0,   745,
     490,   490,   490,   490,     0,     0,   490,   490,   490,   490,
     490,   490,   490,   490,   490,   490,  1348,     0,  1412,   490,
     490,     0,  1426,  1431,   745,     0,     0,     0,     0,   490,
       0,   745,     0,   490,     0,     0,     0,     0,     0,     0,
       0,  1622,   490,   561,     0,   490,     0,   490,     0,     0,
       0,     0,     0,     0,   745,   490,   737,     0,   490,   490,
       0,     0,     0,   490,   490,     0,     0,  2012,     0,     0,
       0,     0,     0,     0,  1060,     0,     0,     0,     0,     0,
     490,  1060,   490,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   490,     0,     0,     0,     0,     0,     0,
       0,     0,  1060,     0,     0,     0,   739,  2013,  2014,  2015,
       0,  2016,  2017,  2018,  2019,  2020,  2021,     0,  1349,   490,
       0, -1801, -1801, -1801,     0,  1353,  1354,  1355,  1356,  1357,
    1358,     0,     0,     0,     0,   490,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1213,  1214,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     740,     0,     0,   739,   742,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1152,     0,  1152,  2497,  1152,
       0,   739,   737,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   739,     0,     0,  1060,
       0,     0,     0,   739,     0,     0,     0,     0,  1215,  1216,
       0,     0,   737,     0,     0,     0,     0,   740,     0,     0,
       0,   742,     0,     0,     0,     0,   739,     0,   745,     0,
       0,     0,     0,     0,     0,   740,     0,     0,     0,   742,
       0,     0,     0,   737,     0,   490,   737,  2013,  2014,  2015,
       0,  2016,  2017,  2018,  2019,  2020,  2021,     0,     0,     0,
     740,     0,     0,     0,   742,     0,     0,   740,     0,     0,
       0,   742,  1217,  1218,  1219,  1220,  1221,  1222,     0,     0,
    1223,  1224,     0,     0,     0,     0,     0,     0,     0,     0,
     740,   490,   490,     0,   742,     0,   490,   745,     0,     0,
       0,   490,     0,     0,   490,   490,     0,     0,     0,   490,
       0,  1617,     0,  1213,  1214,     0,     0,     0,     0,     0,
       0,  1636,     0,  1653,     0, -1594,  1665,  1668,  1673,  1676,
       0,     0,   490,     0,     0,     0,   490,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1688,     0,     0,     0,     0,     0,  1692,  1693,  1694,  1695,
     739,     0,     0,     0,  1704,  1705,     0,  1662,     0,  1716,
       0,     0,     0,  1719,   490,     0,  1727,  1728,  1729,  1730,
    1731,  1732,  1733,  1734,  1735,     0,     0,  1736,     0,  1225,
    1226,     0,  1744,  1215,  1216,  1748,     0,   911,     0,  1060,
       0,     0,     0,     0,     0,     0,     0,  1152,     0,     0,
       0,     0,     0,     0,     0,     0,   490,     0,     0, -1594,
     739,     0,  1770,     0,   740,   745,     0,     0,   742,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1305,  1306,  2497,     0,  1217,  1218,  1219,
    1220,  1221,  1222,     0,     0,  1223,  1224,     0,     0,     0,
       0,     0,     0,  1662, -1594,     0,     0,     0,  1258,     0,
       0,     0,     0,     0,   740,  1258,     0, -1594,   742,   739,
     737,     0, -1594,     0,     0,     0,     0, -1594,     0,     0,
       0,     0,     0,  1227,  1228,     0,     0,     0, -1594,     0,
       0,     0, -1594,     0,     0,     0,     0,     0,     0,   817,
       0,     0,     0,     0,     0,   490,     0,     0,   745,     0,
       0,  1060,   490,     0,  1891,  1892,     0,  1893,     0,     0,
     490,   490,     0, -1594,   490,  1662,     0,     0,     0,     0,
       0,     0,     0,   740,     0,     0,   490,   742,     0,     0,
       0,     0, -1594,     0,     0,   490,     0,     0,     0,     0,
     490,  1930,  1325,   490,  1225,  1226,     0,     0,     0,     0,
     490,   490,     0,     0,     0,     0,     0,     0,     0,   490,
       0,     0,     0,     0,     0,     0,  1258,     0,  1258,  1258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   490,
       0,   490, -1594,     0,     0, -1594,     0,   739,     0,     0,
       0, -1594,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   490,     0,  1060,     0,     0,     0,     0,     0,     0,
    1984,     0,     0,     0,     0,  1990,     0,   739,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2497,     0,  1258,     0,     0,  1258,
    1258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1594,   740,     0,  2005,     0,   742,     0,     0,  1227,  1228,
       0,     0,     0,     0,     0,  1673,     0,  1673,  1673,   490,
       0,     0,     0,   490,   745,  2041,     0,     0,     0,  2044,
       0,   740,  2046,     0,     0,   742,     0,     0,     0,     0,
     739,  1328,     0,     0,  1329,     0,     0,   490,     0,     0,
       0,   490,     0,     0,     0,   745,     0,  2082,   745,     0,
       0,     0,   490,     0,     0,     0,  2064,     0,     0,  2067,
       0,  2069,     0,     0,  1335,     0,     0,     0,     0,     0,
       0, -1801,     0,     0, -1594,     0,     0,     0,   490,     0,
       0,     0, -1594,     0,     0,     0,     0,     0,  1152,     0,
       0,     0,  1152,   490,   740,     0,     0,  1337,   742, -1594,
       0, -1594, -1594,     0,     0,     0,     0,     0,     0,     0,
       0,  1328,     0,     0,  1329,     0,     0,     0,     0,  1330,
    1331,  1332,     0,     0,     0,     0,     0,     0,  1412,     0,
       0,     0,     0,     0,     0,     0,  1333,     0, -1594,     0,
       0, -1594, -1594, -1594,  1335,  1431,  1734,     0,     0,     0,
       0,  1336,     0,     0,   490,  1328,     0,   490,  1329,     0,
       0,     0,  1552,     0,  2159,     0,   739,     0,     0,     0,
    2331,     0,     0,  1561,     0,  1562,     0,  1337,   490,     0,
     490,     0,   490,     0,  1568,     0,     0,     0,  1335,     0,
       0,     0,   490,     0,     0, -1801,     0,     0,     0,     0,
   -1801,  1569,  1328,     0,   490,  1329,   739,     0,     0,     0,
    1330,  1331,  1332,     0,     0,     0,     0,     0, -1801,     0,
       0,  1337,  1060, -1801,     0,   490,     0,  1333,  1587,  1589,
     740,     0,     0,     0,   742,  1335,     0,   739,     0,     0,
     739,     0,  1336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   490,   490,     0,     0,     0,     0,     0, -1801,
    1620,  1621,     0,     0,  1634,  1635,   490,     0,  1337,     0,
     740,     0,     0,     0,   742,     0,     0,     0,     0,     0,
    1338,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1152,  2497,     0,  2332,     0,     0,     0,  1339,     0,
       0,   740,     0,  1340,   740,   742,     0,     0,   742,     0,
       0,     0,   490,     0,   490,  1346,     0,     0,     0,     0,
       0,  2273,     0,     0, -1801,  1341,  1342,     0,     0,     0,
    2277,     0,  1361,  2278,     0,     0,  2280,     0,     0,  1343,
       0,     0, -1801,     0,     0,     0,     0, -1801,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2300,  2301,     0,     0,     0,     0,     0,     0,
       0,  1338,  1361,     0,     0,     0,  2311,     0,  1344,     0,
       0,  1345,     0, -1801,     0,  2317,     0,     0,  2320,  1339,
    2322,     0,   490,     0,  1340,  1346,     0,     0,  2326,  1813,
    1813,     0,     0,     0,     0,     0,  2333,  2334,     0,     0,
   -1801,     0,     0,     0,     0,     0,  1341,  1342,     0,     0,
       0,     0,     0,   -41,     0,     0,     0,     0,     0,     0,
    1343,     0,     0,     0,     0,     0,  2376,     0,     0,  1346,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
    1258,     0,     2,     0,     3,     4,     0,     0,     0,     0,
    1258,     0,  2400,  1258,     0,     0,     0,     0,     0,  1344,
       5,     0,  1345,     0,     0,     0,     0,     0,  2413,     6,
       0,  1361,     0,     0,   739,  1003,  1346,     0,  1361,  1347,
    1348,     0,     7,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     8,  1004,     0,     0,     0,     0,     0,
       0,     0, -1801,     0,     0,     9,     0,    10,     0,  1353,
    1354,  1355,  1356,  1357,  1358,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1801,    11,     0,     0,  1946,  1948,
       0,     0,     0,     0,     0,     0,     0,     0,   740,    12,
       0,     0,   742,     0,     0,     0,  1005,  2442,     0,     0,
       0,    13,  1258,     0,     0,  2443,     0,     0,    14,     0,
       0,     0,  1328,     0,     0,  1329,    15,  1258,    16,    17,
       0,  1348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    18,  1349,     0,     0,  1350,  1351,  1352,     0,  1353,
    1354,  1355,  1356,  1357,  1358,  1335,     0,     0,  2548,     0,
       0,     0, -1801,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    19,     0,     0,  2444,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1801,    20,  1337,     0,
       0,     0,     0,  1353,  1354,  1355,  1356,  1357,  1358,     0,
       0,  1006,     0,     0,  2561,  2562,     0,     0,     0,  2563,
       0,     0,    21,     0,  2566,     0,     0,  2569,  2570,     0,
       0,     0,  2574,     0,     0,     0,   990,     0,     0,     0,
       0,     0,   991,  1349,     0,     0,  1350,  1351,  1352,  1003,
    1353,  1354,  1355,  1356,  1357,  1358,     0,     0,     0,     0,
       0,  1007,     0,  1997,  1361,     0,     0,     0,  1004,  1008,
       0,  2571,     0,     0,     0,  1361,     0,     0,     0,  1660,
       0,  1009,     0,     0,  2445,  1361,  1361,  1361,     0,     0,
       0,     0,     0,     0,  1361,  2105,     0,   911,     0,     0,
      22, -1801,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1010,     0,     0,     0,     0,     0, -1801,
    1005,     0,     0,     0, -1801,     0,     0,     0,     0,     0,
       0,  2151,  2151,     0,    24,     0,     0,     0,     0,  2677,
       0,     0,     0,    25,     0,     0,     0,     0,     0,  1361,
       0,   992,     0,     0,     0,     0,     0,    26,     0,     0,
   -1801,     0,  1012,     0,    27,     0,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,  1013,     0,     0,     0,     0,     0,
       0,    30,     0,  1361,     0,    31,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1015,  1361,  2446,  1327,
       0,  2447,  1361,     0,  1328,  1006,  1346,  1329,     0,     0,
       0,     0,  1330,  1331,  1332,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,    33,     0,     0,  1333,
       0,     0,  1334,     0,     0,     0,     0,  1335,     0,     0,
      34,     0,     0,     0,  1336,  2041,     0,     0,     0,     0,
       0,     0,     0,  2735,  2736,  1007,     0,  2737,     0,     0,
    2251,     0,     0,  1008,    35,     0,     0,     0,     0,     0,
    1337,     0,     0,     0,     0,  1009,     0,     0,    36,   990,
       0,   -41,     0,     0,     0,   991,     0,     0,     0,     0,
       0,     0,  1003,  2776,  2777,     0,     0,   993,     0,     0,
       0, -1801,   911,     0,  1466,     0,     0,  1010,     0,     0,
       0,  1004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2801,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1011,     0,     0,     0,   995,     0,  1012,     0,     0,     0,
       0,     0,  1328,  1005,     0,  1329,     0,     0,     0,     0,
    1330,  1331,  1332,  1338,     0,     0,     0,     0,  1013,     0,
       0,     0,     0,     0,  1014,     0,     0,  1333,  1361,     0,
    2314,  1339,     0,     0,   992,  1335,  1340,     0,     0,     0,
    1015,     0,  1336, -1801,     0,     0,     0,  1361,     0,     0,
    1353,  1354,  1355,  1356,  1357,  1358,     0,     0,  1341,  1342,
       0,     0,     0,     0,  1361,     0,  1660,  1660,  1337,  2022,
       0,  1660,  1343,     0,     0,     0,  1361,     0,     0,  1361,
    2886,     0,     0,     0,  1361,     0,     0,  1361,     0,     0,
       0,     0,     0,   997,     0,  1313,     0,     0,  1006,  1361,
       0,     0,     0,  1361,  1361,  1361,  1361,     0,     0,     0,
       0,  1344,  1660,  1660,  1345,  1361,  1361,     0,     0,     0,
       0,  2919,     0,     0,     0,     0,     0,  1361,  1346,     0,
    1361,  1347,     0,     0,     0,     0,  2933,     0,  1361,  1361,
    1361,  1361,  1361,  1361,  1361,  1361,  1361,  1361,  1007,     0,
       0,     0,     0,     0,     0,  1361,  1008,  1258,     0,  1361,
       0,     0,     0,     0,     0,     0,     0,     0,  1009,     0,
       0,  1338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1361,     0,     0,     0,     0,     0,     0,     0,  1339,
     993,     0,     0,     0,  1340,     0,     0,     0,     0,     0,
    1010,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1341,  1342,     0,     0,
       0,     0,     0,  1348,     0,  2776,     0,     0,     0,     0,
    1343,     0,     0,     0,     0,   911,     0,     0,     0,     0,
       0,     0,     0,  1860,     0,     0,     0,   995,     0,  1012,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3016,  1344,
       0,  1013,  1345,     0,     0,     0,     0,  1861,     0,     0,
       0,     0,     0,     0,     0,     0,  1346,     0,     0,  1347,
       0,     0,     0,  1015,     0,  3034,  3034,     0,     0,     0,
       0,     0,  1361,  1361,  1361,     0,     0,     0,     0,  2776,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1349,     0,     0,  1350,  1351,
    1352,     0,  1353,  1354,  1355,  1356,  1357,  1358,     0,     0,
       0,  1361,     0,     0,  1328,     0,   997,  1329,     0,     0,
       0,     0,  1330,  1331,  1332,     0,     0,  3034,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1333,
       0,     0,     0,     0,     0,     0,     0,  1335,     0,     0,
       0,  1348,     0,     0,  1336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1361,     0,     0,     0,     0,
       0,  1361,     0,  1258,     0,     0,     0,     0,  1258,     0,
    1337,     0,     0,     0,  2022,  2022,  1361,     0,  1660,  1660,
    1660,  1660,     0,     0,  1660,  1660,  1660,  1660,  1660,  1660,
    1660,  1660,  1660,  1660,  2022,  3034,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1587,  1589,  1361,     0,     0,  1361,     0,  1361,     0,     0,
       0,  2022,  2022,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1361,  1660,  1660,  1361,     0,
    1361,     0,     0,  1349,     0,     0,  1350,  1351,  1352,     0,
    1353,  1354,  1355,  1356,  1357,  1358,     0,     0,     0,     0,
    1682,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1339,     0,     0,     0,     0,  1340,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1328,     0,     0,
    1329,     0,     0,     0,     0,  1330,  1331,  1332,  1341,  1342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1361,     0,  1343,     0,     0,     0,     0,     0,     0,     0,
    1335,     0,  1328,     0,     0,  1329,     0,  1336,     0,     0,
    1330,  1331,  1332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1333,     0,     0,
       0,  1344,     0,  1337,  1345,  1335,     0,     0,     0,     0,
       0,     0,  1336,     0,     0,     0,  1328,     0,  1346,  1329,
       0,  1347,     0,     0,  1330,  1331,  1332,     0,     0,     0,
       0,     0,  1587,  1589,     0,     0,     0,     0,  1337,     0,
       0,  1333,     0,  1258,     0,     0,     0,     0,     0,  1335,
       0,     0,     0,     0,     0,     0,  1336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1361,     0,     0,     0,  1361,  1361,
       0,  1361,  1337,     0,  2022,  2022,  2022,  2022,     0,     0,
       0,  2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,
    2022,  1361,  1361,     0,     0,     0,  1338,  1328,     0,     0,
    1329,     0,  1361,  1348,     0,  1330,  1331,  1332,  1361,     0,
       0,  1361,     0,  1361,  1339,     0,     0,  1361,     0,  1340,
    2022,  2022,  1333,     0,  1361,  1361,     0,     0,     0,     0,
    1335,  1338,   520,     0,     0,     0,     0,  1336,     0,     0,
       0,  1341,  1342,     0,     0,     0,     0,     0,     0,  1339,
       0,     0,     0,     0,  1340,  1343,     0,     0,     0,     0,
       0,     0,     0,  1337,     0,     0,     0,  1361,     0,     0,
       0,     0,     0,     0,     0,  1338,  1341,  1342,     0,     0,
       0,     0,     0,     0,     0,     0,   521,     0,     0,     0,
    1343,  1361,     0,  1339,  1344,     0,     0,  1345,  1340,     0,
       0,     0,   522,     0,  1361,  1349,     0,     0,  1350,  1351,
    1352,  1346,  1353,  1354,  1355,  1356,  1357,  1358,     0,     0,
    1341,  1342,  1682,     0,     0,     0,     0,     0,     0,  1344,
       0,     0,  1345,     0,  1343,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1346,     0,     0,  1347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   523,
       0,     0,     0,     0,     0,     0,  1338,     0,   524,     0,
       0,     0,     0,  1344,     0,     0,  1345,     0,     0,     0,
     525,     0,     0,     0,  1339,   526,     0,     0,     0,  1340,
    1346,     0,     0,  1347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1348,     0,     0,     0,
       0,  1341,  1342,     0,   527,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1343,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1361,
       0,  1348,     0,  1660,     0,     0,     0,     0,     0,     0,
       0,  1258,  1361,  1361,  1361,     0,     0,  1361,   528,     0,
    1361,  1361,   529,     0,  1344,  1361,     0,  1345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1346,     0,     0,  1347,  1348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1349,     0,
       0,  1350,  1351,  1352,     0,  1353,  1354,  1355,  1356,  1357,
    1358,     0,     0,     0,     0,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   531,  1349,     0,     0,  1350,  1351,  1352,  1660,
    1353,  1354,  1355,  1356,  1357,  1358,     0,     0,     0,     0,
    2048,     0,     0,     0,     0,     0,     0,     0,  1361,     0,
       0,     0,     0,     0,     0,   532,  1348,     0,   533,     0,
       0,     0,     0,     0,     0,     0,   534,  1349,     0,   535,
    1350,  1351,  1352,     0,  1353,  1354,  1355,  1356,  1357,  1358,
       0,     0,     0,     0,  2276,     0,     0,     0,     0,     0,
     536,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2022,  1660,     0,   537,     0,     0,  1361,  1361,  1361,     0,
     538,     0,     0,     0,     0,     0,     0,     0,     0,   539,
       0,     0,     0,     0,     0,   540,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1361,  1361,     0,
       0,   541,     0,     0,     0,     0,     0,     0,  1349,     0,
       0,  1350,  1351,  1352,     0,  1353,  1354,  1355,  1356,  1357,
    1358,     0,  1361,     0,     0,  2315,     0,     0,     0,     0,
       0,     0,     0,     0,  2022,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2022,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1361,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1361,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1361,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1027,   831,   561,   832,   833,   834,
     835,   836,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,  1028,   103,
     104,   105,     0,     0,     0,     0,   837,     0,     0,   106,
     107,     0,   108,   109,   110,  1029,   112,   113,   114,   115,
     838,  1030,   839,   840,     0,   120,   121,   122,   123,   124,
     125,   841,   842,   126,   127,   843,   844,   130,   131,     0,
     132,   133,   134,   135,   845,     0,  1031,  1361,   138,   139,
     140,   141,   142,   143,  1032,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,  1361,  1033,   155,   156,   157,
     847,   848,   849,  1034,   851,   852,   853,   159,   160,   161,
     162,   163,   164,   165,   854,   855,   168,   856,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,  1035,     0,   183,   184,   692,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   857,   200,   201,   202,   203,
     858,   859,   205,     0,   206,   207,   860,   209,     0,   210,
       0,   211,  1036,     0,  1037,   214,   215,   216,  1038,   218,
       0,   219,     0,     0,     0,   861,   862,   222,     0,   223,
     224,   225,   226,   227,   228,   229,  1039,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
    1040,   243,   244,   245,   246,   247,   248,   863,   864,     0,
     865,     0,   252,  1041,  1042,   255,  1043,   257,   258,   259,
     260,   261,     0,     0,   262,  1044,   264,  1045,     0,   266,
     267,   268,   866,   867,   269,   270,   271,   272,   273,  1046,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   868,  1047,
     869,   296,   297,   298,   299,   300,   870,   301,   302,  1048,
     304,   871,   872,   306,   873,   308,   309,   310,     0,   311,
     312,     0,     0,   874,   314,   315,     0,     0,   316,   317,
    1049,   319,  1050,   875,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   876,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   877,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,  1051,
     374,   375,   376,   878,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,   879,   394,   395,   396,   397,   398,   399,  1052,   401,
     402,   880,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,  1053,   418,   881,   420,
       0,   421,   422,     0,   423,  1054,   425,   426,   427,   428,
     429,     0,   882,   883,     0,     0,   432,   433,   884,   435,
     885,   886,   437,   438,  1055,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,   888,     0,   450,
     451,   452,   453,   454,   455,   889,  1056,   457,  1057,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     890,     0,     0,     0,     0,     0,     0,   891,   892,  1058,
       0,     0,     0,     0,   894,     0,   895,  1059,     0,     0,
       0,   896,     0,   897,   898,    94,   831,   561,   832,   833,
     834,   835,   836,     0,     0,     0,     0,     0,     0,     0,
       0,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     103,   104,   105,     0,     0,     0,     0,   837,     0,     0,
     106,   107,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   838,   117,   839,   840,     0,   120,   121,   122,   123,
     124,   125,   841,   842,   126,   127,   843,   844,   130,   131,
       0,   132,   133,   134,   135,   845,     0,   846,     0,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,   154,   155,   156,
     157,   847,   848,   849,   850,   851,   852,   853,   159,   160,
     161,   162,   163,   164,   165,   854,   855,   168,   856,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   692,
     186,   187,   188,     0,   189,   190,   191,     0,   192,   193,
     194,     0,   195,   196,   197,   198,   857,   200,   201,   202,
     203,   858,   859,   205,     0,   206,   207,   860,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,     0,     0,   861,   862,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   863,   864,
       0,   865,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,     0,   262,   263,   264,   265,     0,
     266,   267,   268,   866,   867,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   868,
     294,   869,   296,   297,   298,   299,   300,   870,   301,   302,
     303,   304,   871,   872,   306,   873,   308,   309,   310,     0,
     311,   312,     0,     0,   874,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   875,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   876,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   877,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   878,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    26,   389,   390,   391,
     392,   393,   879,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   880,   404,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   881,
     420,     0,   421,   422,    31,   423,   424,   425,   426,   427,
     428,   429,     0,   882,   883,     0,     0,   432,   433,   884,
     435,   885,   886,   437,   438,   887,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,   888,     0,
     450,   451,   452,   453,   454,   589,   889,     0,   457,   458,
     459,   460,   461,   462,   463,     0,     0,   464,     0,    34,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   890,     0,    35,     0,     0,     0,     0,   891,   892,
       0,     0,     0,     0,     0,   894,     0,   895,  2898,     0,
       0,     0,   896,     0,   897,   898,    94,   831,   561,   832,
     833,   834,   835,   836,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,   837,     0,
       0,   106,   107,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   838,   117,   839,   840,     0,   120,   121,   122,
     123,   124,   125,   841,   842,   126,   127,   843,   844,   130,
     131,     0,   132,   133,   134,   135,   845,     0,   846,     0,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,   155,
     156,   157,   847,   848,   849,   850,   851,   852,   853,   159,
     160,   161,   162,   163,   164,   165,   854,   855,   168,   856,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     692,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   857,   200,   201,
     202,   203,   858,   859,   205,     0,   206,   207,   860,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,     0,     0,   861,   862,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   863,
     864,     0,   865,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,     0,   262,   263,   264,   265,
       0,   266,   267,   268,   866,   867,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     868,   294,   869,   296,   297,   298,   299,   300,   870,   301,
     302,   303,   304,   871,   872,   306,   873,   308,   309,   310,
       0,   311,   312,     0,     0,   874,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   875,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   876,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   877,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   878,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    26,   389,   390,
     391,   392,   393,   879,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   880,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     881,   420,     0,   421,   422,    31,   423,   424,   425,   426,
     427,   428,   429,     0,   882,   883,     0,     0,   432,   433,
     884,   435,   885,   886,   437,   438,   887,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,   888,
       0,   450,   451,   452,   453,   454,   589,   889,     0,   457,
     458,   459,   460,   461,   462,   463,     0,     0,   464,     0,
      34,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   890,     0,    35,     0,     0,     0,     0,   891,
     892,     0,     0,     0,     0,     0,   894,     0,   895,     0,
       0,     0,     0,   896,     0,   897,   898,    94,   831,   561,
     832,   833,   834,   835,   836,     0,     0,     0,     0,     0,
       0,     0,     0,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,   837,
       0,     0,   106,   107,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   838,   117,   839,   840,  1669,   120,   121,
     122,   123,   124,   125,   841,   842,   126,   127,   843,   844,
     130,   131,     0,   132,   133,   134,   135,   845,     0,   846,
       0,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,   154,
     155,   156,   157,   847,   848,   849,   850,   851,   852,   853,
     159,   160,   161,   162,   163,   164,   165,   854,   855,   168,
     856,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   692,   186,   187,   188,     0,   189,   190,   191,     0,
     192,   193,   194,     0,   195,   196,   197,   198,   857,   200,
     201,   202,   203,   858,   859,   205,     0,   206,   207,   860,
     209,     0,   210,     0,   211,   212,  1670,   213,   214,   215,
     216,   217,   218,     0,   219,     0,     0,     0,   861,   862,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
     863,   864,     0,   865,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,  1671,   262,   263,   264,
     265,     0,   266,   267,   268,   866,   867,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   868,   294,   869,   296,   297,   298,   299,   300,   870,
     301,   302,   303,   304,   871,   872,   306,   873,   308,   309,
     310,     0,   311,   312,     0,     0,   874,   314,   315,     0,
       0,   316,   317,   318,   319,   320,   875,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     876,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   877,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   878,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,     0,   389,
     390,   391,   392,   393,   879,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   880,   404,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   881,   420,     0,   421,   422,     0,   423,   424,   425,
     426,   427,   428,   429,     0,   882,   883,     0,  1672,   432,
     433,   884,   435,   885,   886,   437,   438,   887,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
     888,     0,   450,   451,   452,   453,   454,   455,   889,     0,
     457,   458,   459,   460,   461,   462,   463,     0,     0,   464,
       0,     0,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   890,     0,     0,     0,     0,     0,     0,
     891,   892,     0,     0,     0,     0,     0,   894,     0,   895,
       0,     0,     0,     0,   896,     0,   897,   898,    94,   831,
     561,   832,   833,   834,   835,   836,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,  -849,   103,   104,   105,     0,     0,     0,  -849,
     837,     0,     0,   106,   107,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   838,   117,   839,   840,     0,   120,
     121,   122,   123,   124,   125,   841,   842,   126,   127,   843,
     844,   130,   131,     0,   132,   133,   134,   135,   845,     0,
     846,     0,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     154,   155,   156,   157,   847,   848,   849,   850,   851,   852,
     853,   159,   160,   161,   162,   163,   164,   165,   854,   855,
     168,   856,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   692,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   857,
     200,   201,   202,   203,   858,   859,   205,     0,   206,   207,
     860,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,     0,     0,   861,
     862,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   863,   864,     0,   865,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
     264,   265,     0,   266,   267,   268,   866,   867,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   868,   294,   869,   296,   297,   298,   299,   300,
     870,   301,   302,   303,   304,   871,   872,   306,   873,   308,
     309,   310,     0,   311,   312,     0,     0,   874,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   875,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   876,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     877,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   878,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,   879,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   880,   404,  -849,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   881,   420,     0,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,     0,   882,   883,     0,     0,
     432,   433,   884,   435,   885,   886,   437,   438,   887,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,   888,     0,   450,   451,   452,   453,   454,   455,   889,
       0,   457,   458,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   890,     0,     0,     0,     0,     0,
       0,   891,   892,     0,     0,     0,     0,     0,   894,     0,
     895,     0,     0,     0,     0,   896,     0,   897,   898,    94,
     831,   561,   832,   833,   834,   835,   836,     0,     0,     0,
       0,     0,     0,     0,     0,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,   837,     0,     0,   106,   107,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   838,   117,   839,   840,     0,
     120,   121,   122,   123,   124,   125,   841,   842,   126,   127,
     843,   844,   130,   131,     0,   132,   133,   134,   135,   845,
       0,   846,     0,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,   154,   155,   156,   157,   847,   848,   849,   850,   851,
     852,   853,   159,   160,   161,   162,   163,   164,   165,   854,
     855,   168,   856,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   692,   186,   187,   188,     0,   189,   190,
     191,     0,   192,   193,   194,     0,   195,   196,   197,   198,
     857,   200,   201,   202,   203,   858,   859,   205,     0,   206,
     207,   860,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   219,     0,     0,     0,
     861,   862,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   863,   864,     0,   865,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,     0,   262,
     263,   264,   265,     0,   266,   267,   268,   866,   867,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   868,   294,   869,   296,   297,   298,   299,
     300,   870,   301,   302,   303,   304,   871,   872,   306,   873,
     308,   309,   310,     0,   311,   312,     0,     0,   874,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   875,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   876,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   877,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   878,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
       0,   389,   390,   391,   392,   393,   879,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   880,   404,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   881,   420,     0,   421,   422,     0,   423,
     424,   425,   426,   427,   428,   429,     0,   882,   883,     0,
       0,   432,   433,   884,   435,   885,   886,   437,   438,   887,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,   888,     0,   450,   451,   452,   453,   454,   455,
     889,     0,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,     0,     0,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   890,     0,     0,     0,     0,
       0,     0,   891,   892,   893,     0,     0,     0,     0,   894,
       0,   895,     0,     0,     0,     0,   896,     0,   897,   898,
      94,  1422,   561,   832,   833,   834,  1423,   836,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,  1424,   103,   104,   105,     0,     0,
       0,     0,   837,     0,     0,   106,   107,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   838,   117,   839,   840,
       0,   120,   121,   122,   123,   124,   125,   841,   842,   126,
     127,   843,   844,   130,   131,     0,   132,   133,   134,   135,
     845,     0,   846,     0,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,   155,   156,   157,   847,   848,   849,   850,
     851,   852,   853,   159,   160,   161,   162,   163,   164,   165,
     854,   855,   168,   856,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   692,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   857,   200,   201,   202,   203,   858,   859,   205,     0,
     206,   207,   860,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,     0,
       0,   861,   862,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   863,   864,     0,   865,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,   266,   267,   268,   866,   867,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   868,   294,   869,   296,   297,   298,
     299,   300,   870,   301,   302,   303,   304,   871,   872,   306,
     873,   308,   309,   310,     0,   311,   312,     0,     0,   874,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   875,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   876,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   877,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   878,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,   879,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   880,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   881,   420,     0,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,     0,   882,   883,
       0,     0,   432,   433,   884,   435,   885,   886,   437,   438,
     887,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,   888,     0,   450,   451,   452,   453,   454,
     455,   889,     0,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   890,     0,     0,     0,
       0,     0,     0,   891,   892,     0,     0,     0,     0,     0,
     894,     0,   895,     0,     0,     0,     0,   896,     0,   897,
     898,  1027,   831,   561,   832,   833,   834,   835,   836,     0,
       0,     0,     0,     0,     0,     0,     0,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,   837,     0,     0,   106,   107,     0,   108,
     109,   110,  1029,   112,   113,   114,   115,   838,  1030,   839,
     840,     0,   120,   121,   122,   123,   124,   125,   841,   842,
     126,   127,   843,   844,   130,   131,     0,   132,   133,   134,
     135,   845,     0,  1031,     0,   138,   139,   140,   141,   142,
     143,  1032,   145,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,  1033,   155,   156,   157,   847,   848,   849,
    1034,   851,   852,   853,   159,   160,   161,   162,   163,   164,
     165,   854,   855,   168,   856,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   692,   186,   187,   188,     0,
     189,   190,   191,     0,   192,   193,   194,     0,   195,   196,
     197,   198,   857,   200,   201,   202,   203,   858,   859,   205,
       0,   206,   207,   860,   209,     0,   210,     0,   211,  1036,
       0,  1037,   214,   215,   216,  1038,   218,     0,   219,     0,
       0,     0,   861,   862,   222,     0,   223,   224,   225,   226,
     227,   228,   229,  1039,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,  1040,   243,   244,
     245,   246,   247,   248,   863,   864,     0,   865,     0,   252,
    1041,  1042,   255,  1043,   257,   258,   259,   260,   261,     0,
       0,   262,  1044,   264,  1045,     0,   266,   267,   268,   866,
     867,   269,   270,   271,   272,   273,  1046,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   868,  1047,   869,   296,   297,
     298,   299,   300,   870,   301,   302,  1048,   304,   871,   872,
     306,   873,   308,   309,   310,     0,   311,   312,     0,     0,
     874,   314,   315,     0,     0,   316,   317,  1049,   319,  1050,
     875,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   876,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   877,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,  1051,   374,   375,   376,
     878,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,     0,   389,   390,   391,   392,   393,   879,   394,
     395,   396,   397,   398,   399,  1052,   401,   402,   880,   404,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,  1053,   418,   881,   420,     0,   421,   422,
       0,   423,  1054,   425,   426,   427,   428,   429,     0,   882,
     883,     0,     0,   432,   433,   884,   435,   885,   886,   437,
     438,  1055,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,   888,     0,   450,   451,   452,   453,
     454,   455,   889,     0,   457,  1057,   459,   460,   461,   462,
     463,     0,     0,   464,     0,     0,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   890,     0,     0,
       0,     0,     0,     0,   891,   892,     0,     0,     0,     0,
       0,   894,     0,   895,  1543,     0,     0,     0,   896,     0,
     897,   898,    94,   831,   561,   832,   833,   834,   835,   836,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,   837,     0,     0,   106,   107,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   838,   117,
     839,   840,     0,   120,   121,   122,   123,   124,   125,   841,
     842,   126,   127,   843,   844,   130,   131,     0,   132,   133,
     134,   135,   845,     0,   846,     0,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,   155,   156,   157,   847,   848,
     849,   850,   851,   852,   853,   159,   160,   161,   162,   163,
     164,   165,   854,   855,   168,   856,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   692,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   857,   200,   201,   202,   203,   858,   859,
     205,     0,   206,   207,   860,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,     0,     0,   861,   862,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   863,   864,     0,   865,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,   266,   267,   268,
     866,   867,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   868,   294,   869,   296,
     297,   298,   299,   300,   870,   301,   302,   303,   304,   871,
     872,   306,   873,   308,   309,   310,     0,   311,   312,     0,
       0,   874,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   875,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   876,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   877,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   878,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,   879,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   880,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   881,   420,     0,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,     0,
     882,   883,     0,     0,   432,   433,   884,   435,   885,   886,
     437,   438,   887,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,   888,     0,   450,   451,   452,
     453,   454,   455,   889,     0,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   890,     0,
       0,     0,     0,     0,     0,   891,   892,     0,     0,     0,
       0,     0,   894,     0,   895,  1663,     0,     0,     0,   896,
       0,   897,   898,  1027,   831,   561,   832,   833,   834,   835,
     836,     0,     0,     0,     0,     0,     0,     0,     0,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,   837,     0,     0,   106,   107,
       0,   108,   109,   110,  1029,   112,   113,   114,   115,   838,
    1030,   839,   840,     0,   120,   121,   122,   123,   124,   125,
     841,   842,   126,   127,   843,   844,   130,   131,     0,   132,
     133,   134,   135,   845,     0,  1031,     0,   138,   139,   140,
     141,   142,   143,  1032,   145,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,  1033,   155,   156,   157,   847,
     848,   849,  1034,   851,   852,   853,   159,   160,   161,   162,
     163,   164,   165,   854,   855,   168,   856,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   692,   186,   187,
     188,     0,   189,   190,   191,     0,   192,   193,   194,     0,
     195,   196,   197,   198,   857,   200,   201,   202,   203,   858,
     859,   205,     0,   206,   207,   860,   209,     0,   210,     0,
     211,  1036,     0,  1037,   214,   215,   216,  1038,   218,     0,
     219,     0,     0,     0,   861,   862,   222,     0,   223,   224,
     225,   226,   227,   228,   229,  1039,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,  1040,
     243,   244,   245,   246,   247,   248,   863,   864,     0,   865,
       0,   252,  1041,  1042,   255,  1043,   257,   258,   259,   260,
     261,     0,     0,   262,  1044,   264,  1045,     0,   266,   267,
     268,   866,   867,   269,   270,   271,   272,   273,  1046,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   868,  1047,   869,
     296,   297,   298,   299,   300,   870,   301,   302,  1048,   304,
     871,   872,   306,   873,   308,   309,   310,     0,   311,   312,
       0,     0,   874,   314,   315,     0,     0,   316,   317,  1049,
     319,  1050,   875,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   876,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   877,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,  1051,   374,
     375,   376,   878,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,     0,   389,   390,   391,   392,   393,
     879,   394,   395,   396,   397,   398,   399,  1052,   401,   402,
     880,   404,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,  1053,   418,   881,   420,     0,
     421,   422,     0,   423,  1054,   425,   426,   427,   428,   429,
       0,   882,   883,     0,     0,   432,   433,   884,   435,   885,
     886,   437,   438,  1055,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,   888,     0,   450,   451,
     452,   453,   454,   455,   889,  1886,   457,  1057,   459,   460,
     461,   462,   463,     0,     0,   464,     0,     0,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   890,
       0,     0,     0,     0,     0,     0,   891,   892,     0,     0,
       0,     0,     0,   894,     0,   895,     0,     0,     0,     0,
     896,     0,   897,   898,    94,   831,   561,   832,   833,   834,
     835,   836,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,   837,     0,     0,   106,
     107,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     838,   117,   839,   840,     0,   120,   121,   122,   123,   124,
     125,   841,   842,   126,   127,   843,   844,   130,   131,     0,
     132,   133,   134,   135,   845,     0,   846,     0,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   154,   155,   156,   157,
     847,   848,   849,   850,   851,   852,   853,   159,   160,   161,
     162,   163,   164,   165,   854,   855,   168,   856,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   692,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   857,   200,   201,   202,   203,
     858,   859,   205,     0,   206,   207,   860,   209,     0,   210,
       0,   211,   212,  1670,   213,   214,   215,   216,   217,   218,
       0,   219,     0,     0,     0,   861,   862,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   863,   864,     0,
     865,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,   266,
     267,   268,   866,   867,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   868,   294,
     869,   296,   297,   298,   299,   300,   870,   301,   302,   303,
     304,   871,   872,   306,   873,   308,   309,   310,     0,   311,
     312,     0,     0,   874,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   875,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   876,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   877,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   878,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,   879,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   880,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   881,   420,
       0,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,     0,   882,   883,     0,     0,   432,   433,   884,   435,
     885,   886,   437,   438,   887,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,   888,     0,   450,
     451,   452,   453,   454,   455,   889,     0,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     890,     0,     0,     0,     0,     0,     0,   891,   892,     0,
       0,     0,     0,     0,   894,     0,   895,     0,     0,     0,
       0,   896,     0,   897,   898,    94,   831,   561,   832,   833,
     834,   835,   836,     0,     0,     0,     0,     0,     0,     0,
       0,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     103,   104,   105,     0,     0,     0,     0,   837,     0,     0,
     106,   107,     0,   108,   109,   110,   111,   112,   113,   114,
     115,   838,   117,   839,   840,     0,   120,   121,   122,   123,
     124,   125,   841,   842,   126,   127,   843,   844,   130,   131,
       0,   132,   133,   134,   135,   845,     0,   846,     0,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,   154,   155,   156,
     157,   847,   848,   849,   850,   851,   852,   853,   159,   160,
     161,   162,   163,   164,   165,   854,   855,   168,   856,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   692,
     186,   187,   188,     0,   189,   190,   191,     0,   192,   193,
     194,     0,   195,   196,   197,   198,   857,   200,   201,   202,
     203,   858,   859,   205,     0,   206,   207,   860,   209,     0,
     210,     0,   211,   212,     0,   213,   214,   215,   216,   217,
     218,     0,   219,     0,     0,     0,   861,   862,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   863,   864,
       0,   865,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,     0,   262,   263,   264,   265,     0,
     266,   267,   268,   866,   867,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   868,
     294,   869,   296,   297,   298,   299,   300,   870,   301,   302,
     303,   304,   871,   872,   306,   873,   308,   309,   310,     0,
     311,   312,     0,     0,   874,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   875,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   876,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   877,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
     373,   374,   375,   376,   878,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,     0,   389,   390,   391,
     392,   393,   879,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   880,   404,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   881,
     420,     0,   421,   422,     0,   423,   424,   425,   426,   427,
     428,   429,     0,   882,   883,     0,     0,   432,   433,   884,
     435,   885,   886,   437,   438,   887,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,   888,     0,
     450,   451,   452,   453,   454,   455,   889,     0,   457,   458,
     459,   460,   461,   462,   463,     0,     0,   464,     0,     0,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   890,     0,     0,     0,     0,     0,     0,   891,   892,
       0,     0,     0,     0,     0,   894,     0,   895,     0,     0,
       0,     0,   896,     0,   897,   898,  1027,   831,   561,   832,
     833,   834,   835,   836,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,   837,     0,
       0,   106,   107,     0,   108,   109,   110,  1029,   112,   113,
     114,   115,   838,  1030,   839,   840,     0,   120,   121,   122,
     123,   124,   125,   841,   842,   126,   127,   843,   844,   130,
     131,     0,   132,   133,   134,   135,   845,     0,  1031,     0,
     138,   139,   140,   141,   142,   143,  1032,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,  1033,   155,
     156,   157,   847,   848,   849,  1034,   851,   852,   853,   159,
     160,   161,   162,   163,   164,   165,   854,   855,   168,   856,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     692,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   857,   200,   201,
     202,   203,   858,   859,   205,     0,   206,   207,   860,   209,
       0,   210,     0,   211,  1036,     0,  1037,   214,   215,   216,
    1038,   218,     0,   219,     0,     0,     0,   861,   862,   222,
       0,   223,   224,   225,   226,   227,   228,   229,  1039,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,  1040,   243,   244,   245,   246,   247,   248,   863,
     864,     0,   865,     0,   252,  1041,  1042,   255,  1043,   257,
     258,   259,   260,   261,     0,     0,   262,  1044,   264,  1045,
       0,   266,   267,   268,   866,   867,   269,   270,   271,   272,
     273,  1046,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     868,  1047,   869,   296,   297,   298,   299,   300,   870,   301,
     302,  1048,   304,   871,   872,   306,   873,   308,   309,   310,
       0,   311,   312,     0,     0,   874,   314,   315,     0,     0,
     316,   317,  1049,   319,  1050,   875,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   876,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   877,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,  1051,   374,   375,   376,   878,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,   879,   394,   395,   396,   397,   398,   399,
    1052,   401,   402,   880,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1053,   418,
     881,   420,     0,   421,   422,     0,   423,  1054,   425,   426,
     427,   428,   429,     0,   882,   883,     0,     0,   432,   433,
     884,   435,   885,   886,   437,   438,  1055,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,   888,
       0,   450,   451,   452,   453,   454,   455,   889,     0,   457,
    1057,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   890,     0,     0,     0,     0,     0,     0,   891,
     892,     0,     0,     0,     0,     0,   894,     0,   895,     0,
       0,     0,     0,   896,     0,   897,   898,    94,   831,   561,
     832,   833,   834,   835,   836,     0,     0,     0,     0,     0,
       0,     0,     0,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,   837,
       0,     0,   106,   107,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   838,   117,   839,   840,     0,   120,   121,
     122,   123,   124,   125,   841,   842,   126,   127,   843,   844,
     130,   131,     0,   132,   133,   134,   135,   845,     0,   846,
       0,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,   154,
     155,   156,   157,   847,   848,   849,   850,   851,   852,   853,
     159,   160,   161,   162,   163,   164,   165,   854,   855,   168,
     856,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   692,   186,   187,   188,     0,   189,   190,   191,     0,
     192,   193,   194,     0,   195,   196,   197,   198,   857,   200,
     201,   202,   203,   858,   859,   205,     0,   206,   207,   860,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,     0,     0,   861,   862,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
     863,   864,     0,   865,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,     0,   262,   263,   264,
     265,     0,   266,   267,   268,   866,   867,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   868,   294,   869,   296,   297,   298,   299,   300,   870,
     301,   302,   303,   304,   871,   872,   306,   873,   308,   309,
     310,     0,   311,   312,     0,     0,   874,   314,   315,     0,
       0,   316,   317,   318,   319,   320,   875,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     876,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   877,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   878,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,     0,   389,
     390,   391,   392,   393,   879,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   880,   404,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   881,   420,     0,   421,   422,     0,   423,   424,   425,
     426,   427,   428,   429,     0,   882,   883,     0,     0,   432,
     433,   884,   435,   885,   886,   437,   438,   887,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
     888,     0,   450,   451,   452,   453,   454,   455,   889,     0,
     457,   458,   459,   460,   461,   462,   463,     0,     0,   464,
       0,     0,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   890,     0,     0,     0,     0,     0,     0,
    1427,  1428,     0,     0,     0,     0,     0,   894,     0,   895,
       0,     0,     0,     0,   896,     0,   897,   898,    94,  1811,
     561,   832,   833,   834,   835,   836,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
     837,     0,     0,   106,   107,     0,   108,   109,   110,   111,
     112,   113,   114,   115,   838,   117,   839,   840,     0,   120,
     121,   122,   123,   124,   125,   841,   842,   126,   127,   843,
     844,   130,   131,     0,   132,   133,   134,   135,   845,     0,
     846,     0,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     154,   155,   156,   157,   847,   848,   849,   850,   851,   852,
     853,   159,   160,   161,   162,   163,   164,   165,   854,   855,
     168,   856,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   692,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   857,
     200,   201,   202,   203,   858,   859,   205,     0,   206,   207,
     860,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,     0,     0,   861,
     862,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   863,   864,     0,   865,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
     264,   265,     0,   266,   267,   268,   866,   867,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   868,   294,   869,   296,   297,   298,   299,   300,
     870,   301,   302,   303,   304,   871,   872,   306,   873,   308,
     309,   310,     0,   311,   312,     0,     0,   874,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   875,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   876,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     877,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   373,   374,   375,   376,   878,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,   879,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   880,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   881,   420,     0,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,     0,   882,   883,     0,     0,
     432,   433,   884,   435,   885,   886,   437,   438,   887,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,   888,     0,   450,   451,   452,   453,   454,   455,   889,
       0,   457,   458,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   890,     0,     0,     0,     0,     0,
       0,   891,   892,     0,     0,     0,     0,     0,   894,     0,
     895,     0,     0,     0,     0,   896,     0,   897,   898,    94,
     831,   561,   832,   833,   834,   835,   836,     0,     0,     0,
       0,     0,     0,     0,     0,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,   837,     0,     0,   106,   107,     0,   108,   109,   110,
     111,   112,   113,   114,   115,   838,   117,   839,   840,     0,
     120,   121,   122,   123,   124,   125,   841,   842,   126,   127,
     843,   844,   130,   131,     0,   132,   133,   134,   135,   845,
       0,   846,     0,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,   154,   155,   156,   157,   847,   848,   849,   850,   851,
     852,   853,   159,   160,   161,   162,   163,   164,   165,   854,
     855,   168,   856,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   692,   186,   187,   188,     0,   189,   190,
     191,     0,   192,   193,   194,     0,   195,   196,   197,   198,
     857,   200,   201,   202,   203,   858,   859,   205,     0,   206,
     207,   860,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   219,     0,     0,     0,
     861,   862,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   863,   864,     0,   865,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,     0,   262,
     263,   264,   265,     0,   266,   267,   268,   866,   867,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   868,   294,   869,   296,   297,   298,   299,
     300,   870,   301,   302,   303,   304,   871,   872,   306,   873,
     308,   309,   310,     0,   311,   312,     0,     0,   874,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   875,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   876,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   877,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   373,   374,   375,   376,   878,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
       0,   389,   390,   391,   392,   393,   879,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   880,   404,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   881,   420,     0,   421,   422,     0,   423,
     424,   425,   426,   427,   428,   429,     0,   882,   883,     0,
       0,   432,   433,   884,   435,   885,   886,   437,   438,   887,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,   888,     0,   450,   451,   452,   453,   454,   455,
     889,     0,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,     0,     0,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   890,     0,     0,     0,     0,
       0,     0,   891,   892,     0,     0,     0,     0,     0,   894,
       0,  2040,     0,     0,     0,     0,   896,     0,   897,   898,
      94,   831,   561,   832,   833,   834,   835,   836,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,   837,     0,     0,   106,   107,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   838,   117,   839,   840,
       0,   120,   121,   122,   123,   124,   125,   841,   842,   126,
     127,   843,   844,   130,   131,     0,   132,   133,   134,   135,
     845,     0,   846,     0,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,   155,  2766,   157,   847,   848,   849,   850,
     851,   852,   853,   159,   160,   161,   162,   163,   164,   165,
     854,   855,   168,   856,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   692,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   857,   200,   201,   202,   203,   858,   859,   205,     0,
     206,   207,   860,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,     0,
       0,  2767,   862,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   863,   864,     0,   865,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,   266,   267,   268,   866,   867,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   868,   294,   869,   296,   297,   298,
     299,   300,   870,   301,   302,   303,   304,   871,   872,   306,
     873,   308,   309,   310,     0,   311,   312,     0,     0,   874,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   875,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   876,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   877,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,  2768,   878,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,   879,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   880,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   881,   420,     0,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,     0,   882,   883,
       0,     0,   432,   433,   884,   435,   885,   886,   437,   438,
     887,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,   888,     0,   450,   451,   452,   453,   454,
     455,   889,     0,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   890,     0,     0,     0,
       0,     0,     0,   891,   892,     0,     0,     0,     0,     0,
     894,     0,  2769,     0,     0,     0,     0,   896,     0,   897,
     898,    94,   831,   561,   832,   833,   834,   835,   836,     0,
       0,     0,     0,     0,     0,     0,     0,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,   837,     0,     0,   106,   107,     0,   108,
     109,   110,   111,   112,   113,   114,  3031,   838,   117,   839,
     840,     0,   120,   121,   122,   123,   124,   125,   841,   842,
     126,   127,   843,   844,   130,   131,     0,   132,   133,   134,
     135,   845,     0,   846,     0,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,   154,   155,   156,  3032,   847,   848,   849,
     850,   851,   852,   853,   159,   160,   161,   162,   163,   164,
     165,   854,   855,   168,   856,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   692,   186,   187,   188,     0,
     189,   190,   191,     0,   192,   193,   194,     0,   195,   196,
     197,   198,   857,   200,   201,   202,   203,   858,   859,   205,
       0,   206,   207,   860,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
       0,     0,   861,   862,   222,     0,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   863,   864,     0,   865,     0,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
       0,   262,   263,   264,   265,     0,   266,   267,   268,   866,
     867,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   868,   294,   869,   296,   297,
     298,   299,   300,   870,   301,   302,   303,   304,   871,   872,
     306,   873,   308,   309,   310,     0,   311,   312,     0,     0,
     874,   314,   315,     0,     0,   316,   317,   318,   319,   320,
     875,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   876,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   877,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
     878,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,     0,   389,   390,   391,   392,   393,   879,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   880,   404,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   881,   420,     0,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,     0,   882,
     883,     0,     0,   432,   433,   884,   435,   885,   886,   437,
     438,   887,   440,   441,  3033,   443,   444,     0,     0,   445,
     446,   447,   448,   449,   888,     0,   450,   451,   452,   453,
     454,   455,   889,     0,   457,   458,   459,   460,   461,   462,
     463,     0,     0,   464,     0,     0,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   890,     0,     0,
       0,     0,     0,     0,   891,   892,     0,     0,     0,     0,
       0,   894,     0,   895,     0,     0,     0,     0,   896,     0,
     897,   898,    94,   831,   561,   832,   833,   834,   835,   836,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,   837,     0,     0,   106,   107,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   838,   117,
     839,   840,     0,   120,   121,   122,   123,   124,   125,   841,
     842,   126,   127,   843,   844,   130,   131,     0,   132,   133,
     134,   135,   845,     0,   846,     0,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,   155,   156,  3032,   847,   848,
     849,   850,   851,   852,   853,   159,   160,   161,   162,   163,
     164,   165,   854,   855,   168,   856,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   692,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   857,   200,   201,   202,   203,   858,   859,
     205,     0,   206,   207,   860,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,     0,     0,   861,   862,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   863,   864,     0,   865,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,   266,   267,   268,
     866,   867,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   868,   294,   869,   296,
     297,   298,   299,   300,   870,   301,   302,   303,   304,   871,
     872,   306,   873,   308,   309,   310,     0,   311,   312,     0,
       0,   874,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   875,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   876,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   877,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   878,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,   879,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   880,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   881,   420,     0,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,     0,
     882,   883,     0,     0,   432,   433,   884,   435,   885,   886,
     437,   438,   887,   440,   441,  3033,   443,   444,     0,     0,
     445,   446,   447,   448,   449,   888,     0,   450,   451,   452,
     453,   454,   455,   889,     0,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   890,     0,
       0,     0,     0,     0,     0,   891,   892,     0,     0,     0,
       0,     0,   894,     0,   895,     0,     0,     0,     0,   896,
       0,   897,   898,    94,   831,   561,   832,   833,   834,   835,
     836,     0,     0,     0,     0,     0,     0,     0,     0,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,   837,     0,     0,   106,   107,
       0,   108,   109,   110,   111,   112,   113,   114, -1801,   838,
     117,   839,   840,     0,   120,   121,   122,   123,   124,   125,
     841,   842,   126,   127,   843,   844,   130,   131,     0,   132,
     133,   134,   135,   845,     0,   846,     0,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,   154,   155,   156,  3032,   847,
     848,   849,   850,   851,   852,   853,   159,   160,   161,   162,
     163,   164,   165,   854,   855,   168,   856,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   692,   186,   187,
     188,     0,   189,   190,   191,     0,   192,   193,   194,     0,
     195,   196,   197,   198,   857,   200,   201,   202,   203,   858,
     859,   205,     0,   206,   207,   860,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216, -1801,   218,     0,
     219,     0,     0,     0,   861,   862,   222,     0,   223,   224,
     225,   226,   227,   228,   229, -1801,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   863,   864,     0,   865,
       0,   252,     0,     0,   255,   256,   257,   258,   259,   260,
     261,     0,     0,   262,   263,   264, -1801,     0,   266,   267,
     268,   866,   867,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   868,   294,   869,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
     871,   872,   306,   873,   308,   309,   310,     0,   311,   312,
       0,     0,   874,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   875,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   876,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   877,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   878,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,     0,   389,   390,   391,   392,   393,
     879,   394,   395,   396,   397,   398,   399, -1801,   401,   402,
     880,   404,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   881,   420,     0,
     421,   422,     0,   423,   424,   425,   426,   427,   428,   429,
       0,   882,   883,     0,     0,   432,   433,   884,   435,   885,
     886,   437,   438,   887,   440,   441,  3033,   443,   444,     0,
       0,   445,   446,   447,   448,   449,   888,     0,   450,   451,
     452,   453,   454,   455,   889,     0,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,     0,     0,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485, -1801,
       0,     0,     0,     0,     0,     0,   891,   892,     0,     0,
       0,     0,     0,   894,     0,   895,     0,     0,     0,     0,
     896,     0,   897,   898,    94,   831,   561,   832,   833,   834,
     835,   836,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     838,   117,   839,   840,     0,   120,   121,   122,   123,   124,
     125,   841,   842,   126,   127,   843,   844,   130,   131,     0,
     132,   133,   134,   135,   845,     0,   846,     0,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   154,   155,   156,   157,
     847,   848,   849,   850,   851,   852,   853,   159,   160,   161,
     162,   163,   164,   165,   854,   855,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   692,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   857,   200,   201,   202,   203,
     858,   859,   205,     0,   206,   207,   860,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   219,     0,     0,     0,   861,   862,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   863,   864,     0,
     865,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,   266,
     267,   268,   866,   867,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   868,   294,
     869,   296,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   871,   872,   306,   873,   308,   309,   310,     0,   311,
     312,     0,     0,   874,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   875,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   876,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   877,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,   879,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   880,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   881,   420,
       0,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,     0,   882,   883,     0,     0,   432,   433,   884,   435,
     885,   886,   437,   438,   887,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,   888,     0,   450,
     451,   452,   453,   454,   455,   889,     0,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,     0,  1655,  1656,     0,
       0,    94,   831,   561,   832,   833,  1657,   835,   836,     0,
       0,     0,     0,   897,   898,     0,     0,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,   111,   112,   113,   114,   115,   838,   117,   839,
     840,     0,   120,   121,   122,   123,   124,   125,   841,   842,
     126,   127,   843,   844,   130,   131,     0,   132,   133,   134,
     135,   845,     0,   846,     0,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,   154,   155,   156,   157,   847,   848,   849,
     850,   851,   852,   853,   159,   160,   161,   162,   163,   164,
     165,   854,   855,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   692,   186,   187,   188,     0,
     189,   190,   191,     0,   192,   193,   194,     0,   195,   196,
     197,   198,   857,   200,   201,   202,   203,   858,   859,   205,
       0,   206,   207,   860,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
       0,     0,   861,   862,   222,     0,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   863,   864,     0,   865,     0,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
       0,   262,   263,   264,   265,     0,   266,   267,   268,   866,
     867,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   868,   294,   869,   296,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   871,   872,
     306,   873,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,   318,   319,   320,
     875,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   876,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   877,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   373,   374,   375,   376,
    1797,  1798,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,     0,   389,   390,   391,   392,   393,   879,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   880,   404,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   881,   420,     0,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,     0,   882,
     883,     0,     0,   432,   433,   884,   435,   885,   886,   437,
     438,   887,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,   888,     0,   450,   451,   452,   453,
     454,   455,   889,     0,   457,   458,   459,   460,   461,   462,
     463,     0,     0,   464,     0,     0,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,     0,  1799,  1800,     0,     0,     0,     0,
       0,     0,     0,  1657,     0,     0,     0,     0,     0,     0,
     897,   898,    94,   831,   561,   832,   833,   834,   835,   836,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,   111,   112,   113,   114,   115,   838,   117,
     839,   840,     0,   120,   121,   122,   123,   124,   125,   841,
     842,   126,   127,   843,   844,   130,   131,     0,   132,   133,
     134,   135,   845,     0,   846,     0,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,   154,   155,   156,   157,   847,   848,
     849,   850,   851,   852,   853,   159,   160,   161,   162,   163,
     164,   165,   854,   855,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   692,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   857,   200,   201,   202,   203,   858,   859,
     205,     0,   206,   207,   860,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,     0,     0,   861,   862,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   863,   864,     0,   865,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,     0,   262,   263,   264,   265,     0,   266,   267,   268,
     866,   867,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   868,   294,   869,   296,
     297,   298,   299,   300,     0,   301,   302,   303,   304,   871,
     872,   306,   873,   308,   309,   310,     0,   311,   312,     0,
       0,   874,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   875,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   876,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   877,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,   879,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   880,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   881,   420,     0,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,     0,
     882,   883,     0,     0,   432,   433,   884,   435,   885,   886,
     437,   438,   887,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,   888,     0,   450,   451,   452,
     453,   454,   455,   889,     0,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,     0,  1655,  1656,     0,     0,     0,
       0,     0,     0,     0,  1657,     0,     0,     0,     0,     0,
       0,   897,   898,    94,   831,   561,   832,   833,   834,   835,
     836,     0,     0,     0,     0,     0,     0,     0,     0,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,   837,     0,     0,   106,   107,
       0,   108,   109,   110,   111,   112,   113,   114,     0,   838,
     117,   839,   840,     0,   120,   121,   122,   123,   124,   125,
     841,   842,   126,   127,   843,   844,   130,   131,     0,   132,
     133,   134,   135,   845,     0,   846,     0,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,   154,   155,   156,   157,   847,
     848,   849,   850,   851,   852,   853,   159,   160,   161,   162,
     163,   164,   165,   854,   855,   168,   856,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   692,   186,   187,
     188,     0,   189,   190,   191,     0,   192,     0,   194,     0,
     195,   196,   197,   198,   857,   200,   201,   202,   203,   858,
     859,   205,     0,   206,   207,   860,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,     0,   218,     0,
     219,     0,     0,     0,   861,   862,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   863,   864,     0,   865,
       0,   252,     0,     0,   255,   256,   257,   258,   259,   260,
     261,     0,     0,   262,   263,   264,     0,     0,   266,   267,
     268,   866,   867,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   868,   294,   869,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
     871,   872,   306,   873,   308,   309,   310,     0,   311,   312,
       0,     0,   874,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   875,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   876,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   877,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   878,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,     0,   389,   390,   391,   392,   393,
     879,   394,   395,   396,   397,   398,   399,     0,   401,   402,
     880,   404,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   881,   420,     0,
     421,   422,     0,   423,   424,   425,   426,   427,   428,   429,
       0,   882,   883,     0,     0,   432,   433,   884,   435,   885,
     886,   437,   438,   887,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,   888,     0,   450,   451,
     452,   453,   454,   455,   889,     0,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,     0,     0,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,     0,   891,   892,   512,     0,
       0,     0,     0,   894,     0,   895,     0,     0,     0,     0,
     896,     0,   897,   898,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,  2355,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,   131,     0,   132,   133,   134,   135,   136,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
    -526,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,  -526,   214,
     215,   216,     0,   218,     0,   219,     0,     0,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,  -526,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
    -526,   257,   258,   259,   260,   261,     0,     0,   262,  -526,
     264,     0,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   514,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,  -526,   295,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,  -526,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,     0,   401,   402,   403,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     516,   418,   419,   420,     0,   421,   422,     0,   423,  -526,
     425,   426,   427,   428,   429,     0,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,     0,     0,    94,     0,   594,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   959,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,   842,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   845,     0,   846,     0,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,   154,   155,
     156,   157,   847,   848,   849,   850,   851,   852,   853,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   858,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,  2086,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,  2087,     0,   262,   263,   264,   265,
       0,   266,   267,   268,   866,   867,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   304,     0,   872,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   595,   313,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   875,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   876,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,   373,   374,   375,   376,   377,  2088,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    26,   389,   390,
     391,   392,   393,   879,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     881,   420,     0,   421,   422,    31,   423,   424,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     884,   435,   885,     0,   437,   438,   887,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,   888,
       0,   450,   451,   452,   453,   454,   589,   456,     0,   457,
     458,   459,   460,   461,   462,   463,     0,     0,   464,     0,
      34,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,     0,    94,    35,   594,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2089,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,     0,     0,     0,   106,   107,
       0,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,     0,   120,   121,   122,   123,   124,   125,
       0,   842,   126,   127,   128,   129,   130,   131,     0,   132,
     133,   134,   135,   845,     0,   846,     0,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,   154,   155,   156,   157,   847,
     848,   849,   850,   851,   852,   853,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,     0,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   858,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     219,     0,  2086,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,  2087,     0,   262,   263,   264,   265,     0,   266,   267,
     268,   866,   867,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,     0,   301,   302,   303,   304,
       0,   872,   306,   307,   308,   309,   310,     0,   311,   312,
       0,   595,   313,   314,   315,     0,     0,   316,   317,   318,
     319,   320,   875,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   876,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,   373,   374,
     375,   376,   377,  2088,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,     0,   389,   390,   391,   392,   393,
     879,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   881,   420,     0,
     421,   422,     0,   423,   424,   425,   426,   427,   428,   429,
       0,   430,   431,     0,     0,   432,   433,   884,   435,   885,
       0,   437,   438,   887,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,   888,     0,   450,   451,
     452,   453,   454,   455,   456,     0,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,     0,     0,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,     0,
      94,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2089,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,   842,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     845,     0,   846,     0,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,   155,   156,   157,   847,   848,   849,   850,
     851,   852,   853,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   858,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,   266,   267,   268,   866,   867,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,   304,     0,   872,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   875,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   876,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
    2088,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,   879,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   881,   420,     0,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   884,   435,   885,     0,   437,   438,
     887,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,   888,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,     0,    94,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   590,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,     0,
       0,     0,   106,   107,     0,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,   123,   124,   125,     0,   842,   126,   127,   128,   129,
     130,   131,     0,   132,   133,   134,   135,   845,     0,   846,
       0,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,   154,
     155,   156,   157,   847,   848,   849,   850,   851,   852,   853,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,     0,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   858,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,     0,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,     0,   262,   263,   264,
     265,     0,   266,   267,   268,   866,   867,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,   304,     0,   872,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,   318,   319,   320,   875,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     876,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,     0,   389,
     390,   391,   392,   393,   879,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   881,   420,     0,   421,   422,     0,   423,   424,   425,
     426,   427,   428,   429,     0,   430,   431,     0,     0,   432,
     433,   884,   435,   885,     0,   437,   438,   887,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
     888,     0,   450,   451,   452,   453,   454,   455,   456,     0,
     457,   458,   459,   460,   461,   462,   463,     0,     0,   464,
       0,     0,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,     0,   759,  1252,   561,     0,     0,     0,
     835,     0,     0,     0,     0,     0,     0,     0,     0,  2795,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   760,
     761,     0,   762,   763,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   764,   765,   130,   131,     0,
     132,   133,   134,   135,   766,     0,     0,     0,   138,   139,
     140,   141,   142,   143,     0,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   155,   156,   157,
       0,     0,     0,     0,     0,     0,     0,   159,   160,   161,
     162,   163,   164,   165,   767,   768,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   769,   200,   201,   202,   203,
     770,  1253,   205,     0,   206,   207,   771,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   216,     0,   218,
       0,   219,     0,     0,     0,   772,   773,   222,     0,   223,
     224,   225,   226,   227,   228,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   774,   244,   245,   246,   247,   248,   775,   776,     0,
     777,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,     0,     0,   262,     0,   264,     0,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,   273,   778,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   779,     0,
     780,   296,   297,   298,   299,   781,     0,   301,   302,     0,
     304,     0,   782,   306,   783,   308,   309,   310,     0,   311,
     312,  1254,     0,   313,   314,   315,     0,     0,   316,   784,
       0,   319,     0,   785,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   786,   335,   336,
     787,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   788,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,     0,
     374,   375,   376,   789,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,     0,   394,   790,   396,   397,   398,   399,     0,   401,
     402,   791,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   792,   418,   793,   420,
       0,   421,   422,     0,   423,     0,   425,   426,   427,   428,
     429,     0,   794,   795,     0,     0,   432,   433,   796,   435,
     797,  1255,   437,   438,   798,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,  1144,   800,     0,   457,     0,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   801,   802,   803,   804,   805,
     806,   807,   808,   809,   810,   811,   482,   483,   484,   485,
       0,   759,     0,     0,     0,     0,     0,  1256,  1257,  1964,
       0,     0,     0,     0,     0,     0,  1965,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     3,
       4,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,     0,   112,   113,   114,   760,   761,     0,   762,
     763,     0,   120,   121,   122,   123,   124,   125,     0,     0,
     126,   127,   764,   765,   130,   131,     0,   132,   133,   134,
     135,   766,     0,     0,     0,   138,   139,   140,   141,   142,
     143,     0,   145,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   155,   156,   157,     0,     0,     0,
       0,     0,     0,     0,   159,   160,   161,   162,   163,   164,
     165,   767,   768,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,     0,   192,   193,   194,     0,   195,   196,
     197,   198,   769,   200,   201,   202,   203,   770,     0,   205,
       0,   206,   207,   771,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   216,     0,   218,     0,   219,     0,
       0,     0,   772,   773,   222,     0,   223,   224,   225,   226,
     227,   228,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   774,   244,
     245,   246,   247,   248,   775,   776,     0,   777,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,     0,
       0,   262,     0,   264,     0,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,   273,   778,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   779,     0,   780,   296,   297,
     298,   299,   781,     0,   301,   302,     0,   304,     0,   782,
     306,   783,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   784,     0,   319,     0,
     785,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   786,   335,   336,   787,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   788,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,     0,   374,   375,   376,
     789,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    26,   389,   390,   391,   392,   393,     0,   394,
     790,   396,   397,   398,   399,     0,   401,   402,   791,   404,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   792,   418,   793,   420,     0,   421,   422,
      31,   423,     0,   425,   426,   427,   428,   429,     0,   794,
     795,     0,     0,   432,   433,   796,   435,   797,     0,   437,
     438,   798,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,     0,   450,   451,   452,   453,
     454,   799,   800,     0,   457,     0,   459,   460,   461,   462,
     463,     0,     0,   464,     0,    34,   465,   466,   467,   468,
     469,   470,   801,   802,   803,   804,   805,   806,   807,   808,
     809,   810,   811,   482,   483,   484,   485,     0,   512,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   590,    95,    96,    97,    98,    99,   100,
     101,   102,   617,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,   131,     0,   132,   133,   134,   135,   136,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   216,     0,   218,     0,   219,     0,     0,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,     0,     0,   262,     0,
     264,     0,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   514,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,     0,   295,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    26,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,     0,   401,   402,   403,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     516,   418,   419,   420,     0,   421,   422,    31,   423,     0,
     425,   426,   427,   428,   429,     0,   618,   431,     0,     0,
     619,   433,   434,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,   589,   456,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,    34,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,     0,   512,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     590,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     103,   104,   105,     0,     0,     0,     0,     0,     0,     0,
     106,   107,     0,   108,   109,   110,     0,   112,   113,   114,
     115,   116,     0,   118,   119,     0,   120,   121,   122,   123,
     124,   125,     0,     0,   126,   127,   128,   129,   130,   131,
       0,   132,   133,   134,   135,   136,     0,     0,     0,   138,
     139,   140,   141,   142,   143,     0,   145,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   155,   156,
     157,     0,     0,     0,     0,     0,     0,     0,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,     0,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,     0,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,     0,   211,     0,     0,     0,   214,   215,   216,     0,
     218,     0,   219,     0,     0,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,     0,     0,   262,     0,   264,     0,     0,
     266,   267,   268,     0,     0,   269,   270,   271,   272,   273,
     514,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
       0,   295,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    26,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,     0,
     401,   402,   403,   404,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   516,   418,   419,
     420,     0,   421,   422,    31,   423,     0,   425,   426,   427,
     428,   429,     0,   430,   431,     0,     0,   432,   433,   434,
     435,   436,     0,   437,   438,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,     0,
     450,   451,   452,   453,   454,   589,   456,     0,   457,     0,
     459,   460,   461,   462,   463,     0,     0,   464,     0,    34,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,     0,   512,    35,   594,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   590,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,   131,     0,   132,   133,
     134,   135,   136,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,     0,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   514,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,   295,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,     0,   401,   402,   403,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   516,   418,   419,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,     0,   512,
       0,   594,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   938,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,     0,     0,     0,   106,   107,     0,   108,   109,   110,
       0,   112,   113,   114,   115,   116,     0,   118,   119,     0,
     120,   121,   122,   123,   124,   125,     0,     0,   126,   127,
     128,   129,   130,   131,     0,   132,   133,   134,   135,   136,
       0,     0,     0,   138,   139,   140,   141,   142,   143,     0,
     145,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,     0,   155,   156,   157,     0,     0,     0,     0,     0,
       0,     0,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,     0,   192,   193,   194,     0,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   216,     0,   218,     0,   219,     0,     0,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,     0,     0,   262,
       0,   264,     0,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,   273,   514,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,     0,   295,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,     0,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
       0,   389,   390,   391,   392,   393,     0,   394,   395,   396,
     397,   398,   399,     0,   401,   402,   403,   404,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   516,   418,   419,   420,     0,   421,   422,     0,   423,
       0,   425,   426,   427,   428,   429,     0,   430,   431,     0,
       0,   432,   433,   434,   435,   436,     0,   437,   438,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,     0,     0,   450,   451,   452,   453,   454,   455,
     456,     0,   457,     0,   459,   460,   461,   462,   463,     0,
       0,   464,     0,     0,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,     0,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2602,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   136,     0,     0,     0,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,     0,   512,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1677,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,     0,     0,     0,   106,   107,
       0,   108,   109,   110,     0,   112,   113,   114,   115,   116,
       0,   118,   119,     0,   120,   121,   122,   123,   124,   125,
       0,     0,   126,   127,   128,   129,   130,   131,     0,   132,
     133,   134,   135,   136,     0,     0,     0,   138,   139,   140,
     141,   142,   143,     0,   145,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   155,   156,   157,     0,
       0,     0,     0,     0,     0,     0,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,     0,   192,   193,   194,     0,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   216,     0,   218,     0,
     219,     0,     0,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,     0,     0,   262,     0,   264,     0,     0,   266,   267,
     268,     0,     0,   269,   270,   271,   272,   273,   514,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,     0,   295,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
       0,   305,   306,   307,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,   317,     0,
     319,     0,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,     0,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,     0,   389,   390,   391,   392,   393,
       0,   394,   395,   396,   397,   398,   399,     0,   401,   402,
     403,   404,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   516,   418,   419,   420,     0,
     421,   422,     0,   423,     0,   425,   426,   427,   428,   429,
       0,   430,   431,     0,     0,   432,   433,   434,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,     0,   450,   451,
     452,   453,   454,   455,   456,     0,   457,     0,   459,   460,
     461,   462,   463,     0,     0,   464,     0,     0,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,     0,
     512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1787,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,     0,     0,   138,   139,   140,   141,   142,   143,
       0,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   155,   156,   157,     0,     0,     0,     0,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   216,     0,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,     0,     0,
     262,     0,   264,     0,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,   514,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,     0,   295,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,     0,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   516,   418,   419,   420,     0,   421,   422,     0,
     423,     0,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,     0,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
    2457,  1252,   561,     0,     0,  1637,   835,     0,     0,     0,
       0,     0,  2337,  1638,  1639,  1640,    95,    96,    97,    98,
      99,   100,   101,   102,  1070,   103,   104,   105,  1071,  1072,
    1073,  1074,  1075,  1076,  1077,   106,   107,  1078,   108,   109,
     110,  2458,   112,   113,   114,     0,   680,  2459,   682,   683,
    1079,   120,   121,   122,   123,   124,   125,  1080,  1081,   126,
     127,   684,   685,   130,   131,  1082,   132,   133,   134,   135,
       0,  1083,  2460,  1084,   138,   139,   140,   141,   142,   143,
    2461,   145,   146,   147,  1085,   148,   149,   150,   151,   152,
     153,  1086,  2462,   155,   156,   157,  1087,  1088,  1089,  2463,
    1090,  1091,  1092,   159,   160,   161,   162,   163,   164,   165,
     690,   691,   168,  1093,   169,  1094,   170,   171,   172,   173,
     174,   175,  1095,   176,   177,   178,   179,   180,   181,   182,
    1096,  1097,   183,   184,   692,   186,   187,   188,  1098,   189,
     190,   191,  1099,   192,   193,   194,  1100,   195,   196,   197,
     198,     0,   200,   201,   202,   203,     0,  1101,   205,  1102,
     206,   207,   693,   209,  1103,   210,  1104,   211,  2464,  1105,
    2465,   214,   215,   216,  2466,   218,  1106,   219,  1107,  1108,
    1109,     0,     0,   222,  1110,   223,   224,   225,   226,   227,
     228,   229,  2467,   231,   232,   233,   234,  1111,   235,   236,
     237,   238,   239,   240,  1112,   241,  2468,     0,   244,   245,
     246,   247,   248,   700,   701,  1113,   702,  1114,   252,  2469,
    2470,   255,  2471,   257,   258,   259,   260,   261,  1115,  1116,
     262,  2472,   264,  2473,  1117,   266,   267,   268,  1118,  1119,
     269,   270,   271,   272,   273,  2474,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   709,  2475,   711,   296,   297,   298,
     299,  2476,  1120,   301,   302,  2477,   304,  1121,     0,   306,
     713,   308,   309,   310,  1122,   311,   312,  1123,  1124,  2478,
     314,   315,  1125,  1126,   316,     0,  2479,   319,  2480,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1127,   332,   333,     0,   335,   336,     0,   338,   339,   340,
    1128,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   716,   353,   354,   355,   356,  1129,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,  1130,   371,   372,  2481,   374,   375,   376,   718,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,  1131,   389,   390,   391,   392,   393,  1132,   394,  2482,
     396,   397,   398,   399,  2483,   401,   402,   721,   404,  1133,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,  2484,   418,     0,   420,  1134,   421,   422,  1135,
     423,  2485,   425,   426,   427,   428,   429,  1136,   724,   725,
    1137,  1138,   432,   433,     0,   435,     0,  1139,   437,   438,
    2486,   440,   441,   442,   443,   444,  1140,  1141,   445,   446,
     447,   448,   449,  1142,  1143,   450,   451,   452,   453,   454,
       0,   727,  1145,   457,  2487,   459,   460,   461,   462,   463,
    1146,  1147,   464,  1148,  1149,   465,   466,   467,   468,   469,
     470,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   482,   483,   484,   485,     0,   512,     0,  1641,
    1642,  1643,  1637,  2488,  2489,  1646,  1647,  1648,  1649,     0,
    1638,  1639,  1640,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,     0,
       0,     0,   106,   107,     0,   108,   109,   110,     0,   112,
     113,   114,   115,   116,     0,   118,   119,     0,   120,   121,
     122,   123,   124,   125,     0,     0,   126,   127,   128,   129,
     130,   131,     0,   132,   133,   134,   135,   136,     0,     0,
       0,   138,   139,   140,   141,   142,   143,     0,   145,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     155,   156,   157,     0,     0,     0,     0,     0,     0,     0,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
       0,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,     0,
     192,   193,   194,     0,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     216,     0,   218,     0,   219,     0,     0,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,     0,     0,   262,     0,   264,
       0,     0,   266,   267,   268,     0,     0,   269,   270,   271,
     272,   273,   514,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,     0,   295,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,     0,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,     0,   389,
     390,   391,   392,   393,     0,   394,   395,   396,   397,   398,
     399,     0,   401,   402,   403,   404,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   516,
     418,   419,   420,     0,   421,   422,     0,   423,     0,   425,
     426,   427,   428,   429,     0,   430,   431,     0,     0,   432,
     433,   434,   435,   436,     0,   437,   438,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,   455,   456,     0,
     457,     0,   459,   460,   461,   462,   463,     0,     0,   464,
       0,     0,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,     0,     0,     0,  1641,  1642,  1643,     0,
    1644,  1645,  1646,  1647,  1648,  1649,  1328,     0,     0,  1329,
       0,     0,     0,     0,  1330,  1331,  1332,     0,     0,     0,
       0,     0,     0,     0,     0,  1328,     0,     0,  1329,     0,
       0,  1333,     0,  1330,  1331,  1332,     0,     0,     0,  1335,
       0,     0,     0,     0,  1328,     0,  1336,  1329,     0,     0,
    1333,     0,  1330,  1331,  1332,     0,     0,     0,  1335,     0,
       0,     0,     0,     0,     0,  1336,     0,     0,     0,  1333,
       0,     0,  1337,  1328,     0,     0,  1329,  1335,     0,     0,
       0,  1330,  1331,  1332,  1336,     0,     0,     0,     0,     0,
       0,  1337,  1328,     0,     0,  1329,     0,     0,  1333,     0,
    1330,  1331,  1332,     0,     0,     0,  1335,     0,     0,     0,
    1337,     0,     0,  1336,     0,     0,     0,  1333,     0,     0,
       0,     0,     0,     0,     0,  1335,     0,     0,     0,     0,
       0,     0,  1336,     0,     0,     0,     0,     0,     0,  1337,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1328,     0,     0,  1329,     0,     0,  1337,     0,
    1330,  1331,  1332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1338,     0,  1333,     0,     0,
       0,     0,     0,     0,     0,  1335,     0,     0,     0,     0,
       0,     0,  1336,  1339,  1338,     0,     0,     0,  1340,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1339,  1338,     0,     0,     0,  1340,  1337,     0,
    1341,  1342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1339,     0,     0,  1343,     0,  1340,     0,     0,  1341,
    1342,     0,  1338,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1343,     0,     0,     0,     0,  1341,  1342,
    1339,  1338,     0,     0,     0,  1340,     0,     0,     0,     0,
       0,     0,  1343,  1344,     0,     0,  1345,     0,     0,  1339,
       0,     0,     0,     0,  1340,     0,     0,  1341,  1342,     0,
    1346,     0,  1344,  1347,     0,  1345,     0,     0,     0,     0,
       0,  1343,     0,     0,     0,     0,  1341,  1342,     0,  1346,
       0,  1344,  1347,     0,  1345,     0,     0,     0,     0,     0,
    1343,  1338,     0,     0,     0,     0,     0,     0,  1346,     0,
       0,  1347,     0,     0,     0,     0,     0,     0,     0,  1339,
    1344,     0,     0,  1345,  1340,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1346,     0,  1344,
    1347,     0,  1345,     0,     0,     0,  1341,  1342,     0,     0,
       0,     0,     0,     0,     0,     0,  1346,     0,     0,  1347,
    1343,     0,     0,     0,     0,  1348,     0,  1328,     0,     0,
    1329,     0,     0,     0,     0,  1330,  1331,  1332,     0,     0,
       0,     0,     0,     0,  1348,     0,     0,     0,     0,     0,
       0,     0,  1333,     0,     0,     0,     0,     0,     0,  1344,
    1335,     0,  1345,  1348,     0,     0,     0,  1336,     0,     0,
       0,     0,     0,     0,     0,     0,  1346,     0,     0,  1347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1348,  1337,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1349,     0,     0,
    1350,  1351,  1352,     0,  1353,  1354,  1355,  1356,  1357,  1358,
       0,     0,     0,     0,  2421,     0,  1349,     0,     0,  1350,
    1351,  1352,     0,  1353,  1354,  1355,  1356,  1357,  1358,     0,
       0,     0,     0,  2550,     0,  1349,     0,     0,  1350,  1351,
    1352,  1348,  1353,  1354,  1355,  1356,  1357,  1358,     0,     0,
       0,     0,  2572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1349,     0,  1338,  1350,  1351,  1352,
       0,  1353,  1354,  1355,  1356,  1357,  1358,     0,     0,     0,
       0,  2738,     0,  1349,  1339,     0,  1350,  1351,  1352,  1340,
    1353,  1354,  1355,  1356,  1357,  1358,     0,     0,     0,     0,
    2998,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1341,  1342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1343,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1349,     0,     0,  1350,  1351,  1352,     0,
    1353,  1354,  1355,  1356,  1357,  1358,     0,     0,     0,     0,
    3010,     0,     0,     0,  1344,     0,     0,  1345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1346,     0,     0,  1347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1349,  1069,
       0,  1350,  1351,  1352,     0,  1353,  1354,  1355,  1356,  1357,
    1358,     0,     0,  1510,     0,    95,    96,    97,    98,    99,
     100,   101,   102,  1070,   103,   104,   105,  1071,  1072,  1073,
    1074,  1075,  1076,  1077,   106,   107,  1078,   108,   109,   110,
       0,   112,   113,   114,   760,   761,     0,   762,   763,  1079,
     120,   121,   122,   123,   124,   125,  1080,  1081,   126,   127,
     764,   765,   130,   131,  1082,   132,   133,   134,   135,   766,
    1083,     0,  1084,   138,   139,   140,   141,   142,   143,     0,
     145,   146,   147,  1085,   148,   149,   150,   151,   152,   153,
    1086,     0,   155,   156,   157,  1087,  1088,  1089,     0,  1090,
    1091,  1092,   159,   160,   161,   162,   163,   164,   165,   767,
     768,   168,  1093,   169,  1094,   170,   171,   172,   173,   174,
     175,  1095,   176,   177,   178,   179,   180,   181,   182,  1096,
    1097,   183,   184,   185,   186,   187,   188,  1098,   189,   190,
     191,  1099,   192,   193,   194,  1100,   195,   196,   197,   198,
     769,   200,   201,   202,   203,   770,  1101,   205,  1102,   206,
     207,   771,   209,  1103,   210,  1104,   211,     0,  1105,     0,
     214,   215,   216,     0,   218,  1106,   219,  1107,  1108,  1109,
     772,   773,   222,  1110,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,  1111,   235,   236,   237,
     238,   239,   240,  1112,   241,     0,   774,   244,   245,   246,
     247,   248,   775,   776,  1113,   777,  1114,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,  1115,  1116,   262,
       0,   264,     0,  1117,   266,   267,   268,  1118,  1119,   269,
     270,   271,   272,   273,   778,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   779,     0,   780,   296,   297,   298,   299,
     781,  1120,   301,   302,     0,   304,  1121,   782,   306,   783,
     308,   309,   310,  1122,   311,   312,  1123,  1124,   313,   314,
     315,  1125,  1126,   316,   784,     0,   319,     0,   785,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,  1127,
     332,   333,   786,   335,   336,   787,   338,   339,   340,  1128,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   788,   353,   354,   355,   356,  1129,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,  1130,   371,   372,     0,   374,   375,   376,   789,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
    1131,   389,   390,   391,   392,   393,  1132,   394,   790,   396,
     397,   398,   399,     0,   401,   402,   791,   404,  1133,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   792,   418,   793,   420,  1134,   421,   422,  1135,   423,
       0,   425,   426,   427,   428,   429,  1136,   794,   795,  1137,
    1138,   432,   433,   796,   435,   797,  1139,   437,   438,   798,
     440,   441,   442,   443,   444,  1140,  1141,   445,   446,   447,
     448,   449,  1142,  1143,   450,   451,   452,   453,   454,  1144,
     800,  1145,   457,     0,   459,   460,   461,   462,   463,  1146,
    1147,   464,  1148,  1149,   465,   466,   467,   468,   469,   470,
     801,   802,   803,   804,   805,   806,   807,   808,   809,   810,
     811,   482,   483,   484,   485,   512,     0,     0,     0,     0,
       0,     0,     0,     0,  1761,     0,     0,     0,     0,     0,
       0,    95,    96,    97,    98,    99,   100,   101,   102,     0,
     103,   104,   105,     0,     0,     0,     0,     0,     0,     0,
     106,   107,     0,   108,   109,   110,     0,   112,   113,   114,
     115,   116,     0,   118,   119,     0,   120,   121,   122,   123,
     124,   125,     0,     0,   126,   127,   128,   129,   130,   131,
       0,   132,   133,   134,   135,   136,     0,     0,     0,   138,
     139,   140,   141,   142,   143,     0,   145,   146,   147,     0,
     148,   149,   150,   151,   152,   153,     0,     0,   155,   156,
     157,     0,     0,     0,     0,     0,     0,     0,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,     0,   169,
       0,   170,   171,   172,   173,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,     0,   192,   193,
     194,     0,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,     0,   211,     0,     0,     0,   214,   215,   216,     0,
     218,     0,   219,     0,     0,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,     0,     0,   262,     0,   264,     0,     0,
     266,   267,   268,     0,     0,   269,   270,   271,   272,   273,
     514,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
       0,   295,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,     0,   371,   372,
       0,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,     0,   389,   390,   391,
     392,   393,     0,   394,   395,   396,   397,   398,   399,     0,
     401,   402,   403,   404,     0,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   516,   418,   419,
     420,     0,   421,   422,     0,   423,     0,   425,   426,   427,
     428,   429,     0,   430,   431,     0,     0,   432,   433,   434,
     435,   436,     0,   437,   438,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,   449,     0,     0,
     450,   451,   452,   453,   454,   455,   456,     0,   457,     0,
     459,   460,   461,   462,   463,     0,     0,   464,     0,     0,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   759,  1252,   561,     0,     0,     0,   835,     0,     0,
    2268,     0,     0,     0,     0,     0,     0,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,     0,   112,   113,   114,   760,   761,     0,   762,
     763,     0,   120,   121,   122,   123,   124,   125,     0,     0,
     126,   127,   764,   765,   130,   131,     0,   132,   133,   134,
     135,   766,     0,     0,     0,   138,   139,   140,   141,   142,
     143,     0,   145,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,     0,   155,   156,   157,     0,     0,     0,
       0,     0,     0,     0,   159,   160,   161,   162,   163,   164,
     165,   767,   768,   168,  1387,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,     0,   192,   193,   194,     0,   195,   196,
     197,   198,   769,   200,   201,   202,   203,   770,  1253,   205,
       0,   206,   207,   771,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   216,     0,   218,     0,   219,     0,
       0,     0,   772,   773,   222,     0,   223,   224,   225,   226,
     227,   228,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   774,   244,
     245,   246,   247,   248,   775,   776,     0,   777,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,     0,
       0,   262,     0,   264,     0,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,   273,   778,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   779,     0,   780,   296,   297,
     298,   299,   781,     0,   301,   302,     0,   304,     0,   782,
     306,   783,   308,   309,   310,     0,   311,   312,  1254,     0,
     313,   314,   315,     0,     0,   316,   784,     0,   319,     0,
     785,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   786,   335,   336,   787,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   788,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,     0,   374,   375,   376,
     789,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,     0,   389,   390,   391,   392,   393,     0,   394,
     790,   396,   397,   398,   399,     0,   401,   402,   791,   404,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   792,   418,   793,   420,     0,   421,   422,
       0,   423,     0,   425,   426,   427,   428,   429,     0,   794,
     795,     0,     0,   432,   433,   796,   435,   797,  1255,   437,
     438,   798,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,     0,   450,   451,   452,   453,
     454,  1144,   800,     0,   457,     0,   459,   460,   461,   462,
     463,     0,     0,   464,     0,     0,   465,   466,   467,   468,
     469,   470,   801,   802,   803,   804,   805,   806,   807,   808,
     809,   810,   811,   482,   483,   484,   485,   759,  1252,   561,
       0,     0,     0,   835,  1256,  1257,     0,     0,     0,     0,
       0,     0,     0,    95,    96,    97,    98,    99,   100,   101,
     102,     0,   103,   104,   105,     0,     0,     0,     0,     0,
       0,     0,   106,   107,     0,   108,   109,   110,     0,   112,
     113,   114,   760,   761,     0,   762,   763,     0,   120,   121,
     122,   123,   124,   125,     0,     0,   126,   127,   764,   765,
     130,   131,     0,   132,   133,   134,   135,   766,     0,     0,
       0,   138,   139,   140,   141,   142,   143,     0,   145,   146,
     147,     0,   148,   149,   150,   151,   152,   153,     0,     0,
     155,   156,   157,     0,     0,     0,     0,     0,     0,     0,
     159,   160,   161,   162,   163,   164,   165,   767,   768,   168,
    1389,   169,     0,   170,   171,   172,   173,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,     0,
     192,   193,   194,     0,   195,   196,   197,   198,   769,   200,
     201,   202,   203,   770,  1253,   205,     0,   206,   207,   771,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     216,     0,   218,     0,   219,     0,     0,     0,   772,   773,
     222,     0,   223,   224,   225,   226,   227,   228,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   774,   244,   245,   246,   247,   248,
     775,   776,     0,   777,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,     0,     0,   262,     0,   264,
       0,     0,   266,   267,   268,     0,     0,   269,   270,   271,
     272,   273,   778,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   779,     0,   780,   296,   297,   298,   299,   781,     0,
     301,   302,     0,   304,     0,   782,   306,   783,   308,   309,
     310,     0,   311,   312,  1254,     0,   313,   314,   315,     0,
       0,   316,   784,     0,   319,     0,   785,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     786,   335,   336,   787,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   788,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,     0,
     371,   372,     0,   374,   375,   376,   789,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,     0,   389,
     390,   391,   392,   393,     0,   394,   790,   396,   397,   398,
     399,     0,   401,   402,   791,   404,     0,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   792,
     418,   793,   420,     0,   421,   422,     0,   423,     0,   425,
     426,   427,   428,   429,     0,   794,   795,     0,     0,   432,
     433,   796,   435,   797,  1255,   437,   438,   798,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,   449,
       0,     0,   450,   451,   452,   453,   454,  1144,   800,     0,
     457,     0,   459,   460,   461,   462,   463,     0,     0,   464,
       0,     0,   465,   466,   467,   468,   469,   470,   801,   802,
     803,   804,   805,   806,   807,   808,   809,   810,   811,   482,
     483,   484,   485,   759,  1252,   561,     0,     0,     0,   835,
    1256,  1257,     0,     0,     0,     0,     0,     0,     0,    95,
      96,    97,    98,    99,   100,   101,   102,     0,   103,   104,
     105,     0,     0,     0,     0,     0,     0,     0,   106,   107,
       0,   108,   109,   110,     0,   112,   113,   114,   760,   761,
       0,   762,   763,     0,   120,   121,   122,   123,   124,   125,
       0,     0,   126,   127,   764,   765,   130,   131,     0,   132,
     133,   134,   135,   766,     0,     0,     0,   138,   139,   140,
     141,   142,   143,     0,   145,   146,   147,     0,   148,   149,
     150,   151,   152,   153,     0,     0,   155,   156,   157,     0,
       0,     0,     0,     0,     0,     0,   159,   160,   161,   162,
     163,   164,   165,   767,   768,   168,     0,   169,     0,   170,
     171,   172,   173,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,     0,   192,   193,   194,     0,
     195,   196,   197,   198,   769,   200,   201,   202,   203,   770,
    1253,   205,     0,   206,   207,   771,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   216,     0,   218,     0,
     219,     0,     0,     0,   772,   773,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     774,   244,   245,   246,   247,   248,   775,   776,     0,   777,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,     0,     0,   262,     0,   264,     0,     0,   266,   267,
     268,     0,     0,   269,   270,   271,   272,   273,   778,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   779,     0,   780,
     296,   297,   298,   299,   781,     0,   301,   302,     0,   304,
       0,   782,   306,   783,   308,   309,   310,     0,   311,   312,
    1254,     0,   313,   314,   315,     0,     0,   316,   784,     0,
     319,     0,   785,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   786,   335,   336,   787,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   788,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,     0,   371,   372,     0,   374,
     375,   376,   789,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,     0,   389,   390,   391,   392,   393,
       0,   394,   790,   396,   397,   398,   399,     0,   401,   402,
     791,   404,     0,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   792,   418,   793,   420,     0,
     421,   422,     0,   423,     0,   425,   426,   427,   428,   429,
       0,   794,   795,     0,     0,   432,   433,   796,   435,   797,
    1255,   437,   438,   798,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,   449,     0,     0,   450,   451,
     452,   453,   454,  1144,   800,     0,   457,     0,   459,   460,
     461,   462,   463,     0,     0,   464,     0,     0,   465,   466,
     467,   468,   469,   470,   801,   802,   803,   804,   805,   806,
     807,   808,   809,   810,   811,   482,   483,   484,   485,     0,
    1328,     0,     0,  1329,     0,     0,  1256,  1257,  1330,  1331,
    1332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1333,     0,     0,     0,  1793,
       0,     0,     0,  1335,  1328,     0,     0,  1329,     0,     0,
    1336,     0,  1330,  1331,  1332,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1333,
       0,     0,     0,     0,     0,     0,  1337,  1335,     0,     0,
       0,     0,     0,     0,  1336,     0,     0,     0,     0,     0,
       0,  1328,     0,     0,  1329,     0,     0,     0,     0,  1330,
    1331,  1332,     0,     0,     0,     0,     0,     0,     0,     0,
    1337,     0,     0,     0,     0,     0,  1333,     0,     0,     0,
       0,     0,     0,     0,  1335,     0,  1328,  1794,     0,  1329,
       0,  1336,     0,     0,  1330,  1331,  1332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1333,     0,     0,  1988,     0,     0,  1337,     0,  1335,
       0,     0,     0,     0,     0,     0,  1336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1337,     0,     0,     0,     0,  1339,     0,     0,
       0,     0,  1340,  2026,     0,     0,     0,     0,  2027,     0,
       0,     0,     0,  1338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1341,  1342,     0,     0,     0,     0,
       0,  1339,     0,     0,     0,     0,  1340,     0,  1343,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3082,
       0,     0,     0,     0,     0,     0,     0,     0,  1341,  1342,
    1338,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1343,     0,     0,     0,     0,  1344,  1339,     0,
    1345,     0,     0,  1340,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1346,  1338,     0,  1347,     0,     0,
       0,     0,     0,     0,     0,  1341,  1342,     0,     0,     0,
       0,  1344,     0,  1339,  1345,     0,     0,     0,  1340,  1343,
       0,     0,     0,     0,     0,     0,     0,     0,  1346,     0,
       0,  1347,     0,     0,     0,     0,     0,     0,     0,  1328,
    1341,  1342,  1329,     0,     0,     0,     0,  1330,  1331,  1332,
       0,     0,     0,     0,  1343,     0,     0,     0,  1344,     0,
       0,  1345,     0,     0,  1333,     0,     0,     0,     0,     0,
       0,     0,  1335,     0,     0,  1346,     0,     0,  1347,  1336,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1348,
       0,     0,     0,  1344,     0,     0,  1345,     0,     0,     0,
       0,  3083,     0,     0,     0,  1337,     0,     0,     0,     0,
    1346,     0,     0,  1347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1348,     0,     0,     0,     0,     0,     0,     0,     0,  1328,
       0,     0,  1329,     0,     0,     0,     0,  1330,  1331,  1332,
       0,  1349,     0,     0,  1350,  1351,  1352,     0,  1353,  1354,
    1355,  1356,  1357,  1358,  1333,  1348,     0,  2031,  1338,     0,
       0,     0,  1335,     0,     0,     0,     0,     0,     0,  1336,
       0,     0,     0,     0,     0,  1349,  1339,     0,  1350,  1351,
    1352,  1340,  1353,  1354,  1355,  1356,  1357,  1358,     0,     0,
       0,     0,     0,     0,     0,  1337,     0,     0,     0,     0,
       0,     0,     0,  1341,  1342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1343,     0,     0,
       0,     0,  1349,     0,     0,  1350,  1351,  1352,     0,  1353,
    1354,  1355,  1356,  1357,  1358,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1344,  1349,     0,  1345,
    1350,  1351,  1352,     0,  1353,  1354,  1355,  1356,  1357,  1358,
       0,  1328,     0,  1346,  1329,     0,  1347,     0,     0,  1330,
    1331,  1332,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2000,     0,  1333,     0,  1338,     0,
    1328,     0,     0,  1329,  1335,     0,     0,     0,  1330,  1331,
    1332,  1336,     0,     0,     0,     0,  1339,     0,     0,     0,
       0,  1340,     0,     0,     0,  1333,     0,     0,  2038,     0,
       0,     0,     0,  1335,     0,     0,     0,  1337,     0,     0,
    1336,     0,     0,  1341,  1342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1343,     0,     0,
       0,  1328,     0,     0,  1329,     0,  1337,     0,  1348,  1330,
    1331,  1332,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1333,     0,     0,     0,
       0,     0,     0,     0,  1335,     0,  1344,     0,     0,  1345,
       0,  1336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1346,     0,     0,  1347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1337,     0,     0,
       0,     0,     0,     0,     0,  2036,     0,     0,     0,     0,
    1338,     0,     0,  1328,     0,     0,  1329,     0,     0,     0,
       0,  1330,  1331,  1332,     0,     0,     0,     0,  1339,     0,
       0,     0,     0,  1340,     0,     0,     0,     0,  1333,  1338,
    1349,  2314,     0,  1350,  1351,  1352,  1335,  1353,  1354,  1355,
    1356,  1357,  1358,  1336,     0,  1341,  1342,  1339,     0,     0,
       0,     0,  1340,     0,     0,     0,     0,     0,     0,  1343,
       0,     0,     0,     0,     0,     0,     0,     0,  1348,  1337,
       0,     0,     0,     0,  1341,  1342,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1343,     0,
    1338,     0,     0,     0,     0,     0,     0,     0,  1344,     0,
       0,  1345,     0,     0,     0,     0,     0,     0,  1339,     0,
       0,     0,     0,  1340,     0,  1346,     0,     0,  1347,     0,
       0,     0,     0,     0,     0,     0,     0,  1344,     0,     0,
    1345,     0,     0,     0,     0,  1341,  1342,     0,     0,     0,
       0,     0,     0,     0,  1346,     0,     0,  1347,     0,  1343,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1349,     0,  1338,  1350,  1351,  1352,     0,  1353,  1354,  1355,
    1356,  1357,  1358,     0,     0,     0,     0,     0,  1344,  1328,
    1339,  1345,  1329,     0,     0,  1340,     0,  1330,  1331,  1332,
       0,     0,     0,     0,     0,  1346,     0,     0,  1347,     0,
    1348,     0,     0,     0,  1333,     0,     0,  1341,  1342,     0,
       0,     0,  1335,     0,     0,     0,     0,     0,     0,  1336,
       0,  1343,  1328,     0,     0,  1329,     0,     0,     0,  1348,
    1330,  1331,  1332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1337,     0,  1333,     0,     0,
       0,     0,     0,     0,     0,  1335,     0,     0,     0,     0,
    1344,     0,  1336,  1345,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1346,     0,     0,
    1347,     0,     0,     0,     0,     0,     0,     0,  1337,     0,
    1348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1349,     0,     0,  1350,  1351,  1352,     0,  1353,
    1354,  1355,  1356,  1357,  1358,     0,     0,     0,  1328,     0,
       0,  1329,     0,  2272,     0,     0,  1330,  1331,  1332,     0,
       0,  1349,     0,     0,  1350,  1351,  1352,     0,  1353,  1354,
    1355,  1356,  1357,  1358,     0,     0,     0,     0,  1338,     0,
       0,  1335,     0,     0,     0,     0,     0,     0,  1336,     0,
       0,     0,     0,     0,     0,     0,  1339,     0,     0,     0,
       0,  1340,  1348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1337,     0,     0,     0,     0,     0,
       0,  1338,  1349,  1341,  1342,  1350,  1351,  1352,     0,  1353,
    1354,  1355,  1356,  1357,  1358,     0,     0,  1343,     0,  1339,
       0,     0,     0,     0,  1340,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1341,  1342,     0,     0,
       0,     0,     0,     0,     0,     0,  1344,     0,     0,  1345,
    1343,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1346,     0,     0,  1347,     0,     0,     0,
       0,     0,     0,     0,  1349,     0,     0,  1350,  1351,  1352,
       0,  1353,  1354,  1355,  1356,  1357,  1358,  1338,     0,  1344,
       0,     0,  1345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1339,  1346,     0,     0,  1347,
    1340,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1801, -1801,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1343,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1801,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1348,  1346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1349,     0,     0,  1350,  1351,  1352,     0,  1353,  1354,  1355,
    1356,  1357,  1358,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1348,     0,     0,
       0,     0,     0,  1349,     0,     0,  1350,  1351,  1352,     0,
    1353,  1354,  1355,  1356,  1810,  1358,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1069,     0,  1696,  1349,
       0,     0,  1350,  1351,  1352,     0,  1353,  1354,  1355,  1356,
    1357,  1358,    95,    96,    97,    98,    99,   100,   101,   102,
    1070,   103,   104,   105,  1071,  1072,  1073,  1074,  1075,  1076,
    1077,   106,   107,  1078,   108,   109,   110,     0,   112,   113,
     114,   760,   761,     0,   762,   763,  1079,   120,   121,   122,
     123,   124,   125,  1080,  1081,   126,   127,   764,   765,   130,
     131,  1082,   132,   133,   134,   135,   766,  1083,     0,  1084,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
    1085,   148,   149,   150,   151,   152,   153,  1086,     0,   155,
     156,   157,  1087,  1088,  1089,     0,  1090,  1091,  1092,   159,
     160,   161,   162,   163,   164,   165,   767,   768,   168,  1093,
     169,  1094,   170,   171,   172,   173,   174,   175,  1095,   176,
     177,   178,   179,   180,   181,   182,  1096,  1097,   183,   184,
     185,   186,   187,   188,  1098,   189,   190,   191,  1099,   192,
     193,   194,  1100,   195,   196,   197,   198,   769,   200,   201,
     202,   203,   770,  1101,   205,  1102,   206,   207,   771,   209,
    1103,   210,  1104,   211,     0,  1105,     0,   214,   215,   216,
       0,   218,  1106,   219,  1107,  1108,  1109,   772,   773,   222,
    1110,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,  1111,   235,   236,   237,   238,   239,   240,
    1112,   241,     0,   774,   244,   245,   246,   247,   248,   775,
     776,  1113,   777,  1114,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,  1115,  1116,   262,     0,   264,     0,
    1117,   266,   267,   268,  1118,  1119,   269,   270,   271,   272,
     273,   778,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     779,     0,   780,   296,   297,   298,   299,   781,  1120,   301,
     302,     0,   304,  1121,   782,   306,   783,   308,   309,   310,
    1122,   311,   312,  1123,  1124,   313,   314,   315,  1125,  1126,
     316,   784,     0,   319,     0,   785,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,  1127,   332,   333,   786,
     335,   336,   787,   338,   339,   340,  1128,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   788,   353,
     354,   355,   356,  1129,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,  1130,   371,
     372,     0,   374,   375,   376,   789,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,  1131,   389,   390,
     391,   392,   393,  1132,   394,   790,   396,   397,   398,   399,
       0,   401,   402,   791,   404,  1133,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   792,   418,
     793,   420,  1134,   421,   422,  1135,   423,     0,   425,   426,
     427,   428,   429,  1136,   794,   795,  1137,  1138,   432,   433,
     796,   435,   797,  1139,   437,   438,   798,   440,   441,   442,
     443,   444,  1140,  1141,   445,   446,   447,   448,   449,  1142,
    1143,   450,   451,   452,   453,   454,  1144,   800,  1145,   457,
       0,   459,   460,   461,   462,   463,  1146,  1147,   464,  1148,
    1149,   465,   466,   467,   468,   469,   470,   801,   802,   803,
     804,   805,   806,   807,   808,   809,   810,   811,   482,   483,
     484,   485,  1069,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,  1070,   103,   104,   105,
    1071,  1072,  1073,  1074,  1075,  1076,  1077,   106,   107,  1078,
     108,   109,   110,     0,   112,   113,   114,   760,   761,     0,
     762,   763,  1079,   120,   121,   122,   123,   124,   125,  1080,
    1081,   126,   127,   764,   765,   130,   131,  1082,   132,   133,
     134,   135,   766,  1083,     0,  1084,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,  1085,   148,   149,   150,
     151,   152,   153,  1086,     0,   155,   156,   157,  1087,  1088,
    1089,     0,  1090,  1091,  1092,   159,   160,   161,   162,   163,
     164,   165,   767,   768,   168,  1093,   169,  1094,   170,   171,
     172,   173,   174,   175,  1095,   176,   177,   178,   179,   180,
     181,   182,  1096,  1097,   183,   184,   185,   186,   187,   188,
    1098,   189,   190,   191,  1099,   192,   193,   194,  1100,   195,
     196,   197,   198,   769,   200,   201,   202,   203,   770,  1101,
     205,  1102,   206,   207,   771,   209,  1103,   210,  1104,   211,
       0,  1105,     0,   214,   215,   216,     0,   218,  1106,   219,
    1107,  1108,  1109,   772,   773,   222,  1110,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,  1111,
     235,   236,   237,   238,   239,   240,  1112,   241,     0,   774,
     244,   245,   246,   247,   248,   775,   776,  1113,   777,  1114,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
    1115,  1116,   262,     0,   264,     0,  1117,   266,   267,   268,
    1118,  1119,   269,   270,   271,   272,   273,   778,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   779,     0,   780,   296,
     297,   298,   299,   781,  1120,   301,   302,     0,   304,  1121,
     782,   306,   783,   308,   309,   310,  1122,   311,   312,  1123,
    1124,   313,   314,   315,  1125,  1126,   316,   784,     0,   319,
       0,   785,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1127,   332,   333,   786,   335,   336,   787,   338,
     339,   340,  1128,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   788,   353,   354,   355,   356,  1129,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,  1130,   371,   372,     0,   374,   375,
     376,   789,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,  1131,   389,   390,   391,   392,   393,  1132,
     394,   790,   396,   397,   398,   399,     0,   401,   402,   791,
     404,  1133,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   792,   418,   793,   420,  1134,   421,
     422,  1135,   423,     0,   425,   426,   427,   428,   429,  1136,
     794,   795,  1137,  1138,   432,   433,   796,   435,   797,  1139,
     437,   438,   798,   440,   441,   442,   443,   444,  1140,  1141,
     445,   446,   447,   448,   449,  1142,  1143,   450,   451,   452,
     453,   454,  1144,   800,  1145,   457,     0,   459,   460,   461,
     462,   463,  1146,  1147,   464,  1148,  1149,   465,   466,   467,
     468,   469,   470,   801,   802,   803,   804,   805,   806,   807,
     808,   809,   810,   811,   482,   483,   484,   485,  1069,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,  1845,   100,
     101,   102,  1070,   103,   104,   105,  1071,  1072,  1073,  1074,
    1075,  1076,  1077,   106,   107,  1078,   108,   109,   110,     0,
     112,   113,   114,   760,   761,     0,   762,   763,  1079,   120,
     121,   122,   123,   124,   125,  1080,  1081,   126,   127,   764,
     765,   130,   131,  1082,   132,   133,   134,   135,   766,  1083,
       0,  1084,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,  1085,   148,   149,   150,   151,   152,   153,  1086,
       0,   155,   156,   157,  1087,  1088,  1089,     0,  1090,  1091,
    1092,   159,   160,   161,   162,   163,   164,   165,   767,   768,
     168,  1093,   169,  1094,   170,   171,   172,   173,   174,   175,
    1095,   176,   177,   178,   179,   180,   181,   182,  1096,  1097,
     183,   184,   185,  1846,   187,   188,  1098,   189,   190,   191,
    1099,   192,   193,   194,  1100,   195,   196,   197,   198,   769,
     200,   201,   202,   203,   770,  1101,   205,  1102,   206,   207,
     771,   209,  1103,   210,  1104,   211,     0,  1105,     0,   214,
     215,   216,     0,   218,  1106,   219,  1107,  1108,  1109,   772,
     773,   222,  1110,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,  1111,   235,   236,   237,   238,
     239,   240,  1112,   241,     0,   774,   244,   245,   246,   247,
     248,   775,   776,  1113,   777,  1114,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,  1115,  1116,   262,     0,
     264,     0,  1117,   266,   267,   268,  1118,  1119,   269,   270,
     271,   272,   273,   778,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   779,     0,   780,   296,   297,   298,   299,   781,
    1120,   301,   302,     0,   304,  1121,   782,   306,   783,   308,
     309,   310,  1122,   311,   312,  1123,  1124,   313,   314,   315,
    1125,  1126,   316,   784,     0,   319,     0,   785,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,  1127,   332,
     333,   786,   335,   336,   787,   338,   339,   340,  1128,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     788,   353,   354,   355,   356,  1129,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
    1130,   371,   372,     0,   374,   375,   376,   789,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,  1131,
     389,   390,   391,   392,   393,  1132,  1847,   790,   396,   397,
     398,   399,     0,   401,   402,   791,   404,  1133,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     792,   418,   793,   420,  1134,   421,   422,  1135,   423,     0,
     425,   426,   427,   428,   429,  1136,   794,   795,  1137,  1138,
     432,   433,   796,   435,   797,  1139,   437,   438,   798,   440,
     441,   442,   443,   444,  1140,  1141,   445,   446,   447,   448,
     449,  1142,  1143,   450,   451,   452,   453,   454,  1144,   800,
    1145,   457,     0,   459,   460,   461,   462,   463,  1146,  1147,
     464,  1148,  1149,   465,   466,   467,   468,   469,   470,   801,
     802,   803,   804,   805,   806,   807,   808,   809,   810,   811,
     482,   483,   484,   485,    94,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,   842,   126,   127,   128,   129,   130,   131,     0,
     132,   133,   134,   135,   845,     0,   846,     0,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,   154,   155,   156,   157,
     847,   848,   849,   850,   851,   852,   853,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     858,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   219,     0,     0,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,     0,   262,   263,   264,   265,     0,   266,
     267,   268,   866,   867,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
     304,     0,   872,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   875,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   876,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,   879,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   881,   420,
       0,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,     0,   430,   431,     0,     0,   432,   433,   884,   435,
     885,     0,   437,   438,   887,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,   888,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
      94,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,   137,     0,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,   154,   155,   156,   157,     0,     0,     0,   158,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     262,   263,   264,   265,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,     0,   301,   302,   303,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,     0,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,  1448,   132,   133,   134,   135,   136,     0,     0,  1449,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
    1450,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,  1451,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1452,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,  1453,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,  1454,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,   131,  1448,   132,   133,
     134,   135,   136,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,  1450,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,  1451,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,  1914,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   514,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,   295,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,  1453,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,     0,   401,   402,   403,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   516,   418,   419,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,   444,     0,  1454,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   759,     0,
     561,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   760,   761,     0,   762,   763,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   764,
     765,   130,   131,     0,   132,   133,   134,   135,   766,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   767,   768,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   769,
     200,   201,   202,   203,   770,  1253,   205,     0,   206,   207,
     771,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   216,     0,   218,     0,   219,     0,     0,     0,   772,
     773,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   774,   244,   245,   246,   247,
     248,   775,   776,     0,   777,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,     0,     0,   262,     0,
     264,     0,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   778,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   779,     0,   780,   296,   297,   298,   299,   781,
       0,   301,   302,     0,   304,     0,   782,   306,   783,   308,
     309,   310,     0,   311,   312,  1254,     0,   313,   314,   315,
       0,     0,   316,   784,     0,   319,     0,   785,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   786,   335,   336,   787,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     788,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,     0,   374,   375,   376,   789,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   790,   396,   397,
     398,   399,     0,   401,   402,   791,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     792,   418,   793,   420,     0,   421,   422,     0,   423,     0,
     425,   426,   427,   428,   429,     0,   794,   795,     0,     0,
     432,   433,   796,   435,   797,  1255,   437,   438,   798,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,  1144,   800,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   801,
     802,   803,   804,   805,   806,   807,   808,   809,   810,   811,
     482,   483,   484,   485,   512,     0,   594,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     3,     4,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,   131,     0,
     132,   133,   134,   135,   136,     0,     0,     0,   138,   139,
     140,   141,   142,   143,     0,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   155,   156,   157,
       0,     0,     0,     0,     0,     0,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   216,     0,   218,
       0,   219,     0,     0,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,     0,     0,   262,     0,   264,     0,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,   273,   514,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     295,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,     0,   401,
     402,   403,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   516,   418,   419,   420,
       0,   421,   422,     0,   423,     0,   425,   426,   427,   428,
     429,     0,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,   437,   438,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,     0,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     512,     0,   594,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,     0,     0,   138,   139,   140,   141,   142,   143,
       0,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   155,   156,   157,     0,     0,     0,     0,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   216,     0,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,     0,     0,
     262,     0,   264,     0,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,   514,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,     0,   295,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,   595,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,     0,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   516,   418,   419,   420,     0,   421,   422,     0,
     423,     0,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,     0,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   512,     0,   594,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   136,     0,     0,     0,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   639,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   595,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   759,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       3,     4,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   760,   761,     0,
     762,   763,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   764,   765,   130,   131,     0,   132,   133,
     134,   135,   766,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   767,   768,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   769,   200,   201,   202,   203,   770,     0,
     205,     0,   206,   207,   771,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   772,   773,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   774,
     244,   245,   246,   247,   248,   775,   776,     0,   777,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,     0,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   778,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   779,     0,   780,   296,
     297,   298,   299,   781,     0,   301,   302,     0,   304,     0,
     782,   306,   783,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   784,     0,   319,
       0,   785,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   786,   335,   336,   787,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   788,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   789,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
     394,   790,   396,   397,   398,   399,     0,   401,   402,   791,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   792,   418,   793,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     794,   795,     0,     0,   432,   433,   796,   435,   797,     0,
     437,   438,   798,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,  1144,   800,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   801,   802,   803,   804,   805,   806,   807,
     808,   809,   810,   811,   482,   483,   484,   485,   512,     0,
     594,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,   131,     0,   132,   133,   134,   135,   136,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   216,     0,  1749,     0,   219,     0,     0,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,     0,     0,   262,     0,
     264,     0,     0,   266,   267,  1750,     0,     0,   269,   270,
     271,   272,   273,   514,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,     0,   295,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,     0,   401,   402,   403,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     516,   418,   419,   420,     0,   421,   422,  1751,   423,     0,
     425,  1752,   427,  1753,   429,     0,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,  1754,   448,
     449,     0,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   512,  2746,     0,     0,     0,     0,
    2747,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,   131,     0,
     132,   133,   134,   135,   136,     0,     0,     0,   138,   139,
     140,   141,   142,   143,     0,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   155,   156,   157,
       0,     0,     0,     0,     0,     0,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   216,     0,   218,
       0,   219,     0,     0,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,     0,     0,   262,     0,   264,     0,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,   273,   514,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     295,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,     0,   401,
     402,   403,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   516,   418,   419,   420,
       0,   421,   422,     0,   423,     0,   425,   426,   427,   428,
     429,     0,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,   437,   438,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,     0,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,   513,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,     0,     0,   138,   139,   140,   141,   142,   143,
       0,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   155,   156,   157,     0,     0,     0,     0,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   216,     0,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,     0,     0,
     262,     0,   264,     0,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,   514,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,     0,   295,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   515,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,     0,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   516,   418,   419,   420,     0,   421,   422,     0,
     423,     0,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,     0,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   512,     0,   561,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   136,     0,     0,     0,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,   568,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,   131,     0,   132,   133,
     134,   135,   136,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,     0,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   514,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,   295,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,     0,   401,   402,   403,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   516,   418,   419,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     569,   431,     0,     0,   570,   433,   434,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   512,     0,
     594,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,   131,     0,   132,   133,   134,   135,   136,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   216,     0,   218,     0,   219,     0,     0,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   634,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,     0,     0,   262,     0,
     264,     0,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   514,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,     0,   295,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,     0,   401,   402,   403,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     516,   418,   419,   420,     0,   421,   422,     0,   423,     0,
     425,   426,   427,   428,   429,     0,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   512,     0,   594,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,   131,     0,
     132,   133,   134,   135,   136,     0,     0,     0,   138,   139,
     140,   141,   142,   143,     0,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   155,   156,   157,
       0,     0,     0,     0,     0,     0,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   216,     0,   218,
       0,   219,     0,     0,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   637,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,     0,     0,   262,     0,   264,     0,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,   273,   514,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     295,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,     0,   401,
     402,   403,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   516,   418,   419,   420,
       0,   421,   422,     0,   423,     0,   425,   426,   427,   428,
     429,     0,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,   437,   438,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,     0,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     512,     0,   594,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,     0,     0,   138,   139,   140,   141,   142,   143,
       0,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   155,   156,   157,     0,     0,     0,     0,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   216,     0,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     641,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,     0,     0,
     262,     0,   264,     0,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,   514,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,     0,   295,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,     0,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   516,   418,   419,   420,     0,   421,   422,     0,
     423,     0,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,     0,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   512,     0,   594,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   136,     0,     0,     0,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,   670,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,   131,     0,   132,   133,
     134,   135,   136,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,     0,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   514,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,   295,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,     0,   401,   402,   403,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   516,   418,   419,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   512,     0,
     594,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,   131,     0,   132,   133,   134,   135,   136,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   216,     0,   218,     0,   219,     0,     0,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,  1167,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,     0,     0,   262,     0,
     264,     0,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   514,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,     0,   295,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,     0,   401,   402,   403,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     516,   418,   419,   420,     0,   421,   422,     0,   423,     0,
     425,   426,   427,   428,   429,     0,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   512,     0,   594,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,   131,     0,
     132,   133,   134,   135,   136,     0,     0,     0,   138,   139,
     140,   141,   142,   143,     0,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   155,   156,   157,
       0,     0,     0,     0,     0,     0,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   216,     0,   218,
       0,   219,     0,     0,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,  1169,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,     0,     0,   262,     0,   264,     0,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,   273,   514,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     295,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,     0,   401,
     402,   403,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   516,   418,   419,   420,
       0,   421,   422,     0,   423,     0,   425,   426,   427,   428,
     429,     0,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,   437,   438,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,     0,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     512,     0,   594,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,     0,     0,   138,   139,   140,   141,   142,   143,
       0,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   155,   156,   157,     0,     0,     0,     0,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   216,     0,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
    1581,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,     0,     0,
     262,     0,   264,     0,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,   514,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,     0,   295,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,     0,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   516,   418,   419,   420,     0,   421,   422,     0,
     423,     0,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,     0,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,  2355,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   136,     0,     0,     0,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,  2369,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,   131,     0,   132,   133,
     134,   135,   136,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,     0,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   514,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,   295,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,     0,   401,   402,   403,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   516,   418,   419,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   512,     0,
     594,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,   131,     0,   132,   133,   134,   135,   136,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   216,     0,   218,     0,   219,     0,     0,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,  2522,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,     0,     0,   262,     0,
     264,     0,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   514,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,     0,   295,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,     0,   401,   402,   403,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     516,   418,   419,   420,     0,   421,   422,     0,   423,     0,
     425,   426,   427,   428,   429,     0,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   512,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,   131,     0,
     132,   133,   134,   135,   136,     0,     0,     0,   138,   139,
     140,   141,   142,   143,     0,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   155,   156,   157,
       0,     0,     0,     0,     0,     0,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   216,     0,   218,
       0,   219,     0,     0,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,     0,     0,   262,     0,   264,     0,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,   273,   514,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     295,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,     0,   401,
     402,   403,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   516,   418,   419,   420,
       0,   421,   422,     0,   423,     0,   425,   426,   427,   428,
     429,     0,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,   437,   438,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,     0,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,     0,     0,   138,   139,   140,   141,   142,   143,
       0,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   155,   156,   157,     0,     0,     0,     0,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   216,     0,   580,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,     0,     0,
     262,     0,   264,     0,     0,   266,   267,   581,     0,     0,
     269,   270,   271,   272,   273,   514,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,     0,   295,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   582,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   583,     0,   394,   395,
     396,   397,   398,   399,     0,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   516,   418,   419,   420,     0,   421,   422,     0,
     423,     0,   425,   426,   427,   428,   429,     0,   584,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,     0,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   136,     0,     0,     0,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   604,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,   131,     0,   132,   133,
     134,   135,   136,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   660,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,     0,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   514,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,   295,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,     0,   401,   402,   403,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   516,   418,   419,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   512,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,   131,     0,   132,   133,   134,   135,   136,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   216,     0,   218,     0,   219,     0,     0,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   747,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,     0,     0,   262,     0,
     264,     0,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   514,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,     0,   295,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,     0,   401,   402,   403,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     516,   418,   419,   420,     0,   421,   422,     0,   423,     0,
     425,   426,   427,   428,   429,     0,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   512,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,   131,     0,
     132,   133,   134,   135,   136,     0,     0,     0,   138,   139,
     140,   141,   142,   143,     0,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   155,   156,   157,
       0,     0,     0,     0,     0,     0,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   216,     0,   218,
       0,   219,     0,     0,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   750,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,     0,     0,   262,     0,   264,     0,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,   273,   514,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     295,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,     0,   401,
     402,   403,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   516,   418,   419,   420,
       0,   421,   422,     0,   423,     0,   425,   426,   427,   428,
     429,     0,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,   437,   438,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,     0,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,     0,     0,   138,   139,   140,   141,   142,   143,
       0,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   155,   156,   157,     0,     0,     0,     0,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   216,     0,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     753,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,     0,     0,
     262,     0,   264,     0,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,   514,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,     0,   295,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,     0,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   516,   418,   419,   420,     0,   421,   422,     0,
     423,     0,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,     0,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   136,     0,     0,     0,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     582,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   584,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,  1404,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,   131,     0,   132,   133,
     134,   135,   136,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,     0,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   514,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,   295,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
       0,   395,   396,   397,   398,   399,     0,   401,   402,   403,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   516,   418,   419,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   512,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,     0,
     112,   113,   114,   115,   116,     0,   118,   119,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   128,
     129,   130,   131,     0,   132,   133,   134,   135,   136,     0,
       0,     0,   138,   139,   140,   141,   142,   143,     0,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
       0,   155,   156,   157,     0,     0,     0,     0,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   216,     0,   218,     0,   219,     0,     0,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,  1546,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,     0,     0,   262,     0,
     264,     0,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   514,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,     0,   295,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,     0,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   395,   396,   397,
     398,   399,     0,   401,   402,   403,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     516,   418,   419,   420,     0,   421,   422,     0,   423,     0,
     425,   426,   427,   428,   429,     0,   430,   431,     0,     0,
     432,   433,   434,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,   455,   456,
       0,   457,     0,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   512,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      95,    96,    97,    98,    99,   100,   101,   102,     0,   103,
     104,   105,     0,     0,     0,     0,     0,     0,     0,   106,
     107,     0,   108,   109,   110,     0,   112,   113,   114,   115,
     116,     0,   118,   119,     0,   120,   121,   122,   123,   124,
     125,     0,     0,   126,   127,   128,   129,   130,   131,     0,
     132,   133,   134,   135,   136,     0,     0,     0,   138,   139,
     140,   141,   142,   143,     0,   145,   146,   147,     0,   148,
     149,   150,   151,   152,   153,     0,     0,   155,   156,   157,
       0,     0,     0,     0,     0,     0,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,     0,
     170,   171,   172,   173,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,     0,   192,   193,   194,
       0,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   216,     0,   218,
       0,   219,     0,     0,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,  1829,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,     0,     0,   262,     0,   264,     0,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,   273,   514,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     295,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,     0,   371,   372,     0,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,     0,   389,   390,   391,   392,
     393,     0,   394,   395,   396,   397,   398,   399,     0,   401,
     402,   403,   404,     0,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   516,   418,   419,   420,
       0,   421,   422,     0,   423,     0,   425,   426,   427,   428,
     429,     0,   430,   431,     0,     0,   432,   433,   434,   435,
     436,     0,   437,   438,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,   449,     0,     0,   450,
     451,   452,   453,   454,   455,   456,     0,   457,     0,   459,
     460,   461,   462,   463,     0,     0,   464,     0,     0,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     512,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,     0,   112,   113,   114,   115,   116,     0,   118,   119,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   128,   129,   130,   131,     0,   132,   133,   134,   135,
     136,     0,     0,     0,   138,   139,   140,   141,   142,   143,
       0,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,     0,   155,   156,   157,     0,     0,     0,     0,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   216,     0,   218,     0,   219,     0,     0,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
    1841,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,     0,     0,
     262,     0,   264,     0,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,   514,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,     0,   295,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,     0,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,   395,
     396,   397,   398,   399,     0,   401,   402,   403,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   516,   418,   419,   420,     0,   421,   422,     0,
     423,     0,   425,   426,   427,   428,   429,     0,   430,   431,
       0,     0,   432,   433,   434,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
     455,   456,     0,   457,     0,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   512,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    95,    96,    97,    98,    99,   100,   101,   102,
       0,   103,   104,   105,     0,     0,     0,     0,     0,     0,
       0,   106,   107,     0,   108,   109,   110,     0,   112,   113,
     114,   115,   116,     0,   118,   119,     0,   120,   121,   122,
     123,   124,   125,     0,     0,   126,   127,   128,   129,   130,
     131,     0,   132,   133,   134,   135,   136,     0,     0,     0,
     138,   139,   140,   141,   142,   143,     0,   145,   146,   147,
       0,   148,   149,   150,   151,   152,   153,     0,     0,   155,
     156,   157,     0,     0,     0,     0,     0,     0,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,     0,   170,   171,   172,   173,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,     0,   192,
     193,   194,     0,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   216,
       0,   218,     0,   219,     0,     0,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1843,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,     0,     0,   262,     0,   264,     0,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
     273,   514,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   295,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,     0,   371,
     372,     0,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,     0,   389,   390,
     391,   392,   393,     0,   394,   395,   396,   397,   398,   399,
       0,   401,   402,   403,   404,     0,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   516,   418,
     419,   420,     0,   421,   422,     0,   423,     0,   425,   426,
     427,   428,   429,     0,   430,   431,     0,     0,   432,   433,
     434,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,   449,     0,
       0,   450,   451,   452,   453,   454,   455,   456,     0,   457,
       0,   459,   460,   461,   462,   463,     0,     0,   464,     0,
       0,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   512,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
      97,    98,    99,   100,   101,   102,     0,   103,   104,   105,
       0,     0,     0,     0,     0,     0,     0,   106,   107,     0,
     108,   109,   110,     0,   112,   113,   114,   115,   116,     0,
     118,   119,     0,   120,   121,   122,   123,   124,   125,     0,
       0,   126,   127,   128,   129,   130,   131,     0,   132,   133,
     134,   135,   136,     0,     0,     0,   138,   139,   140,   141,
     142,   143,     0,   145,   146,   147,     0,   148,   149,   150,
     151,   152,   153,     0,     0,   155,   156,   157,     0,     0,
       0,     0,     0,     0,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,     0,   170,   171,
     172,   173,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,     0,   192,   193,   194,     0,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   216,     0,   218,     0,   219,
       0,     0,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
       0,     0,   262,     0,   264,     0,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,   273,   514,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,   295,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,     0,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,   347,
     348,   349,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,     0,   371,   372,     0,   374,   375,
     376,   377,     0,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,     0,   389,   390,   391,   392,   393,     0,
     394,   395,   396,   397,   398,   399,     0,   401,   402,   403,
     404,     0,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   516,   418,   419,   420,     0,   421,
     422,     0,   423,     0,   425,   426,   427,   428,   429,     0,
     430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,   449,     0,     0,   450,   451,   452,
     453,   454,   455,   456,     0,   457,     0,   459,   460,   461,
     462,   463,     0,     0,   464,     0,     0,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   678,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,    96,    97,    98,    99,   100,
     101,   102,     0,   103,   104,   105,     0,     0,     0,     0,
       0,     0,     0,   106,   107,     0,   108,   109,   110,   679,
     112,   113,   114,     0,   680,   681,   682,   683,     0,   120,
     121,   122,   123,   124,   125,     0,     0,   126,   127,   684,
     685,   130,   131,     0,   132,   133,   134,   135,     0,     0,
     686,     0,   138,   139,   140,   141,   142,   143,   687,   145,
     146,   147,     0,   148,   149,   150,   151,   152,   153,     0,
     688,   155,   156,   157,     0,     0,     0,   689,     0,     0,
       0,   159,   160,   161,   162,   163,   164,   165,   690,   691,
     168,     0,   169,     0,   170,   171,   172,   173,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   692,   186,   187,   188,     0,   189,   190,   191,
       0,   192,   193,   194,     0,   195,   196,   197,   198,     0,
     200,   201,   202,   203,     0,     0,   205,     0,   206,   207,
     693,   209,     0,   210,     0,   211,   694,     0,   695,   214,
     215,   216,   696,   218,     0,   219,     0,     0,     0,     0,
       0,   222,     0,   223,   224,   225,   226,   227,   697,   229,
     698,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   699,     0,   244,   245,   246,   247,
     248,   700,   701,     0,   702,     0,   252,   703,   704,   255,
     705,   257,   258,   259,   260,   261,     0,     0,   262,   706,
     264,   707,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,   273,   708,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   709,   710,   711,   296,   297,   298,   299,     0,
       0,   301,   302,   712,   304,     0,     0,   306,   713,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,     0,   714,   319,   715,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,     0,   335,   336,     0,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     716,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
       0,   371,   372,   717,   374,   375,   376,   718,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,     0,
     389,   390,   391,   392,   393,     0,   394,   719,   396,   397,
     398,   399,   720,   401,   402,   721,   404,     0,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     722,   418,     0,   420,     0,   421,   422,     0,   423,   723,
     425,   426,   427,   428,   429,     0,   724,   725,     0,     0,
     432,   433,     0,   435,     0,     0,   437,   438,   726,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
     449,     0,     0,   450,   451,   452,   453,   454,     0,   727,
       0,   457,   728,   459,   460,   461,   462,   463,     0,     0,
     464,     0,     0,   465,   466,   467,   468,   469,   470,   678,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     482,   483,   484,   485,     0,    95,    96,    97,    98,    99,
     100,   101,   102,     0,   103,   104,   105,     0,     0,     0,
       0,     0,     0,     0,   106,   107,     0,   108,   109,   110,
     679,   112,   113,   114,     0,   680,   681,   682,   683,     0,
     120,   121,   122,   123,   124,   125,     0,     0,   126,   127,
     684,   685,   130,   131,     0,   132,   133,   134,   135,     0,
       0,   686,     0,   138,   139,   140,   141,   142,   143,   687,
     145,   146,   147,     0,   148,   149,   150,   151,   152,   153,
       0,   688,   155,   156,   157,     0,     0,     0,   689,     0,
       0,     0,   159,   160,   161,   162,   163,   164,   165,   690,
     691,   168,     0,   169,     0,   170,   171,   172,   173,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   692,   186,   187,   188,     0,   189,   190,
     191,     0,   192,   193,   194,     0,   195,   196,   197,   198,
       0,   200,   201,   202,   203,     0,     0,   205,     0,   206,
     207,   693,   209,     0,   210,     0,   211,   694,     0,   695,
     214,   215,   216,   696,   218,     0,   219,     0,     0,     0,
       0,     0,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   698,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   699,     0,   244,   245,   246,
     247,   248,   700,   701,     0,   702,     0,   252,   703,   704,
     255,   705,   257,   258,   259,   260,   261,     0,     0,   262,
     706,   264,   707,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,   273,   708,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   709,   710,   711,   296,   297,   298,   299,
       0,     0,   301,   302,   712,   304,     0,     0,   306,   713,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,   714,   319,   715,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,     0,   335,   336,     0,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   716,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,     0,   371,   372,   717,   374,   375,   376,   718,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
       0,   389,   390,   391,   392,   393,     0,   394,   719,   396,
     397,   398,   399,   720,   401,   402,   721,   404,     0,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   722,   418,     0,   420,     0,   421,   422,     0,   423,
     723,   425,   426,   427,   428,   429,     0,   724,   725,     0,
       0,   432,   433,     0,   435,     0,     0,   437,   438,   726,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,   449,     0,     0,   450,   451,   452,   453,   454,     0,
     727,     0,   457,   728,   459,   460,   461,   462,   463,     0,
       0,   464,     0,     0,   465,   466,   467,   468,   469,   470,
    2457,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   482,   483,   484,   485,     0,    95,    96,    97,    98,
      99,   100,   101,   102,     0,   103,   104,   105,     0,     0,
       0,     0,     0,     0,     0,   106,   107,     0,   108,   109,
     110,  2458,   112,   113,   114,     0,   680,  2459,   682,   683,
       0,   120,   121,   122,   123,   124,   125,     0,     0,   126,
     127,   684,   685,   130,   131,     0,   132,   133,   134,   135,
       0,     0,  2460,     0,   138,   139,   140,   141,   142,   143,
    2461,   145,   146,   147,     0,   148,   149,   150,   151,   152,
     153,     0,  2462,   155,   156,   157,     0,     0,     0,  2463,
       0,     0,     0,   159,   160,   161,   162,   163,   164,   165,
     690,   691,   168,     0,   169,     0,   170,   171,   172,   173,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   692,   186,   187,   188,     0,   189,
     190,   191,     0,   192,   193,   194,     0,   195,   196,   197,
     198,     0,   200,   201,   202,   203,     0,     0,   205,     0,
     206,   207,   693,   209,     0,   210,     0,   211,  2464,     0,
    2465,   214,   215,   216,  2466,   218,     0,   219,     0,     0,
       0,     0,     0,   222,     0,   223,   224,   225,   226,   227,
     228,   229,  2467,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,  2468,     0,   244,   245,
     246,   247,   248,   700,   701,     0,   702,     0,   252,  2469,
    2470,   255,  2471,   257,   258,   259,   260,   261,     0,     0,
     262,  2472,   264,  2473,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,   273,  2687,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   709,  2475,   711,   296,   297,   298,
     299,     0,     0,   301,   302,  2477,   304,     0,     0,   306,
     713,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,  2479,   319,  2480,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,     0,   335,   336,     0,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   716,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,     0,   371,   372,  2481,   374,   375,   376,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,     0,   389,   390,   391,   392,   393,     0,   394,     0,
     396,   397,   398,   399,  2483,   401,   402,   721,   404,     0,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,  2688,   418,     0,   420,     0,   421,   422,     0,
     423,  2485,   425,   426,   427,   428,   429,     0,   724,   725,
       0,     0,   432,   433,     0,   435,     0,     0,   437,   438,
    2486,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,   449,     0,     0,   450,   451,   452,   453,   454,
       0,   727,     0,   457,  2487,   459,   460,   461,   462,   463,
       0,     0,   464,     0,     0,   465,   466,   467,   468,   469,
     470,   678,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   482,   483,   484,   485,     0,    95,    96,    97,
      98,    99,   100,   101,   102,     0,   103,   104,   105,     0,
       0,     0,     0,     0,     0,     0,   106,   107,     0,   108,
     109,   110,   679,   112,   113,   114,     0,   680,   681,   682,
     683,     0,   120,   121,   122,   123,   124,   125,     0,     0,
     126,   127,   684,   685,   130,   131,     0,   132,   133,   134,
     135,     0,     0,   686,     0,   138,   139,   140,   141,   142,
     143,   687,   145,   146,   147,     0,   148,   149,   150,   151,
     152,   153,     0,   688,   155,   156,   157,     0,     0,     0,
     689,     0,     0,     0,   159,   160,   161,   162,   163,   164,
     165,   690,   691,   168,     0,   169,     0,   170,   171,   172,
     173,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   692,   186,   187,   188,     0,
     189,   190,   191,     0,   192,   193,   194,     0,   195,   196,
     197,   198,     0,   200,   201,   202,   203,     0,     0,   205,
       0,   206,   207,   693,   209,     0,   210,     0,   211,   694,
       0,   695,   214,   215,   216,   696,   218,     0,   219,     0,
       0,     0,     0,     0,   222,     0,   223,   224,   225,   226,
     227,   228,   229,   698,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   699,     0,   244,
     245,   246,   247,   248,   700,   701,     0,   702,     0,   252,
     703,   704,   255,   705,   257,   258,   259,   260,   261,     0,
       0,   262,   706,   264,   707,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,   273,     0,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   709,   710,   711,   296,   297,
     298,   299,     0,     0,   301,   302,   712,   304,     0,     0,
     306,   713,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,   714,   319,   715,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,     0,   335,   336,     0,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   716,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,     0,   371,   372,   717,   374,   375,   376,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,     0,   389,   390,   391,   392,   393,     0,   394,
       0,   396,   397,   398,   399,   720,   401,   402,   721,   404,
       0,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,     0,   418,     0,   420,     0,   421,   422,
       0,   423,   723,   425,   426,   427,   428,   429,     0,   724,
     725,     0,     0,   432,   433,     0,   435,     0,     0,   437,
     438,   726,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,   449,     0,     0,   450,   451,   452,   453,
     454,     0,   727,     0,   457,   728,   459,   460,   461,   462,
     463,     0,     0,   464,     0,     0,   465,   466,   467,   468,
     469,   470,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   482,   483,   484,   485
};

static const yytype_int16 yycheck[] =
{
       6,   638,   653,   543,   506,    11,   579,    36,   629,    15,
      60,   816,   549,  1017,    20,    21,    22,    23,    24,     0,
       0,    27,  1371,   719,    30,    31,   816,  1162,    34,    35,
       6,  1296,  1839,   896,  1162,    16,     0,     0,   598,     0,
     542,    88,   645,    90,   990,    92,  1193,  1015,    54,   725,
      30,  1162,  1162,  1762,     6,  1249,  1056,    16,    31,   898,
     540,   547,  2147,  2223,  1845,   992,  1847,  1776,  2222,  2195,
    2195,  1787,   995,   988,    54,   914,   548,  2235,  1836,  1198,
    1325,  1326,    88,    89,    90,    91,    92,   926,   540,   647,
     549,  1718,    62,  1020,  1883,  1884,  1885,   603,     0,    35,
      62,  2089,  2242,    21,   638,  2040,   640,  2117,   642,     4,
     748,     5,     9,   751,     9,     5,   824,    58,    91,    13,
      14,     5,  2534,    13,    14,   684,   685,    50,  1378,   934,
       5,     9,    58,    58,     3,  2531,    23,     5,  1428,     5,
       3,   556,    29,    23,     5,    93,   540,     5,     9,    29,
       5,     9,   711,  1911,  1430,     5,  1758,     5,     5,     3,
    2583,   172,     5,    13,    14,    13,    14,   121,     9,     5,
     626,     0,   658,   141,     5,     5,  1778,     9,     5,   172,
      68,     5,    13,    14,   626,     5,  2605,     5,     5,     0,
     173,     5,    11,  1163,  1277,  2691,   118,  2514,   108,  1004,
      13,    14,  1007,  1008,  2726,  2028,    15,   883,     3,     4,
       5,  2095,     3,  2636,     9,    11,    15,    15,  1976,  1977,
       3,   149,    41,    67,    40,    15,   222,  1291,    20,    21,
      27,    76,  1291,     4,    15,   220,  2444,    34,     9,   719,
      31,    32,    87,   540,  2094,   121,  2397,    84,  2838,   755,
     312,   138,   123,   290,  2495,    74,   296,   288,   138,   213,
     173,    11,   276,   296,  2136,    94,    76,   719,   140,   312,
     273,    13,    14,  2115,   194,   108,    69,    87,  2799,   816,
     362,   169,   279,    94,   843,   844,   823,   121,    74,    58,
     218,    41,   129,   383,    11,   133,   977,    59,     3,   374,
    2712,   363,   162,  2726,   138,  2166,    68,  1003,    37,  3031,
     869,    11,  2645,  2102,    27,    15,  1291,   425,   118,   464,
    1028,   116,    11,    23,    74,   164,   447,  1035,   505,   116,
     172,   132,   447,  2666,    34,    35,   464,   412,   469,   899,
      11,    40,   119,   164,  2763,   825,    11,   819,   151,    24,
      27,   109,    41,   222,    11,    30,  2482,    34,  2165,   222,
     491,   503,   470,    27,   509,   507,  2526,   927,   296,  2959,
      34,  2359,  1999,   825,  2528,  2363,    41,   237,   453,    54,
     171,   509,   173,   941,   505,    74,  2247,  3109,   894,    89,
     505,   230,   389,   953,    27,   308,   125,   494,   201,   936,
     937,  2110,  2111,   333,  2162,   166,  2164,   294,   353,    74,
     507,   116,   423,   354,   294,   505,   956,    74,   109,   196,
     133,   214,   719,   505,   219,   167,   227,   287,   354,   354,
     505,   445,   352,   363,     8,   323,   381,    11,   500,   272,
    1061,  2837,    16,    17,    18,   240,    79,   285,  2689,   496,
     271,  2874,  2660,  1718,   934,    88,   459,   500,  2281,    33,
     347,   290,  1291,   510,   351,  1173,  2350,   347,   505,   509,
     307,   351,   344,  2624,   505,   388,   509,  2998,   240,   290,
     280,   987,  3072,   494,   117,  2087,  2819,  2089,   322,     0,
     496,   445,   301,   280,   381,   463,   507,   503,  2921,  2349,
     506,   381,   412,  1449,   510,  1505,  1570,  3029,  2266,   515,
    1800,   439,  1571,  3009,   495,   495,   509,  2834,   514,  1764,
     549,  1172,   505,  1003,   509,  1801,   355,   449,   825,   985,
    1795,   495,   495,  1537,   495,   950,   542,   543,   544,  1789,
    2412,   385,  2700,   985,   355,   400,   401,  2389,   595,  2961,
     498,  1003,   440,   559,   503,  2974,   504,   318,   507,   192,
    1163,   590,  1532,   450,  2960,  2691,  2691,   548,   509,   445,
     450,   204,   578,   579,   580,   581,   447,   583,   423,   629,
     417,   423,   505,   509,   509,   354,   633,    27,   456,   595,
     549,   374,     0,   409,   469,   392,  1571,  1572,   604,   496,
     497,   496,   497,   469,  2592,  2615,  3029,  1607,    16,  2597,
     616,   505,  2600,   423,  2421,   505,   491,  1298,   665,   666,
     667,   505,    30,   593,  2559,   491,   504,   633,    36,   412,
     505,   593,   613,   613,   503,  1194,  1195,   505,   467,   505,
     503,   559,   601,   616,   505,   514,    54,   505,   222,   613,
     613,   514,   613,  2434,    62,   505,   467,   505,   505,   665,
     666,   667,   505,   504,  1267,  1373,   457,   503,   604,   505,
     453,   507,   504,  1478,   505,   505,  2836,   506,   505,   508,
    1186,   505,   501,  1488,   467,   505,  1491,   505,   505,  1772,
    2848,   505,   505,   133,  2410,   506,   467,   508,   497,   497,
    2584,   496,   497,  1243,  2924,   501,  1003,   497,   491,  2849,
     409,   613,  1192,  1193,  1251,   392,   497,   503,   292,  1913,
     491,   507,   505,  1281,  2513,   496,   497,  1207,   392,    58,
     162,  1334,  1753,  1754,  1999,  1416,   133,    36,  1240,  1241,
    1192,  1193,  1571,  1572,  1573,  1247,   496,   497,   498,   499,
     500,   501,  1312,   411,   119,  1207,    55,  2359,  2516,    64,
      65,  2363,  1320,  1321,   107,   557,   399,   559,   560,   402,
    2758,   338,    23,  1376,  1280,  3002,  1282,  3004,  1250,   509,
    1286,   498,   499,   500,   501,  1590,   116,  2414,   446,   246,
     582,   246,  1251,  1299,  1300,  1597,  1302,     4,  1192,  1601,
    1590,  1603,     9,  2048,  2001,   237,  2966,  1365,   107,   498,
     499,   500,   501,  1207,   226,   515,  1322,  1375,  1937,  1377,
     508,  1684,   467,   829,  1943,   496,   497,   498,   499,   500,
     501,   196,  2029,     5,  3054,  1337,     8,  1474,   819,   469,
    2647,   457,    14,  1682,   544,   412,   491,   349,   246,  1329,
      23,  1766,    23,    25,   226,    30,    29,    29,    29,  1863,
     272,   491,   192,  1466,  3091,   118,   895,     4,     8,  3023,
     498,    11,     9,    94,   505,   505,   504,  1329,   275,    54,
    1501,  1502,  1503,  3009,  3009,   116,  1886,   138,   285,     8,
     896,   938,    11,   460,   338,  1192,  1193,    16,    17,    18,
     272,    41,     4,   202,   604,    13,    14,     9,    48,   252,
    1207,   203,   367,  1447,  2061,  1553,   963,   260,   492,   493,
     494,   181,   496,   497,   498,   499,   500,   501,   246,  1532,
    2195,   375,   938,   203,    74,  1329,  1574,   253,  1576,   500,
    1474,  1579,   989,   272,  1871,   275,   507,   428,  3108,   955,
     956,   460,  1791,   252,   207,  1002,   962,   963,   964,  1493,
     506,   260,   334,   509,  1498,   138,   370,   138,   412,   367,
    3055,  3056,   384,   272,  1655,  1656,  1023,   338,  1458,  1660,
     494,  2583,  1484,   989,   990,   500,   443,  1489,   443,   962,
    2592,   505,   507,   469,     5,  2597,  1002,  2804,  2600,  1922,
     970,   971,   505,   973,  1927,   304,  1458,   147,   970,   971,
     505,   973,   384,  1019,   375,   491,   460,  1023,   178,   272,
    1701,  1702,   275,   488,   816,   354,    31,    32,  2809,   505,
    3115,   823,  1329,   445,  2636,     4,  3073,   177,   506,  1525,
       9,   509,   178,   294,  1550,   443,  1019,   133,   505,   367,
     505,   412,   381,  1590,   353,   195,  2077,  2078,  2079,  2080,
     200,   362,   363,   506,  1458,  2259,   509,   203,  1605,    13,
      14,    23,   303,   445,   160,   367,   375,    29,    13,    14,
     240,   200,    23,   375,     8,  1565,  3123,   495,    29,    94,
    2225,   224,    16,    17,    18,    76,   236,  2225,   397,   460,
     351,  3138,   353,   222,   240,    23,    87,   505,   416,   901,
     418,    29,   275,  1565,  2225,  2225,   507,   280,   910,  1166,
     412,   294,   492,   294,  2726,   443,   290,   497,   246,  1609,
     381,   923,   416,   488,   418,   505,    76,  1677,   498,  1760,
     548,   549,   934,   374,   936,   937,   503,    87,   505,  2414,
     507,  1157,   292,   374,   246,   171,  2758,  1609,    48,   295,
    1166,  1458,   509,  1669,  1670,  1671,  1672,   505,   460,   332,
    1176,  1565,  2176,   292,   347,  1965,   347,  2324,   351,    95,
     351,   412,   590,    13,    14,   593,   138,   505,   509,   275,
    1669,   412,  1671,  1672,   280,   580,   581,   138,   583,   285,
    1706,   172,  1249,  1209,  1842,   613,  1844,  2175,   381,   506,
     381,  2920,   173,   506,   220,  1609,   509,  2163,   506,   506,
     138,   509,   453,   506,   506,   162,   509,   509,   506,   488,
     167,   509,   453,   224,  1240,  1241,   467,  1243,  1244,    54,
    1246,  1247,   246,  1249,   133,   506,   467,   387,   209,   367,
    2218,  2174,   154,  2176,  1905,   955,   416,   173,   418,   506,
     491,   509,   509,   511,   225,  1941,  1942,  2616,  1565,  1250,
     491,   160,  2874,   234,   505,   367,   505,   450,   506,   450,
     416,   509,   418,   443,   505,   347,   506,   177,  3095,   509,
    1296,   506,  1251,   209,   509,  2134,  1277,  1277,     3,  2368,
     237,  1307,  2371,   506,   440,   195,   509,   443,   506,   225,
     200,   509,  1609,  1277,  1277,   154,  1277,   506,   234,  2921,
     509,  3030,   467,  1370,   469,   443,  2007,  2008,  2009,  2010,
     154,  1337,  2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,
    2021,  2022,   294,   154,   430,  1392,   236,  1394,  3057,   489,
     287,   443,   268,   294,   505,   441,   496,   497,   498,   499,
     500,   501,   153,   367,  1370,  1371,   507,  1970,   292,   374,
     416,   691,   418,   492,   493,   494,   294,   496,   497,   498,
     499,   500,   501,   153,  2065,  2066,  1392,   505,  1394,   506,
    2195,   280,   509,   713,  1441,   347,   285,   358,  1404,   351,
    1406,   506,   258,   259,   509,   275,   347,   412,  2555,   506,
     351,   819,   509,   505,    36,   506,  3125,   460,   509,   416,
     162,   418,  1402,   505,   744,   167,  2691,  3029,  1965,   381,
     623,    83,   625,   351,  1393,  1441,  2364,   471,  2366,   443,
     381,  1921,   358,  1449,  1450,   505,  2450,   506,   453,   857,
     509,   505,   457,   456,  1460,  1461,  1462,  1463,  1960,  1465,
     154,   506,   467,   381,   509,  1471,   319,  1473,   505,  1921,
     505,     8,  1519,  1520,    11,    35,  2422,   506,  1484,  1485,
     509,    13,    14,  1489,  1490,  2043,   491,   895,  1494,  1495,
    1496,  1497,  2355,  1499,  1500,   237,   505,   387,   450,  1291,
     505,   505,    13,    14,    41,   154,  2369,   506,  1988,   450,
     509,    48,   154,  1519,  1520,   371,   372,   506,  1524,   506,
     509,    95,   509,    13,    14,   154,  2006,  1921,   506,   290,
    2036,   509,   450,  1539,   412,   855,  1988,    74,   505,  2099,
     506,   430,    36,   509,  1244,   287,  1246,    13,    14,   190,
     191,  2031,   441,   873,  2006,   235,   506,   505,  2038,   509,
    2909,  1541,   970,   971,   506,   973,     5,   509,   492,   493,
     494,   503,   496,   497,   498,   499,   500,   501,   303,  2031,
       5,  2061,   505,   374,  2731,  2143,  2038,     0,   505,  2210,
    1382,  2194,   506,  2196,  1988,   509,   167,   506,   505,   173,
     509,   149,   506,   506,   374,   509,   509,     5,   506,  2061,
     147,   509,  2006,   506,   162,     5,   509,   258,   259,   167,
    2258,   412,   506,   506,  1921,   509,   509,    36,  1657,   506,
     506,   506,   509,   509,   509,   209,  2441,  2031,   506,   505,
     177,   509,   412,   505,  2038,   506,    55,   506,   509,   374,
     509,   225,   506,   150,   506,   509,     8,   509,   195,    11,
     234,   505,   453,   200,    16,    17,    18,    13,    14,    68,
     218,  1677,   506,    13,    14,   509,   467,  1706,  1684,   506,
     505,    94,   509,   453,     5,   506,   505,   412,   509,   237,
     506,  1988,   506,   509,   268,   509,   505,   467,   107,   236,
     491,     5,   506,   506,  1751,   509,   509,   506,   506,  2006,
     509,   509,  1718,    68,   505,  2195,   290,   116,   505,    74,
     506,   491,   506,   509,   506,   509,   505,   509,   453,  2697,
     371,   372,    87,   505,  2031,   505,   149,    13,    14,   287,
     505,  2038,   467,  2195,  3009,  1751,    13,    14,   296,   162,
    1450,   505,  1758,  1782,   167,   292,  2546,    13,    14,   172,
    1460,   116,  1462,   118,  2061,  1465,   491,    13,    14,   505,
     183,  1471,  1778,  1473,   187,  2255,  1782,   176,   505,  1785,
     505,  1787,  1758,   505,   358,  1485,  2482,    13,    14,   505,
    1490,  1772,  1772,   202,  1494,  1495,  1496,  1497,  1590,  1499,
    1500,  2195,  1778,  2255,  1596,   218,  1758,   505,  1772,  1772,
       9,  1772,   505,  1605,   468,  2453,  2454,  2375,    13,    14,
     374,   176,    13,    14,   237,    15,  1778,   220,  2401,    98,
    1836,    13,    14,    13,    14,    13,    14,     8,    13,    14,
      11,   509,  1250,   252,  2324,    16,    17,    18,  2406,    36,
     387,   260,   207,    13,    14,   250,  1903,   381,   412,    13,
      14,  2255,   167,   272,   235,  1912,  1913,  1914,   287,  1277,
     222,  2552,  2324,   447,   287,   167,   275,   290,   285,     6,
     505,   280,   423,   296,   505,  1932,  2691,   362,   363,   262,
     263,   439,  1898,   371,   372,   304,   509,  1903,  2195,   453,
     362,   363,   362,   363,    87,  1911,  1912,  1913,  1914,  2384,
    2385,   936,   937,   467,   423,  1774,  1775,   149,    54,  1925,
     275,   540,    54,   423,   323,   280,  1932,   265,   423,   506,
     162,   514,  1340,   467,   423,   167,   154,   491,  1944,    94,
     292,   340,   355,   507,   353,   146,   275,   275,   505,    36,
      36,   505,   489,   505,  1960,     9,    35,   421,  2255,   496,
     497,   498,   499,   500,   501,   421,   375,   503,   323,   423,
    1976,  1977,  2452,   503,   423,   423,   423,  2658,   509,   463,
     505,    11,   349,  1963,   504,   340,   218,   509,   397,   421,
     509,   514,   505,  1999,  1402,   505,   280,   423,   183,   412,
    2452,   163,  2482,   172,   506,   237,   505,   447,    36,  2546,
     218,  2040,   384,   509,   226,   312,   291,   312,   509,   505,
     226,   275,   226,  2073,   296,   328,   439,  2324,   288,   460,
    2482,   413,   505,   505,   447,   154,  2083,  2084,  2085,   154,
     467,   440,  2071,   290,   275,   506,   503,   488,   447,  2730,
     488,   464,   290,   466,   467,   287,   506,  1849,  2452,   275,
    2089,   506,   506,   506,   296,    36,    36,  3071,   504,  2075,
     172,   506,   506,   506,   488,  2555,   506,  2083,  2084,  2085,
     172,  2087,   506,  2089,  2090,   440,   506,   505,  2094,  2095,
     503,   507,   447,   506,   507,   508,   506,   506,   506,   423,
     719,   506,   506,  2555,  1896,   505,   300,   464,   505,  2156,
      36,  2087,     3,  2089,   505,   464,   453,   290,  1910,  2740,
     494,   292,   490,   291,   291,  1655,  1656,   291,   445,   509,
    1660,   245,   423,  1541,  2140,  2087,   275,  2089,   154,   505,
     492,   493,   494,    50,   496,   497,   498,   499,   500,   501,
    2156,   203,  2158,   294,  2656,  2452,  2162,  2163,  2164,   154,
    2166,   154,   423,   506,   423,   423,   423,   506,   504,  2820,
     282,  1701,  1702,  1965,   282,   505,  2182,  2224,  2184,  2226,
    1972,   288,  1974,   505,   509,  2482,  1978,  1979,   467,    96,
     290,  2197,  2198,  2199,  2200,  2201,  2202,  2203,  2204,  2205,
    2206,    36,  2805,   154,  3009,  2745,   825,   439,   504,   154,
     504,  2691,  2259,   280,   145,   122,  2222,   172,  2224,    11,
    2226,   167,   172,  2763,   506,  1925,   506,   464,   506,   506,
    2236,   505,   505,   412,   172,   183,   143,    77,   509,  2691,
     147,  2247,   491,   506,   506,   497,     3,   452,    85,  1657,
     355,  2731,   505,  2259,   291,   154,   176,   505,  2555,   509,
    2266,   168,   434,   506,   171,   506,  2246,   506,    36,   505,
     505,   503,   506,    80,   506,   507,  2927,   447,   506,  2731,
     504,   188,  2762,   172,   509,  2765,   505,     3,   414,   506,
     299,   506,   506,  2340,  2341,  2342,  2343,  2691,  1706,  2839,
     225,   225,   505,   297,   506,   505,    54,   505,  2314,   187,
    2762,     3,   505,  2765,   506,     3,  1724,   506,   506,   467,
     494,   492,   493,   494,  2826,   496,   497,   498,   499,   500,
     501,  2337,  1740,   205,  2340,  2341,  2342,  2343,   193,   280,
     280,   507,   507,  2349,  2350,   423,  2352,  2887,   507,  2355,
    1758,   507,   494,  2359,   507,   507,   507,  2363,   507,   423,
     507,   507,   507,  2369,  1772,  2871,    36,   507,  2762,   507,
    1778,  2765,   507,   280,  1782,   226,   507,  3014,   507,   507,
     275,   288,   507,  2359,  1003,   507,   507,  2363,   506,  2895,
     507,  2897,   505,   108,  2691,  2401,   507,   507,    36,  2405,
     290,   507,   467,  2195,  2410,  3008,   507,  2359,  2414,   507,
     507,  2363,   507,   540,   505,    36,  2422,    55,   172,   225,
    2922,   505,   549,  2403,  2404,   332,   309,   466,  2220,   505,
     505,   497,   506,   506,  2731,     8,    87,   134,    11,   340,
     226,  2447,   505,    16,    17,    18,   506,   505,    82,   116,
      36,   578,   579,   154,    74,   506,   505,   123,  2158,   154,
      33,   227,    36,   506,    54,  2762,   363,   363,  2765,   107,
      36,   505,   505,   505,   505,   447,   603,  2007,  2008,  2009,
    2010,   505,  2182,  2013,  2014,  2015,  2016,  2017,  2018,  2019,
    2020,  2021,  2022,   452,   509,    74,    36,  2197,  2198,  2199,
    2200,  2201,  2202,  2203,  2204,  2205,  2206,   192,   447,   413,
    2516,   434,    68,   293,    68,   505,   643,   644,   645,   505,
     509,    36,  2528,   365,   497,   504,    12,   381,   494,  3009,
     280,   192,   250,  2539,   434,  2065,  2066,   505,   176,    36,
       3,   505,   505,   505,   293,   506,   293,    12,   506,  2529,
     497,   505,     9,   497,   290,  1963,     9,  3009,   272,   362,
     348,     9,   504,   205,   202,   290,   290,    33,   504,   506,
    2617,   505,   121,  1192,  1193,   445,   393,  2583,  2584,     9,
     497,  2587,    22,   127,  2590,   506,  2592,   340,  1207,   340,
    2382,  2597,   719,   613,  2600,   227,  2602,  3011,  3098,  2605,
    2812,  3070,   990,  3058,  2714,   540,  1846,  2583,  1834,  2236,
    2616,  2617,  3008,  1898,   252,  3009,  2592,  3068,  2665,  2194,
    1831,  2597,   260,  3006,  2600,  1394,  2177,  1472,   755,  2192,
    2636,  2583,  2040,  1240,   272,  1840,  1192,  2231,  2405,  2140,
    2592,  2921,  2632,  3005,   955,  2597,  1792,   928,  2600,   222,
    2656,  2657,  1444,   980,  2884,  2781,   979,  2988,  2705,  2665,
    2636,  1809,  2104,  2071,  1416,  2983,   304,  2899,  1443,   540,
    2381,  1778,   982,   540,  2089,  2365,  2723,  2350,  2759,  2087,
    2087,  2089,  2874,  2873,  2636,  2891,  2692,  2693,  2892,   816,
    1291,  1291,  1291,  1291,  2611,  2986,   823,   824,   825,  2705,
    2987,  2707,  2970,  1367,  1684,  2711,  1795,  1282,  1721,  1724,
    1329,  1511,  3009,  1761,   841,   353,  1615,  2723,  2446,   292,
    2726,  2701,  2103,  1907,  1902,  2866,  1970,  2220,  2086,  2112,
    2386,  2546,  2618,  2525,  2389,  2782,  2783,   375,  1393,  2745,
    2769,   174,   962,   870,  1251,   178,  2141,  2727,  1605,  2705,
    2726,  3141,  2758,  3107,  2546,    -1,  2803,  2763,    -1,   397,
      -1,    -1,    -1,   890,   891,   892,    -1,   894,   895,    -1,
     203,    -1,  2778,    -1,  2726,    -1,  2782,  2783,    -1,    -1,
      -1,    -1,  2758,  2789,   719,    -1,    -1,    -1,  2794,    -1,
      -1,   918,    -1,    -1,    -1,    -1,    -1,  2803,    -1,  2846,
      -1,    -1,    -1,    -1,    -1,    -1,  2758,   240,    -1,   936,
     937,    -1,    -1,    -1,   247,    -1,  2822,    -1,  2610,    -1,
    2826,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2839,    -1,    -1,    -1,    -1,  2246,  1458,
    2846,    -1,    -1,    -1,    -1,   972,    -1,    -1,   719,   976,
     977,    -1,   719,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     987,    -1,   295,    -1,    -1,    -1,    -1,  2847,  2874,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1003,  2883,    -1,    -1,
      -1,  2887,    -1,    -1,    -1,  2891,    -1,    -1,    -1,    -1,
     825,    -1,    -1,    -1,    -1,    -1,    -1,   330,  2874,  2691,
      -1,  1028,    -1,  2909,    -1,    -1,    -1,    -1,  1035,    -1,
      -1,    -1,    -1,    -1,    -1,  2921,  2922,  2923,  2924,   492,
     493,   494,  2874,   496,   497,   498,   499,   500,   501,  1056,
      -1,    -1,    -1,    -1,   367,    -1,    -1,  2917,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2921,  1565,    -1,    -1,  2955,
      -1,  2359,    -1,    -1,   825,  2363,    -1,  2657,   825,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2974,  2921,
      -1,    -1,    -1,    -1,    -1,  3022,    -1,    -1,    -1,    -1,
    2986,    -1,  2988,   416,    -1,   418,    -1,    -1,    -1,    -1,
    1609,    -1,  2692,  2693,    -1,  2403,  2404,    -1,    -1,  3005,
      -1,   434,    -1,    -1,    -1,    -1,    -1,   440,    -1,    -1,
     443,  2711,    -1,  1298,    -1,    -1,  3022,  3023,    -1,    -1,
      -1,    -1,  2552,  3029,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,  1163,    -1,  3018,    -1,
      -1,    -1,    -1,  2835,    -1,    -1,  1173,    -1,  3054,    -1,
      -1,    -1,    -1,  3029,    -1,    -1,    -1,    -1,    -1,  1186,
    3107,    -1,    -1,    -1,    -1,  1192,  1193,    -1,  1003,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3029,    -1,    -1,
    1207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3136,
      -1,    -1,    -1,  3140,  2794,    -1,    -1,    -1,    -1,    -1,
      -1,  3107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   190,   191,    -1,    -1,    -1,    -1,    -1,
      -1,  2529,  2822,    -1,  1251,    -1,    -1,    -1,  2658,    -1,
    3136,  1416,  1003,    -1,  3140,    -1,  1003,    -1,    -1,    -1,
    1267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1280,    -1,  1282,    -1,    -1,  1285,  1286,
      -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,  1295,    -1,
    1297,  1298,  1299,  1300,  1301,  1302,  1303,   254,   255,   256,
     257,   258,   259,    -1,  2592,   262,   263,    -1,    -1,  2597,
      -1,    -1,  2600,    -1,    -1,  1322,    -1,  1324,    -1,    -1,
    2730,    -1,  1329,  1330,  1331,  1332,  1333,  1334,    -1,    -1,
      -1,  1338,  1339,    -1,    -1,    -1,  1343,  3009,    -1,    -1,
    1347,    -1,    -1,  1350,  1351,  1352,  1353,  1354,  1355,  1356,
    1357,  1358,    -1,    -1,  1361,    -1,    -1,    -1,    -1,  1366,
      -1,    -1,  1369,    -1,  1371,    -1,  1373,    -1,    -1,  1376,
      -1,    -1,    -1,    -1,    -1,    94,    -1,  1192,  1193,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,  1396,
      -1,    -1,  1207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,  1416,
      -1,    -1,    -1,  2701,   371,   372,    41,    -1,    -1,    -1,
    1427,  1428,  1921,    48,    -1,    -1,    -1,    -1,    -1,    -1,
     149,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,  2727,
      48,  1192,  1193,   162,    -1,  1192,  1193,    -1,   167,    74,
      -1,  1458,    -1,   172,    -1,    -1,  1207,  1464,    -1,  1466,
    1207,    -1,    -1,    -1,   183,    -1,    74,    -1,   187,    -1,
    2758,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2769,    -1,    -1,     8,    -1,    -1,    11,    -1,  1988,
    1655,  1656,    16,    17,    18,  1660,    -1,    -1,  1505,   218,
      -1,  1508,  1509,    -1,  1511,    -1,    -1,  2006,    -1,    33,
      -1,    -1,    -1,    -1,  1329,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   147,    -1,    -1,  1532,    -1,    -1,   485,   486,
      -1,    -1,  2031,    -1,    -1,    -1,  1701,  1702,  1545,  2038,
      -1,    -1,    -1,  1550,    -1,    -1,    -1,    -1,   505,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,  1565,  2847,
      -1,    -1,  2061,    -1,    -1,    -1,    -1,    -1,   287,   177,
     195,   290,    -1,    -1,    -1,   200,    -1,   296,  1329,    -1,
      -1,    -1,  1329,  1590,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,  1605,    -1,
    1607,    -1,  1609,    -1,    -1,    -1,    -1,  1614,    -1,    -1,
      -1,   236,  1619,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,   578,   579,    11,    -1,   236,  2917,
      -1,    16,    17,    18,    -1,    -1,   355,     8,    -1,    -1,
      11,    -1,    -1,  1458,    -1,    16,    17,    18,  1655,  1656,
    1657,    -1,    -1,  1660,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1669,  1670,  1671,  1672,    -1,   292,    -1,    -1,
      41,    -1,  1679,    -1,    -1,    -1,  1683,    48,    -1,  1686,
      -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,    -1,   643,
     644,    -1,    -1,   412,  1701,  1702,  2195,    -1,   222,  1706,
      -1,    -1,    -1,    74,    -1,    -1,    -1,  1458,    -1,    -1,
      -1,  1458,    -1,  1720,    -1,    -1,  1723,    -1,  1725,    -1,
     439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,
    3018,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1746,
      -1,    -1,    -1,    -1,    -1,   464,    -1,   466,   467,    -1,
    1565,  1758,    -1,    -1,    -1,    -1,  2255,    -1,    -1,    -1,
      -1,    -1,   387,    -1,    -1,    -1,    -1,    -1,   292,    -1,
      -1,  1778,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   387,
      -1,    -1,    -1,     8,   503,  1792,    11,   506,   507,   508,
      -1,    16,    17,    18,  1609,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1809,  1810,    -1,    -1,   177,    -1,    33,    -1,
      -1,    -1,    -1,    -1,  1565,    -1,    -1,    -1,  1565,    -1,
      -1,  1828,    -1,    -1,   195,  2324,    -1,    -1,    -1,   200,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,  1845,  1846,
    1847,    -1,  2007,  2008,  2009,  2010,    -1,    -1,  2013,  2014,
    2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  1609,    -1,
      -1,    -1,  1609,    -1,   489,   236,    -1,    -1,    -1,    -1,
     824,   496,   497,   498,   499,   500,   501,    -1,    -1,  1886,
      -1,   489,    -1,    -1,    -1,    -1,    -1,   841,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,
    2065,  2066,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
      -1,    -1,    -1,    -1,  1921,    -1,   870,    -1,    -1,    -1,
      -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   890,   891,   892,    -1,
      -1,   895,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2452,    -1,    -1,    -1,    -1,  1965,    -1,
      -1,    -1,    -1,  1970,   918,    -1,    -1,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,  1985,    -1,
      -1,  1988,    -1,  2482,    -1,    -1,    -1,  1994,    -1,    -1,
    1997,    -1,    -1,  2000,    -1,    -1,    -1,   222,    -1,  2006,
    2007,  2008,  2009,  2010,    -1,    -1,  2013,  2014,  2015,  2016,
    2017,  2018,  2019,  2020,  2021,  2022,   387,    -1,   972,  2026,
    2027,    -1,   976,   977,  2031,    -1,    -1,    -1,    -1,  2036,
      -1,  2038,    -1,  2040,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,  2049,     5,    -1,  2052,    -1,  2054,    -1,    -1,
      -1,    -1,    -1,    -1,  2061,  2062,  2555,    -1,  2065,  2066,
      -1,    -1,    -1,  2070,  2071,    -1,    -1,   292,    -1,    -1,
      -1,    -1,    -1,    -1,  1028,    -1,    -1,    -1,    -1,    -1,
    2087,  1035,  2089,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1056,    -1,    -1,    -1,  1921,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,   489,  2126,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,  2142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1921,    -1,    -1,  1988,  1921,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2192,    -1,  2194,  2195,  2196,
      -1,  2006,  2691,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2031,    -1,    -1,  1173,
      -1,    -1,    -1,  2038,    -1,    -1,    -1,    -1,   190,   191,
      -1,    -1,  2731,    -1,    -1,    -1,    -1,  1988,    -1,    -1,
      -1,  1988,    -1,    -1,    -1,    -1,  2061,    -1,  2255,    -1,
      -1,    -1,    -1,    -1,    -1,  2006,    -1,    -1,    -1,  2006,
      -1,    -1,    -1,  2762,    -1,  2272,  2765,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
    2031,    -1,    -1,    -1,  2031,    -1,    -1,  2038,    -1,    -1,
      -1,  2038,   254,   255,   256,   257,   258,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2061,  2318,  2319,    -1,  2061,    -1,  2323,  2324,    -1,    -1,
      -1,  2328,    -1,    -1,  2331,  2332,    -1,    -1,    -1,  2336,
      -1,  1285,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,  1295,    -1,  1297,    -1,     0,  1300,  1301,  1302,  1303,
      -1,    -1,  2359,    -1,    -1,    -1,  2363,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1324,    -1,    -1,    -1,    -1,    -1,  1330,  1331,  1332,  1333,
    2195,    -1,    -1,    -1,  1338,  1339,    -1,  2552,    -1,  1343,
      -1,    -1,    -1,  1347,  2401,    -1,  1350,  1351,  1352,  1353,
    1354,  1355,  1356,  1357,  1358,    -1,    -1,  1361,    -1,   371,
     372,    -1,  1366,   190,   191,  1369,    -1,  1371,    -1,  1373,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2434,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2443,    -1,    -1,    94,
    2255,    -1,  1396,    -1,  2195,  2452,    -1,    -1,  2195,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1427,  1428,  2482,    -1,   254,   255,   256,
     257,   258,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,    -1,  2658,   149,    -1,    -1,    -1,   816,    -1,
      -1,    -1,    -1,    -1,  2255,   823,    -1,   162,  2255,  2324,
    3009,    -1,   167,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,   485,   486,    -1,    -1,    -1,   183,    -1,
      -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,  2546,
      -1,    -1,    -1,    -1,    -1,  2552,    -1,    -1,  2555,    -1,
      -1,  1505,  2559,    -1,  1508,  1509,    -1,  1511,    -1,    -1,
    2567,  2568,    -1,   218,  2571,  2730,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2324,    -1,    -1,  2583,  2324,    -1,    -1,
      -1,    -1,   237,    -1,    -1,  2592,    -1,    -1,    -1,    -1,
    2597,  1545,   910,  2600,   371,   372,    -1,    -1,    -1,    -1,
    2607,  2608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2616,
      -1,    -1,    -1,    -1,    -1,    -1,   934,    -1,   936,   937,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2636,
      -1,  2638,   287,    -1,    -1,   290,    -1,  2452,    -1,    -1,
      -1,   296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2658,    -1,  1607,    -1,    -1,    -1,    -1,    -1,    -1,
    1614,    -1,    -1,    -1,    -1,  1619,    -1,  2482,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2691,    -1,  1004,    -1,    -1,  1007,
    1008,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     355,  2452,    -1,  1657,    -1,  2452,    -1,    -1,   485,   486,
      -1,    -1,    -1,    -1,    -1,  1669,    -1,  1671,  1672,  2726,
      -1,    -1,    -1,  2730,  2731,  1679,    -1,    -1,    -1,  1683,
      -1,  2482,  1686,    -1,    -1,  2482,    -1,    -1,    -1,    -1,
    2555,     8,    -1,    -1,    11,    -1,    -1,  2754,    -1,    -1,
      -1,  2758,    -1,    -1,    -1,  2762,    -1,   412,  2765,    -1,
      -1,    -1,  2769,    -1,    -1,    -1,  1720,    -1,    -1,  1723,
      -1,  1725,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    -1,   439,    -1,    -1,    -1,  2795,    -1,
      -1,    -1,   447,    -1,    -1,    -1,    -1,    -1,  2805,    -1,
      -1,    -1,  2809,  2810,  2555,    -1,    -1,    74,  2555,   464,
      -1,   466,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,  1792,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,   503,    -1,
      -1,   506,   507,   508,    41,  1809,  1810,    -1,    -1,    -1,
      -1,    48,    -1,    -1,  2871,     8,    -1,  2874,    11,    -1,
      -1,    -1,  1190,    -1,  1828,    -1,  2691,    -1,    -1,    -1,
     147,    -1,    -1,  1201,    -1,  1203,    -1,    74,  2895,    -1,
    2897,    -1,  2899,    -1,  1212,    -1,    -1,    -1,    41,    -1,
      -1,    -1,  2909,    -1,    -1,    48,    -1,    -1,    -1,    -1,
     177,  1229,     8,    -1,  2921,    11,  2731,    -1,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,   195,    -1,
      -1,    74,  1886,   200,    -1,  2942,    -1,    33,  1256,  1257,
    2691,    -1,    -1,    -1,  2691,    41,    -1,  2762,    -1,    -1,
    2765,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2969,  2970,    -1,    -1,    -1,    -1,    -1,   236,
    1288,  1289,    -1,    -1,  1292,  1293,  2983,    -1,    74,    -1,
    2731,    -1,    -1,    -1,  2731,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3008,  3009,    -1,   147,    -1,    -1,    -1,   195,    -1,
      -1,  2762,    -1,   200,  2765,  2762,    -1,    -1,  2765,    -1,
      -1,    -1,  3029,    -1,  3031,   292,    -1,    -1,    -1,    -1,
      -1,  1985,    -1,    -1,   177,   222,   223,    -1,    -1,    -1,
    1994,    -1,   911,  1997,    -1,    -1,  2000,    -1,    -1,   236,
      -1,    -1,   195,    -1,    -1,    -1,    -1,   200,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2026,  2027,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,   951,    -1,    -1,    -1,  2040,    -1,   275,    -1,
      -1,   278,    -1,   236,    -1,  2049,    -1,    -1,  2052,   195,
    2054,    -1,  3109,    -1,   200,   292,    -1,    -1,  2062,  1427,
    1428,    -1,    -1,    -1,    -1,    -1,  2070,  2071,    -1,    -1,
     387,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
     236,    -1,    -1,    -1,    -1,    -1,  2100,    -1,    -1,   292,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1478,    -1,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,
    1488,    -1,  2126,  1491,    -1,    -1,    -1,    -1,    -1,   275,
      47,    -1,   278,    -1,    -1,    -1,    -1,    -1,  2142,    56,
      -1,  1060,    -1,    -1,  3009,    36,   292,    -1,  1067,   295,
     387,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,    92,    -1,    94,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   387,   112,    -1,    -1,  1566,  1567,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3009,   126,
      -1,    -1,  3009,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,   138,  1590,    -1,    -1,   116,    -1,    -1,   145,    -1,
      -1,    -1,     8,    -1,    -1,    11,   153,  1605,   155,   156,
      -1,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   168,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    41,    -1,    -1,  2272,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   199,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   489,   214,    74,    -1,
      -1,    -1,    -1,   496,   497,   498,   499,   500,   501,    -1,
      -1,   202,    -1,    -1,  2318,  2319,    -1,    -1,    -1,  2323,
      -1,    -1,   239,    -1,  2328,    -1,    -1,  2331,  2332,    -1,
      -1,    -1,  2336,    -1,    -1,    -1,    23,    -1,    -1,    -1,
      -1,    -1,    29,   489,    -1,    -1,   492,   493,   494,    36,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,   252,    -1,   509,  1283,    -1,    -1,    -1,    55,   260,
      -1,   147,    -1,    -1,    -1,  1294,    -1,    -1,    -1,  1298,
      -1,   272,    -1,    -1,   275,  1304,  1305,  1306,    -1,    -1,
      -1,    -1,    -1,    -1,  1313,  1763,    -1,  2401,    -1,    -1,
     317,   177,    -1,   320,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,   195,
     107,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,
      -1,  1799,  1800,    -1,   351,    -1,    -1,    -1,    -1,  2443,
      -1,    -1,    -1,   360,    -1,    -1,    -1,    -1,    -1,  1368,
      -1,   138,    -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,
     236,    -1,   353,    -1,   381,    -1,    -1,    -1,    -1,   386,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     397,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,
      -1,   408,    -1,  1412,    -1,   412,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   397,  1426,   399,     3,
      -1,   402,  1431,    -1,     8,   202,   292,    11,    -1,    -1,
      -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,   448,    -1,    -1,    -1,    -1,   453,    -1,    -1,    33,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
     467,    -1,    -1,    -1,    48,  2559,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2567,  2568,   252,    -1,  2571,    -1,    -1,
    1938,    -1,    -1,   260,   491,    -1,    -1,    -1,    -1,    -1,
      74,    -1,    -1,    -1,    -1,   272,    -1,    -1,   505,    23,
      -1,   508,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    36,  2607,  2608,    -1,    -1,   294,    -1,    -1,
      -1,   387,  2616,    -1,   505,    -1,    -1,   304,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2638,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     347,    -1,    -1,    -1,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,     8,   107,    -1,    11,    -1,    -1,    -1,    -1,
      16,    17,    18,   177,    -1,    -1,    -1,    -1,   375,    -1,
      -1,    -1,    -1,    -1,   381,    -1,    -1,    33,  1617,    -1,
      36,   195,    -1,    -1,   138,    41,   200,    -1,    -1,    -1,
     397,    -1,    48,   489,    -1,    -1,    -1,  1636,    -1,    -1,
     496,   497,   498,   499,   500,   501,    -1,    -1,   222,   223,
      -1,    -1,    -1,    -1,  1653,    -1,  1655,  1656,    74,  1658,
      -1,  1660,   236,    -1,    -1,    -1,  1665,    -1,    -1,  1668,
    2754,    -1,    -1,    -1,  1673,    -1,    -1,  1676,    -1,    -1,
      -1,    -1,    -1,   450,    -1,  2769,    -1,    -1,   202,  1688,
      -1,    -1,    -1,  1692,  1693,  1694,  1695,    -1,    -1,    -1,
      -1,   275,  1701,  1702,   278,  1704,  1705,    -1,    -1,    -1,
      -1,  2795,    -1,    -1,    -1,    -1,    -1,  1716,   292,    -1,
    1719,   295,    -1,    -1,    -1,    -1,  2810,    -1,  1727,  1728,
    1729,  1730,  1731,  1732,  1733,  1734,  1735,  1736,   252,    -1,
      -1,    -1,    -1,    -1,    -1,  1744,   260,  2195,    -1,  1748,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1770,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   195,
     294,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,
     304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,   387,    -1,  2899,    -1,    -1,    -1,    -1,
     236,    -1,    -1,    -1,    -1,  2909,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   347,    -1,    -1,    -1,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2942,   275,
      -1,   375,   278,    -1,    -1,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,   397,    -1,  2969,  2970,    -1,    -1,    -1,
      -1,    -1,  1891,  1892,  1893,    -1,    -1,    -1,    -1,  2983,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,    -1,    -1,
      -1,  1930,    -1,    -1,     8,    -1,   450,    11,    -1,    -1,
      -1,    -1,    16,    17,    18,    -1,    -1,  3031,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      -1,   387,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1984,    -1,    -1,    -1,    -1,
      -1,  1990,    -1,  2441,    -1,    -1,    -1,    -1,  2446,    -1,
      74,    -1,    -1,    -1,  2003,  2004,  2005,    -1,  2007,  2008,
    2009,  2010,    -1,    -1,  2013,  2014,  2015,  2016,  2017,  2018,
    2019,  2020,  2021,  2022,  2023,  3109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2488,  2489,  2041,    -1,    -1,  2044,    -1,  2046,    -1,    -1,
      -1,  2050,  2051,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2064,  2065,  2066,  2067,    -1,
    2069,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   195,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,   222,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2159,    -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,     8,    -1,    -1,    11,    -1,    48,    -1,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,   275,    -1,    74,   278,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,     8,    -1,   292,    11,
      -1,   295,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,  2680,  2681,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    33,    -1,  2691,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2273,    -1,    -1,    -1,  2277,  2278,
      -1,  2280,    74,    -1,  2283,  2284,  2285,  2286,    -1,    -1,
      -1,  2290,  2291,  2292,  2293,  2294,  2295,  2296,  2297,  2298,
    2299,  2300,  2301,    -1,    -1,    -1,   177,     8,    -1,    -1,
      11,    -1,  2311,   387,    -1,    16,    17,    18,  2317,    -1,
      -1,  2320,    -1,  2322,   195,    -1,    -1,  2326,    -1,   200,
    2329,  2330,    33,    -1,  2333,  2334,    -1,    -1,    -1,    -1,
      41,   177,    21,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,   195,
      -1,    -1,    -1,    -1,   200,   236,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,  2376,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
     236,  2400,    -1,   195,   275,    -1,    -1,   278,   200,    -1,
      -1,    -1,    91,    -1,  2413,   489,    -1,    -1,   492,   493,
     494,   292,   496,   497,   498,   499,   500,   501,    -1,    -1,
     222,   223,   506,    -1,    -1,    -1,    -1,    -1,    -1,   275,
      -1,    -1,   278,    -1,   236,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,   157,    -1,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,
     169,    -1,    -1,    -1,   195,   174,    -1,    -1,    -1,   200,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   387,    -1,    -1,    -1,
      -1,   222,   223,    -1,   203,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2548,
      -1,   387,    -1,  2552,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3009,  2561,  2562,  2563,    -1,    -1,  2566,   247,    -1,
    2569,  2570,   251,    -1,   275,  2574,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,   315,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   331,   489,    -1,    -1,   492,   493,   494,  2658,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2677,    -1,
      -1,    -1,    -1,    -1,    -1,   364,   387,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   375,   489,    -1,   378,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,
     399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2729,  2730,    -1,   412,    -1,    -1,  2735,  2736,  2737,    -1,
     419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   428,
      -1,    -1,    -1,    -1,    -1,   434,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2776,  2777,    -1,
      -1,   460,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,  2801,    -1,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2813,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2868,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2886,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2933,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,  3016,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,  3034,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,    -1,   233,   234,   235,   236,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,   506,    -1,    -1,
      -1,   510,    -1,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,   491,    -1,    -1,    -1,    -1,   496,   497,
      -1,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,    -1,
      -1,    -1,   510,    -1,   512,   513,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,   491,    -1,    -1,    -1,    -1,   496,
     497,    -1,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,    -1,   512,   513,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,   140,    -1,   142,   143,   144,    -1,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
     186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,   232,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,    -1,   413,   414,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,    -1,    -1,    -1,    -1,    -1,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,    -1,   512,   513,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,    -1,    -1,   233,   234,
     235,   236,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,   414,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,    -1,    -1,    -1,    -1,    -1,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,    -1,   512,   513,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,   140,    -1,   142,   143,
     144,    -1,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,   410,   411,    -1,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,
      -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,    -1,   512,   513,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,   414,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,   496,   497,    -1,    -1,    -1,    -1,    -1,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,    -1,   512,
     513,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,   140,    -1,
     142,   143,   144,    -1,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,   186,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
      -1,   413,   414,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,    -1,
      -1,   503,    -1,   505,   506,    -1,    -1,    -1,   510,    -1,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,   414,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,
      -1,    -1,   503,    -1,   505,   506,    -1,    -1,    -1,   510,
      -1,   512,   513,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
     140,    -1,   142,   143,   144,    -1,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,    -1,   413,   414,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,
      -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,    -1,   512,   513,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,    -1,   233,   234,   235,   236,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,    -1,
      -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,
      -1,   510,    -1,   512,   513,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,    -1,    -1,   233,   234,   235,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,   410,   411,    -1,   413,   414,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,
      -1,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,    -1,
      -1,    -1,   510,    -1,   512,   513,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,   414,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,   496,
     497,    -1,    -1,    -1,    -1,    -1,   503,    -1,   505,    -1,
      -1,    -1,    -1,   510,    -1,   512,   513,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,   140,    -1,   142,   143,   144,    -1,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
     186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,    -1,   413,   414,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
     496,   497,    -1,    -1,    -1,    -1,    -1,   503,    -1,   505,
      -1,    -1,    -1,    -1,   510,    -1,   512,   513,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,    -1,    -1,   233,   234,
     235,   236,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,   414,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   497,    -1,    -1,    -1,    -1,    -1,   503,    -1,
     505,    -1,    -1,    -1,    -1,   510,    -1,   512,   513,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,   140,    -1,   142,   143,
     144,    -1,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,   410,   411,    -1,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,
      -1,    -1,   496,   497,    -1,    -1,    -1,    -1,    -1,   503,
      -1,   505,    -1,    -1,    -1,    -1,   510,    -1,   512,   513,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,   414,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    -1,    -1,   496,   497,    -1,    -1,    -1,    -1,    -1,
     503,    -1,   505,    -1,    -1,    -1,    -1,   510,    -1,   512,
     513,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,   140,    -1,
     142,   143,   144,    -1,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,   186,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
      -1,   413,   414,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,    -1,
      -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,    -1,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,   414,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,
      -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,   510,
      -1,   512,   513,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
     140,    -1,   142,   143,   144,    -1,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,   234,   235,   236,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,    -1,   413,   414,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,
      -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,    -1,   512,   513,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,    -1,   233,   234,   235,   236,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,   497,    -1,
      -1,     3,     4,     5,     6,     7,   505,     9,    10,    -1,
      -1,    -1,    -1,   512,   513,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,   140,    -1,
     142,   143,   144,    -1,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,   186,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
      -1,   413,   414,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,    -1,   233,   234,   235,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,   414,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
     140,    -1,   142,   143,   144,    -1,   146,    -1,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,   225,   226,   227,   228,   229,
     230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,    -1,   413,   414,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   496,   497,     3,    -1,
      -1,    -1,    -1,   503,    -1,   505,    -1,    -1,    -1,    -1,
     510,    -1,   512,   513,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,   173,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
     225,   226,   227,   228,   229,   230,    -1,    -1,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,   414,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,    -1,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   506,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,   182,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,   291,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,    -1,     3,   491,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
     140,    -1,   142,   143,   144,    -1,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,   182,    -1,   184,   185,   186,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,    -1,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,   291,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,    -1,   413,   414,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,    -1,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,   414,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,   140,    -1,   142,   143,   144,    -1,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
     186,    -1,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,    -1,    -1,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,    -1,   413,   414,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,    -1,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,     3,    -1,    -1,    -1,    -1,    -1,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,   140,    -1,
     142,   143,   144,    -1,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,   186,    -1,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,    -1,     3,   491,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,     3,   491,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,    -1,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,     3,   491,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,   140,    -1,   142,   143,
     144,    -1,   146,   147,   148,    -1,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,    -1,    -1,   233,
      -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,   318,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,    -1,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
     140,    -1,   142,   143,   144,    -1,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,    -1,    -1,    -1,    -1,
       3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,   505,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,    -1,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,    -1,    -1,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,    -1,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,    -1,   299,   300,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   485,   486,   487,   488,    -1,     3,    -1,   492,
     493,   494,     8,   496,   497,   498,   499,   500,   501,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,   140,    -1,   142,   143,   144,    -1,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
     186,    -1,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,   493,   494,    -1,
     496,   497,   498,   499,   500,   501,     8,    -1,    -1,    11,
      -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    33,    -1,    16,    17,    18,    -1,    -1,    -1,    41,
      -1,    -1,    -1,    -1,     8,    -1,    48,    11,    -1,    -1,
      33,    -1,    16,    17,    18,    -1,    -1,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    33,
      -1,    -1,    74,     8,    -1,    -1,    11,    41,    -1,    -1,
      -1,    16,    17,    18,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    74,     8,    -1,    -1,    11,    -1,    -1,    33,    -1,
      16,    17,    18,    -1,    -1,    -1,    41,    -1,    -1,    -1,
      74,    -1,    -1,    48,    -1,    -1,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    74,    -1,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   177,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    48,   195,   177,    -1,    -1,    -1,   200,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   195,   177,    -1,    -1,    -1,   200,    74,    -1,
     222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   195,    -1,    -1,   236,    -1,   200,    -1,    -1,   222,
     223,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,   222,   223,
     195,   177,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,
      -1,    -1,   236,   275,    -1,    -1,   278,    -1,    -1,   195,
      -1,    -1,    -1,    -1,   200,    -1,    -1,   222,   223,    -1,
     292,    -1,   275,   295,    -1,   278,    -1,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,   222,   223,    -1,   292,
      -1,   275,   295,    -1,   278,    -1,    -1,    -1,    -1,    -1,
     236,   177,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   195,
     275,    -1,    -1,   278,   200,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,   275,
     295,    -1,   278,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
     236,    -1,    -1,    -1,    -1,   387,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
      -1,    -1,    -1,    -1,   387,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,   275,
      41,    -1,   278,   387,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   387,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      -1,    -1,    -1,    -1,   506,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,   496,   497,   498,   499,   500,   501,    -1,
      -1,    -1,    -1,   506,    -1,   489,    -1,    -1,   492,   493,
     494,   387,   496,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,   177,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,    -1,    -1,    -1,
      -1,   506,    -1,   489,   195,    -1,   492,   493,   494,   200,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   387,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,     3,
      -1,   492,   493,   494,    -1,   496,   497,   498,   499,   500,
     501,    -1,    -1,   504,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,   232,   233,
      -1,   235,    -1,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,    -1,   300,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
      48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,   131,   132,    -1,    -1,   135,   136,   137,
     138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
     148,    -1,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,    -1,   300,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
     318,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,    -1,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,
     498,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,   140,    -1,
     142,   143,   144,    -1,   146,   147,   148,    -1,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,   186,    -1,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,    -1,
      -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
     292,   293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,   318,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,    -1,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,     3,     4,     5,
      -1,    -1,    -1,     9,   496,   497,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
      46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,   131,   132,    -1,    -1,   135,
     136,   137,   138,   139,   140,    -1,   142,   143,   144,    -1,
     146,   147,   148,    -1,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
     186,    -1,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,    -1,    -1,   233,    -1,   235,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,    -1,
      -1,   297,   298,    -1,   300,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,   318,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,    -1,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,    -1,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,     3,     4,     5,    -1,    -1,    -1,     9,
     496,   497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,   131,   132,    -1,    -1,   135,   136,   137,   138,   139,
     140,    -1,   142,   143,   144,    -1,   146,   147,   148,    -1,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,    -1,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,    -1,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,    -1,
       8,    -1,    -1,    11,    -1,    -1,   496,   497,    16,    17,
      18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,     8,    -1,    -1,    11,    -1,    -1,
      48,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,     8,   125,    -1,    11,
      -1,    48,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    36,    -1,    -1,    74,    -1,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,   200,   167,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
      -1,   195,    -1,    -1,    -1,    -1,   200,    -1,   236,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   236,    -1,    -1,    -1,    -1,   275,   195,    -1,
     278,    -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,   177,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,   275,    -1,   195,   278,    -1,    -1,    -1,   200,   236,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     222,   223,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,   275,    -1,
      -1,   278,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    -1,   292,    -1,    -1,   295,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   387,
      -1,    -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,
      -1,   318,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   447,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    33,   387,    -1,    36,   177,    -1,
      -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,   489,   195,    -1,   492,   493,
     494,   200,   496,   497,   498,   499,   500,   501,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,   489,    -1,   278,
     492,   493,   494,    -1,   496,   497,   498,   499,   500,   501,
      -1,     8,    -1,   292,    11,    -1,   295,    -1,    -1,    16,
      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   313,    -1,    33,    -1,   177,    -1,
       8,    -1,    -1,    11,    41,    -1,    -1,    -1,    16,    17,
      18,    48,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    33,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    74,    -1,    -1,
      48,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    74,    -1,   387,    16,
      17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,   275,    -1,    -1,   278,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     177,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      -1,    16,    17,    18,    -1,    -1,    -1,    -1,   195,    -1,
      -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,    33,   177,
     489,    36,    -1,   492,   493,   494,    41,   496,   497,   498,
     499,   500,   501,    48,    -1,   222,   223,   195,    -1,    -1,
      -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,    -1,   236,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   387,    74,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,
      -1,    -1,    -1,   200,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,   236,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     489,    -1,   177,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,    -1,    -1,    -1,    -1,    -1,   275,     8,
     195,   278,    11,    -1,    -1,   200,    -1,    16,    17,    18,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
     387,    -1,    -1,    -1,    33,    -1,    -1,   222,   223,    -1,
      -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,   236,     8,    -1,    -1,    11,    -1,    -1,    -1,   387,
      16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
     275,    -1,    48,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
     387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,   420,    -1,    -1,    16,    17,    18,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,   496,   497,
     498,   499,   500,   501,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,   200,   387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,
      -1,   177,   489,   222,   223,   492,   493,   494,    -1,   496,
     497,   498,   499,   500,   501,    -1,    -1,   236,    -1,   195,
      -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,
     236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,
      -1,   496,   497,   498,   499,   500,   501,   177,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   195,   292,    -1,    -1,   295,
     200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   387,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   387,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   387,    -1,    -1,
      -1,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
     496,   497,   498,   499,   500,   501,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,   489,
      -1,    -1,   492,   493,   494,    -1,   496,   497,   498,   499,
     500,   501,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,    -1,   172,    -1,   174,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,   232,   233,    -1,   235,    -1,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,   275,   276,
     277,    -1,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
      -1,   172,    -1,   174,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,   232,   233,    -1,   235,    -1,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,   275,   276,   277,    -1,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,    -1,   172,    -1,   174,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,    -1,
     235,    -1,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,    -1,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,    -1,   233,   234,   235,   236,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,   414,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    -1,    76,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,   169,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,   169,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,   236,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,   291,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,   291,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,     4,    -1,    -1,    -1,    -1,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
      -1,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
      45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,    -1,    -1,   233,    -1,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,   318,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
      49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,   131,   132,    -1,    -1,   135,   136,   137,   138,
     139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
      -1,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,    -1,    -1,   233,    -1,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
      -1,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,   318,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,    -1,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,    -1,    -1,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,    -1,    -1,
     233,    -1,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
      47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,   131,   132,    -1,    -1,   135,   136,
     137,   138,   139,   140,    -1,   142,   143,   144,    -1,   146,
     147,   148,    -1,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,    -1,    -1,   233,    -1,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,   318,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,    -1,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
      -1,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,   140,
      -1,   142,   143,   144,    -1,   146,   147,   148,    -1,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
      -1,    -1,   233,    -1,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,    -1,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,   362,    -1,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,    -1,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,    -1,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    -1,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    -1,    -1,    -1,   102,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,   131,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,    -1,   142,   143,   144,
      -1,   146,   147,   148,    -1,   150,   151,   152,   153,    -1,
     155,   156,   157,   158,    -1,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,    -1,
      -1,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,    -1,    -1,   233,   234,
     235,   236,    -1,   238,   239,   240,    -1,    -1,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
      -1,   276,   277,   278,   279,    -1,    -1,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,    -1,   299,   300,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,   314,
     315,    -1,   317,   318,    -1,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,    -1,   410,   411,    -1,   413,   414,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,    -1,
     425,   426,    -1,   428,    -1,    -1,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,    -1,   448,   449,   450,   451,   452,    -1,   454,
      -1,   456,   457,   458,   459,   460,   461,   462,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     485,   486,   487,   488,    -1,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    -1,    -1,    -1,   102,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,   131,   132,    -1,
      -1,   135,   136,   137,   138,   139,   140,    -1,   142,   143,
     144,    -1,   146,   147,   148,    -1,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
      -1,    -1,   186,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,    -1,    -1,   233,
     234,   235,   236,    -1,   238,   239,   240,    -1,    -1,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,    -1,   276,   277,   278,   279,    -1,    -1,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,    -1,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,    -1,
     314,   315,    -1,   317,   318,    -1,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,    -1,   410,   411,    -1,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,    -1,
      -1,   425,   426,    -1,   428,    -1,    -1,   431,   432,   433,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,    -1,   448,   449,   450,   451,   452,    -1,
     454,    -1,   456,   457,   458,   459,   460,   461,   462,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,   487,   488,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      -1,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,    -1,   135,   136,   137,   138,   139,   140,    -1,   142,
     143,   144,    -1,   146,   147,   148,    -1,   150,   151,   152,
     153,    -1,   155,   156,   157,   158,    -1,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,    -1,    -1,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,    -1,    -1,
     233,   234,   235,   236,    -1,   238,   239,   240,    -1,    -1,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,    -1,   276,   277,   278,   279,    -1,    -1,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,    -1,   299,   300,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,    -1,   317,   318,    -1,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,    -1,   410,   411,    -1,
     413,   414,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,    -1,   425,   426,    -1,   428,    -1,    -1,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,    -1,   448,   449,   450,   451,   452,
      -1,   454,    -1,   456,   457,   458,   459,   460,   461,   462,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   485,   486,   487,   488,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    -1,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    -1,    -1,    -1,
     102,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
     132,    -1,    -1,   135,   136,   137,   138,   139,   140,    -1,
     142,   143,   144,    -1,   146,   147,   148,    -1,   150,   151,
     152,   153,    -1,   155,   156,   157,   158,    -1,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,    -1,    -1,   186,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,    -1,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,    -1,
      -1,   233,   234,   235,   236,    -1,   238,   239,   240,    -1,
      -1,   243,   244,   245,   246,   247,    -1,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,    -1,    -1,   276,   277,   278,   279,    -1,    -1,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,    -1,   299,   300,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,    -1,   314,   315,    -1,   317,   318,    -1,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
      -1,   383,   384,   385,   386,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,    -1,   408,    -1,   410,   411,
      -1,   413,   414,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,    -1,   425,   426,    -1,   428,    -1,    -1,   431,
     432,   433,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,    -1,   448,   449,   450,   451,
     452,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
     462,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,   486,   487,   488
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    19,    29,    31,    32,    47,    56,    69,    80,    92,
      94,   112,   126,   138,   145,   153,   155,   156,   168,   199,
     214,   239,   317,   320,   351,   360,   374,   381,   386,   397,
     408,   412,   448,   453,   467,   491,   505,   516,   517,   518,
     519,   565,   566,   567,   578,   585,   588,   589,   590,   592,
     594,   598,   612,   613,   614,   616,   618,   619,   620,   621,
     622,   623,   624,   673,   810,   812,   815,   822,   829,   832,
     849,   850,   852,   854,   874,   879,   880,   881,   885,   888,
     895,   899,   902,   908,   918,   425,   470,   851,   203,   367,
     375,   412,   460,   851,     3,    19,    20,    21,    22,    23,
      24,    25,    26,    28,    29,    30,    38,    39,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      54,    55,    56,    57,    58,    59,    62,    63,    64,    65,
      66,    67,    69,    70,    71,    72,    73,    75,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    88,    89,
      90,    91,    92,    93,    95,    96,    97,    98,   102,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   117,
     119,   120,   121,   122,   123,   124,   126,   127,   128,   129,
     130,   131,   132,   135,   136,   137,   138,   139,   140,   142,
     143,   144,   146,   147,   148,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   161,   163,   164,   165,   166,
     168,   170,   171,   173,   174,   175,   176,   177,   178,   180,
     184,   185,   186,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   201,   202,   203,   204,   205,
     206,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   219,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   233,   234,   235,   236,   238,   239,   240,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   276,   277,   278,   279,   281,   282,   283,   284,   285,
     286,   288,   289,   292,   293,   294,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   375,
     376,   377,   378,   379,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   410,   411,   413,   414,   415,   416,   417,   418,   419,
     421,   422,   425,   426,   427,   428,   429,   431,   432,   433,
     434,   435,   436,   437,   438,   441,   442,   443,   444,   445,
     448,   449,   450,   451,   452,   453,   454,   456,   457,   458,
     459,   460,   461,   462,   465,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   729,   795,   799,   802,
     921,   922,   923,   851,    50,   505,   844,   174,   178,   240,
     247,   295,   330,   367,   416,   418,   434,   440,   443,   563,
     586,   828,     3,    27,   248,   320,   405,   793,   799,   921,
      21,    75,    91,   148,   157,   169,   174,   203,   247,   251,
     315,   331,   364,   367,   375,   378,   399,   412,   419,   428,
     434,   460,   579,   580,   583,   851,   793,    94,   457,   505,
     594,   618,   619,   829,   881,   891,   895,   109,    69,   214,
     109,     5,   798,   799,   853,   853,   799,   793,    27,   421,
     425,   615,   799,   919,   920,   851,    27,   133,   631,   632,
     178,   240,   367,   379,   421,   615,   903,   904,   851,   453,
     505,   615,   619,   624,     5,   291,   684,   791,   799,   800,
     173,   505,   876,   505,   338,   625,   626,   793,   625,     3,
     620,   621,     0,   508,   121,   213,   445,    27,   421,   425,
     615,   619,   149,   218,   296,   439,   634,   635,   620,   622,
     623,   509,   457,   889,   193,   791,   793,   193,   791,   193,
     684,   193,   791,   505,   503,   507,   777,   779,   594,   618,
     619,   881,   887,   791,   416,   418,   416,   418,   349,   181,
     193,   799,   799,   804,   338,   375,   412,   460,   791,   203,
      27,   793,   253,   428,   108,   412,   460,   370,     3,    44,
      49,    50,    51,    52,    64,    65,    75,    83,    95,   102,
     113,   114,   137,   165,   171,   173,   177,   193,   195,   209,
     216,   217,   219,   222,   223,   225,   234,   236,   248,   267,
     268,   269,   278,   283,   299,   301,   335,   358,   362,   382,
     387,   390,   405,   414,   421,   422,   433,   454,   457,   584,
     695,   696,   698,   700,   702,   704,   706,   707,   708,   710,
     711,   712,   714,   715,   803,   921,   924,   193,   581,   804,
     193,   792,   793,   193,   793,   505,   593,   563,   891,     3,
      48,    49,    51,    52,    64,    65,    73,   113,   114,   154,
     159,   165,   184,   185,   210,   216,   217,   219,   248,   267,
     269,   274,   281,   283,   298,   302,   316,   319,   335,   362,
     382,   390,   405,   407,   421,   422,   427,   429,   433,   453,
     454,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   892,   894,   895,   897,   898,   921,   925,   889,
     798,   853,   798,   494,   505,   505,   886,   488,   224,   507,
     290,     4,     6,     7,     8,     9,    10,    35,    49,    51,
      52,    60,    61,    64,    65,    73,    75,    99,   100,   101,
     102,   103,   104,   105,   113,   114,   116,   154,   159,   160,
     165,   184,   185,   216,   217,   219,   241,   242,   267,   269,
     275,   280,   281,   283,   292,   302,   316,   335,   362,   380,
     390,   407,   421,   422,   427,   429,   430,   433,   446,   454,
     489,   496,   497,   498,   503,   505,   510,   512,   513,   620,
     664,   699,   702,   705,   706,   707,   709,   710,   711,   714,
     715,   726,   728,   729,   730,   732,   745,   746,   752,   771,
     776,   783,   784,   795,   796,   797,   798,   799,   782,   783,
     903,   903,   798,   903,   488,   172,   423,   494,   505,   791,
     498,   779,     3,   171,   173,   457,   875,   877,   895,   171,
     878,   726,   756,   799,   625,   509,   505,   806,   509,   506,
     506,   518,   172,   220,   684,   882,   488,   224,    27,   133,
     630,   630,    54,   630,   162,   167,   237,   287,   640,   642,
     643,   666,   668,   669,   670,   634,   635,   505,   791,   154,
      23,    29,   138,   294,   347,   351,   381,   450,   572,   575,
     576,   347,   154,    36,    55,   107,   202,   252,   260,   272,
     304,   347,   353,   375,   381,   397,   575,   816,   819,   154,
     347,   381,   575,   154,   347,   381,   575,     3,    27,    44,
      50,    75,    83,    95,   102,   133,   171,   173,   177,   195,
     209,   222,   223,   225,   234,   236,   248,   268,   278,   299,
     301,   358,   387,   405,   414,   433,   455,   457,   498,   506,
     726,   758,   759,   801,   807,   921,   926,   726,   778,     3,
      27,    31,    32,    33,    34,    35,    36,    37,    40,    53,
      60,    61,    68,    74,    76,    87,    94,    99,   100,   101,
     103,   104,   105,   116,   118,   125,   133,   134,   141,   145,
     149,   160,   162,   167,   169,   172,   179,   181,   182,   183,
     187,   200,   207,   218,   220,   231,   232,   237,   241,   242,
     275,   280,   287,   290,   291,   295,   296,   313,   323,   340,
     355,   374,   380,   392,   409,   412,   420,   423,   424,   430,
     439,   440,   446,   447,   453,   455,   463,   464,   466,   467,
     794,   808,   921,   925,   927,   777,   506,   505,   553,   563,
       3,   275,   813,   507,   805,    36,   460,   193,   791,   193,
     791,   831,   791,   505,   587,    83,   825,   471,    84,   129,
     307,   417,   456,   713,   713,   713,   505,   701,   701,   319,
     505,   703,   154,   505,    64,    65,   713,   701,   698,   469,
     491,   505,   716,   505,   716,    58,   354,   509,   582,   505,
      35,   697,   505,   110,   111,   190,   191,   254,   255,   256,
     257,   258,   259,   262,   263,   371,   372,   485,   486,   505,
     717,   718,   719,   720,   721,   722,   723,   724,   725,   701,
     154,   509,   582,   154,   509,   582,   154,   290,   756,   412,
     506,   509,     4,   160,   290,   430,   496,   497,   797,   798,
     818,   821,   890,   892,   893,   896,   891,   505,   839,   843,
     818,   896,   905,   907,   758,   696,   760,    36,   235,   799,
     505,   780,   503,   726,   775,   505,   505,   167,   505,   505,
     620,   505,   505,   505,   726,   505,   505,   505,   505,   505,
     505,   505,   505,   505,   726,   726,   726,   150,   785,   786,
     756,   757,   620,   726,   756,   747,   748,   799,   800,     9,
     780,   779,   505,   798,   505,   797,   798,     3,     8,    11,
      16,    17,    18,    33,    36,    41,    48,    74,   177,   195,
     200,   222,   223,   236,   275,   278,   292,   295,   387,   489,
     492,   493,   494,   496,   497,   498,   499,   500,   501,   750,
     751,   752,   754,   468,   733,   780,    15,   301,   726,    15,
     220,   509,   627,   505,   798,   780,   507,   779,   627,     3,
     116,   240,   715,   798,   818,   906,    98,   116,   907,   116,
     907,   791,   506,   509,   889,   506,   509,   626,   792,    36,
     250,   882,   596,   791,    36,   799,   381,   235,   622,   622,
     636,   637,   726,   622,   164,   271,   656,   226,   272,   334,
     384,   445,     4,     9,    27,   651,   726,   496,   497,   652,
     653,   726,   728,   666,   667,   643,   642,   640,   641,   167,
     669,   285,   671,   640,   666,   756,   806,   791,    68,    76,
      87,   169,   193,   323,   440,   534,   544,   559,   799,    76,
      87,   811,    87,   811,   505,   423,   505,   532,   246,   443,
     532,    87,   509,   423,   791,   698,   818,    54,   820,   818,
     818,   107,   252,   260,    54,   423,   467,   491,   817,   265,
     367,   817,   819,   684,    87,   423,   811,   367,   791,   423,
     367,   758,   758,   759,   506,   509,   634,   635,    13,    14,
     504,   514,   423,   552,   557,   799,   467,   842,   338,   412,
     460,   273,   459,   909,   154,    94,   519,   590,   616,   814,
     822,   794,   507,   146,   791,   275,   591,   816,   275,   505,
     553,    36,   553,   506,   758,    36,   193,   547,   799,   826,
     505,   756,   797,   584,   760,   713,   713,    35,   697,   421,
     421,   797,   797,   696,   694,   799,   503,   503,   797,   797,
     423,   423,   423,   423,   581,   804,   792,   793,   793,   804,
     506,   193,   791,   831,   891,   897,     4,   797,     4,   797,
     808,   841,   848,    50,    96,   122,   143,   147,   168,   171,
     188,   280,   288,   332,   845,   509,   506,   509,   506,   509,
     887,   756,   777,   757,   463,   772,   773,   726,   756,   505,
     797,   797,     3,   717,   718,   719,   720,   721,   722,   723,
     724,   761,   762,   798,   797,   797,   726,     8,    16,    17,
      18,   492,   493,   494,   496,   497,   498,   499,   500,   501,
     750,   755,   799,   726,   763,   496,   497,   505,   727,   728,
     752,   765,   776,   506,   756,   726,   756,   766,   726,    53,
     172,   232,   424,   726,   756,   769,   726,   505,   799,   349,
     789,   504,   506,   509,   509,   511,   514,   756,   726,   725,
     725,   696,   726,   726,   726,   726,     5,   808,   809,   421,
      40,   409,   781,   804,   726,   726,   505,   620,   770,   133,
     160,   275,   280,   285,   430,   441,   726,   280,   505,   726,
     423,    48,   177,   195,   200,   236,   387,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,    27,    34,   392,
     749,   183,   163,   734,   726,   362,   505,   746,   726,   178,
     240,   412,   416,   418,   443,   628,   791,   784,   172,   674,
     758,   498,   674,   505,   798,   506,   791,   875,   566,   791,
     726,   506,   505,     3,    67,   385,   857,   858,   447,   884,
     116,   303,   505,   595,   619,    36,   799,   505,   600,   609,
     611,   799,   509,    37,   125,   447,   638,   362,   363,   496,
     497,   653,   655,   728,   384,   226,   291,   312,   312,   509,
     500,     4,   654,   797,   654,   362,   363,   655,   790,   791,
     279,   389,   672,   667,   641,   506,   347,   575,   505,   193,
     544,   793,   226,   275,   226,   447,   505,   537,   696,   793,
     799,   193,   793,   193,   799,    23,   138,   381,   527,   542,
     571,   574,   808,   793,   536,   556,   808,   793,   572,   793,
     347,   381,   575,   816,   818,   804,   793,   818,   804,   793,
     818,   347,   381,   575,   793,   793,   793,   793,   347,   381,
     575,   793,   793,   634,   634,   634,   455,   759,   194,   352,
     633,   726,   726,   726,   778,   328,   838,   506,   509,   288,
     172,   423,   833,   460,   791,   791,   413,   799,   563,   794,
     505,   505,   154,   154,   236,   534,   544,   548,   551,   560,
     562,   799,   467,   469,   539,   153,   619,   467,   827,   506,
     726,   275,   290,   756,   506,   506,   582,   506,   503,   488,
     488,   506,   506,   506,   509,   696,   797,   504,   797,   506,
     506,   718,   720,   721,   722,   721,   722,   722,   582,   582,
     290,   582,   275,    36,   498,   505,   818,   840,   896,   506,
     509,    36,   837,   798,   837,   275,   280,   332,   837,   837,
     905,   696,   506,   504,   726,   141,   773,   774,    36,   506,
     726,   506,   506,   506,   172,   506,   506,   509,   506,   507,
     313,   764,   506,   727,   727,   726,    11,    16,    17,    18,
     200,   222,   292,   492,   493,   494,   496,   497,   498,   499,
     500,   501,   752,   727,   506,   506,   167,   172,   767,   768,
     506,    36,   769,   756,   769,   769,   172,   506,    36,   792,
     505,   726,   787,   780,   726,   747,   726,   506,   506,   488,
     727,   727,   147,   756,   172,   133,   160,   280,   285,   430,
     441,   505,   147,   755,   726,   409,   781,   726,   770,   726,
     423,   505,   620,   505,   505,   300,   738,   416,   418,   416,
     418,   791,   412,   629,   629,   629,   182,   231,   363,   505,
     620,   675,   676,   677,   684,   685,   729,   731,   732,   799,
     464,   690,   634,   786,   690,   797,   725,   806,   887,    36,
     857,   857,   509,   690,   492,   497,   505,   859,   860,   863,
     869,   870,   871,   872,   873,   675,   464,   883,   453,   411,
     446,   604,   599,   608,   799,   290,   601,   799,   605,   611,
     509,   674,   494,   780,   637,   292,   750,   753,   490,   639,
       4,   797,   655,   291,   445,   652,   509,   245,   423,   726,
     275,   559,   505,   154,   505,   537,   203,   557,   520,   294,
     530,   520,    23,   138,   351,   353,   381,   568,   569,   570,
     576,   577,   154,   582,   154,   582,   527,   542,   527,   523,
     798,   506,   509,   506,   509,   494,   507,   423,   367,    87,
     423,   811,   367,   423,   423,   423,   367,   633,   633,   633,
     759,   282,   282,   506,   504,   400,   401,   798,   847,   552,
     838,   791,   505,   553,   505,   813,   412,   798,   900,   901,
     557,   791,   791,   831,   791,   506,   509,   288,   532,   288,
     290,   531,   793,   467,   830,   532,    36,   154,   791,   506,
     697,   797,   716,   716,   697,   799,   504,   504,   804,   154,
     835,   846,   896,   841,   798,   798,   280,   557,   498,   557,
     798,   798,   420,   726,   145,   696,   506,   726,   726,   755,
     726,   767,   696,   727,   727,   727,   727,   133,   275,   285,
     727,   727,   727,   727,   727,   727,   727,   727,   727,   727,
     726,   726,   768,   767,   696,   506,   506,   506,   756,   696,
     506,   726,   787,   788,    36,   506,   725,   726,    33,    33,
     726,   506,   726,   172,   505,   760,   726,   506,   147,   727,
     727,   147,   147,   726,   726,   635,   464,   505,   739,   799,
     629,   629,   629,   629,   791,   791,   791,   505,   854,   620,
     685,   172,   620,   676,   677,    36,   678,   679,   799,   509,
      95,   173,   209,   225,   234,   268,   358,   681,   679,    36,
     678,   680,   799,   491,   689,   779,   726,   183,   657,   633,
     789,   657,   506,   506,   690,   690,   858,    77,   855,   497,
       3,   222,   503,   514,   865,   867,   868,     3,   862,   860,
     726,   355,   603,   452,   506,   509,   780,    85,   603,   506,
     509,   600,   883,   726,   505,   639,   164,   230,   291,   791,
     793,   506,   154,   557,   544,   557,   520,   547,   506,   118,
     207,   272,   275,   543,   505,   554,   176,   116,   192,   275,
     532,   817,   108,   116,   176,   275,   399,   402,   532,   819,
     381,   570,   434,   793,   799,   574,   556,     3,    44,    50,
      75,    83,    95,   102,   171,   173,   177,   195,   209,   222,
     223,   225,   234,   236,   248,   268,   274,   278,   292,   299,
     301,   358,   382,   387,   405,   414,   433,   457,   496,   497,
     521,   558,   696,   753,   798,   801,   818,   921,   927,   808,
     793,   793,   793,   793,   793,   793,   793,   793,   793,   793,
     506,   506,   506,   634,   817,   847,   505,   551,   827,   791,
     911,   912,   193,   791,   506,   509,   506,   591,   505,    36,
     541,   539,   548,    80,   593,   108,   272,   619,   547,   447,
     824,   504,   696,   582,   831,   506,   509,   557,   726,   506,
     506,   768,   172,   133,   285,   505,   506,   506,   506,   509,
     799,   726,   726,   726,   760,   506,   726,    33,    33,   726,
     726,   147,   506,   506,   726,   740,   799,   791,   791,   791,
     791,   679,   680,   505,   506,   799,   800,   414,   648,   649,
     505,   676,   225,   299,   682,   676,   682,   225,   681,   682,
     225,   649,   505,   799,   649,   505,   297,    54,   187,   665,
     506,   665,   798,   855,   855,   859,   505,   506,   503,   868,
     865,   866,     3,   861,   864,     3,    15,   497,   866,   506,
     783,   619,   303,   619,   599,   290,   505,   597,   494,   611,
     603,   755,   520,   544,   506,   506,   467,   550,   119,   196,
     205,   118,   449,   527,   545,    68,    74,    87,   116,   118,
     176,   207,   275,   280,   323,   340,   440,   447,   525,   526,
     538,    30,    54,   564,   193,   280,   818,   726,   564,   280,
     496,   497,   821,   799,   696,   582,   582,   248,   405,   801,
     805,   494,   423,   423,   633,   839,   447,   834,   836,   557,
     506,    36,   226,   913,   506,   509,   275,   505,   798,   827,
     551,   153,   619,   151,   201,   531,   121,   138,   322,   830,
     108,   467,   617,   290,   799,   823,   505,    36,   846,   727,
     172,   505,   760,   787,   506,   726,   726,   726,   506,   309,
     741,   686,   687,   731,   678,   505,     4,     9,   644,   646,
     647,   799,   792,   676,   290,   447,   683,   676,   225,   676,
     691,   692,   799,   505,   691,   799,    97,   184,   361,   505,
     658,   659,   660,   661,   662,   663,   726,   726,   466,   735,
     798,   735,   506,   506,   784,   856,   791,   861,   497,    93,
     498,   504,   866,   604,    87,   505,   602,   610,   731,   799,
     134,   726,   506,   340,   550,   505,   540,   520,   506,   509,
     505,   804,   793,   727,   564,   119,   196,   118,   280,   226,
     791,   550,    82,   116,    36,   154,    74,   693,   805,   500,
     521,   793,   793,   506,   817,   123,   506,   539,   619,   505,
     227,   914,   140,   344,   910,   912,   154,    36,   506,   793,
     830,    27,    79,    88,   117,   192,   204,   399,   402,   535,
     535,   363,   363,    59,    68,   240,   791,   610,   727,   760,
     506,    54,   634,   506,   509,    36,   688,   792,   312,   500,
     312,   363,   500,   505,   505,   506,   726,   505,   676,   683,
     506,   509,   696,   691,   506,   505,   383,   505,   506,   509,
     736,   737,   799,   447,   645,   645,   791,   791,   506,   509,
     498,   504,   799,     9,   504,    15,   497,   452,   793,   726,
     506,   509,    74,   606,   606,   276,   445,   791,   520,   546,
     549,   808,   527,   726,   275,   526,    36,   550,   553,   793,
     192,   804,   447,   573,   500,   434,   839,   798,   827,   531,
     617,   792,     3,   116,   915,   132,   227,   413,   791,   619,
     539,   593,    68,   293,    68,   824,   506,   506,   756,   333,
     363,   742,   689,   686,   505,   506,   799,   644,   792,   692,
     693,   506,   756,   505,   756,   659,   509,    36,   365,   784,
       9,   504,   497,   504,    12,    15,   497,   619,   506,   690,
     602,   804,   607,   804,   607,   381,   553,   506,   509,   494,
     506,   192,   250,   561,   505,   522,   726,   434,    36,   506,
     799,     3,   505,   505,   617,   531,   830,   293,   293,   505,
     827,    48,    98,   436,   726,   743,   744,   743,   506,   691,
     506,   509,   506,   506,   506,   658,   506,   737,   739,   647,
      12,   497,   497,     9,   606,   638,   638,   609,   561,   549,
     521,   272,   533,   522,   173,   308,   388,   290,   528,   529,
     555,   816,   619,   791,   916,   917,   610,   690,   744,   362,
     166,   318,   166,   318,   506,     9,   348,   650,   506,     9,
     504,   607,   639,   639,   690,   529,   205,   121,   445,   290,
     555,   290,   528,   506,   617,   913,   506,   509,   506,    33,
     506,   505,   504,    15,   497,   638,   520,    58,   272,   354,
     381,   524,   524,   393,   917,   827,   744,     9,   497,   639,
      22,   116,   280,   913,   690,   506,   340,   791,   127,   913,
     340,   791,   914
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   515,   516,   517,   517,   518,   518,   518,   518,   518,
     518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
     518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
     518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
     518,   518,   519,   519,   519,   520,   520,   521,   521,   521,
     521,   521,   521,   522,   522,   523,   524,   524,   524,   524,
     524,   525,   525,   525,   525,   526,   526,   526,   526,   526,
     526,   526,   526,   526,   527,   528,   529,   529,   529,   529,
     529,   530,   530,   531,   531,   531,   531,   532,   533,   533,
     534,   534,   535,   535,   535,   535,   535,   535,   535,   535,
     536,   536,   537,   538,   538,   538,   538,   539,   539,   539,
     539,   540,   541,   541,   541,   542,   543,   543,   543,   543,
     543,   543,   544,   545,   545,   546,   546,   547,   548,   548,
     548,   549,   549,   550,   550,   551,   551,   552,   553,   553,
     554,   554,   555,   556,   556,   556,   556,   557,   557,   558,
     558,   558,   559,   559,   559,   559,   559,   559,   560,   560,
     561,   561,   561,   561,   562,   563,   563,   563,   563,   563,
     563,   563,   563,   564,   564,   565,   565,   565,   566,   566,
     567,   567,   567,   567,   567,   567,   567,   567,   568,   568,
     569,   569,   570,   570,   570,   570,   571,   571,   572,   572,
     572,   572,   572,   572,   572,   572,   572,   572,   572,   572,
     572,   572,   572,   572,   572,   572,   572,   572,   572,   572,
     572,   572,   572,   572,   572,   572,   572,   573,   573,   574,
     574,   574,   574,   575,   575,   576,   577,   577,   577,   578,
     578,   578,   578,   578,   578,   578,   578,   579,   579,   579,
     579,   579,   579,   579,   579,   579,   579,   579,   579,   579,
     579,   579,   580,   580,   580,   580,   580,   580,   580,   581,
     581,   582,   582,   582,   583,   583,   583,   584,   584,   585,
     586,   586,   587,   587,   588,   588,   588,   588,   589,   590,
     590,   591,   591,   592,   592,   592,   593,   593,   594,   595,
     595,   595,   595,   595,   596,   596,   597,   597,   597,   598,
     598,   599,   600,   600,   601,   601,   601,   602,   602,   602,
     603,   603,   604,   604,   605,   605,   606,   606,   607,   607,
     608,   608,   609,   609,   610,   610,   611,   612,   612,   613,
     613,   613,   613,   613,   613,   613,   614,   614,   615,   615,
     616,   616,   616,   616,   617,   617,   617,   617,   618,   619,
     619,   620,   620,   621,   621,   621,   621,   621,   621,   621,
     621,   622,   622,   623,   623,   623,   623,   623,   623,   623,
     624,   624,   624,   625,   625,   626,   627,   627,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   629,   629,   630,
     630,   630,   631,   631,   632,   632,   633,   633,   633,   634,
     634,   635,   636,   636,   637,   637,   638,   638,   638,   639,
     639,   639,   640,   640,   640,   640,   641,   641,   642,   642,
     642,   642,   643,   643,   644,   644,   644,   644,   644,   644,
     645,   645,   646,   646,   647,   647,   647,   647,   648,   649,
     649,   650,   650,   651,   651,   651,   651,   651,   652,   653,
     653,   653,   654,   654,   655,   655,   656,   656,   657,   657,
     658,   658,   659,   659,   659,   659,   659,   660,   661,   662,
     663,   664,   664,   665,   665,   666,   666,   667,   667,   668,
     668,   669,   670,   670,   670,   670,   671,   671,   672,   672,
     672,   673,   673,   674,   674,   675,   675,   676,   676,   676,
     676,   676,   676,   676,   676,   677,   677,   677,   677,   677,
     677,   678,   678,   678,   678,   679,   679,   680,   680,   680,
     680,   680,   681,   681,   681,   681,   682,   682,   683,   683,
     684,   684,   684,   684,   685,   685,   686,   687,   687,   688,
     688,   689,   689,   690,   690,   691,   691,   692,   693,   693,
     694,   694,   695,   695,   696,   696,   696,   696,   696,   696,
     696,   696,   697,   697,   697,   698,   698,   698,   698,   698,
     698,   698,   699,   699,   699,   699,   700,   701,   701,   702,
     702,   702,   702,   702,   702,   702,   702,   702,   702,   702,
     703,   703,   704,   704,   705,   705,   706,   707,   708,   708,
     709,   709,   710,   711,   712,   712,   712,   712,   712,   712,
     713,   713,   714,   714,   714,   714,   715,   716,   716,   716,
     717,   717,   718,   718,   719,   719,   720,   720,   721,   721,
     722,   722,   723,   723,   724,   724,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   725,
     725,   725,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
     726,   727,   727,   727,   727,   727,   727,   727,   727,   727,
     727,   727,   727,   727,   727,   727,   727,   727,   727,   727,
     727,   727,   727,   727,   728,   728,   728,   728,   728,   728,
     728,   728,   728,   728,   728,   728,   729,   729,   729,   729,
     729,   729,   729,   730,   730,   731,   731,   732,   732,   732,
     732,   732,   732,   732,   732,   732,   732,   732,   732,   732,
     732,   732,   732,   732,   732,   732,   732,   732,   732,   732,
     732,   732,   732,   732,   732,   732,   733,   733,   734,   734,
     735,   735,   736,   736,   737,   738,   738,   738,   739,   740,
     740,   741,   741,   742,   742,   742,   743,   743,   744,   744,
     744,   744,   744,   745,   745,   746,   746,   747,   748,   748,
     749,   749,   749,   750,   750,   751,   751,   751,   751,   751,
     751,   751,   751,   751,   751,   751,   751,   752,   752,   753,
     753,   754,   754,   754,   754,   754,   754,   754,   754,   755,
     755,   756,   756,   757,   757,   758,   758,   759,   759,   759,
     760,   760,   761,   761,   762,   762,   762,   762,   762,   762,
     762,   762,   762,   762,   763,   763,   764,   765,   765,   766,
     766,   766,   766,   766,   766,   767,   768,   769,   769,   769,
     770,   770,   771,   772,   772,   773,   774,   774,   775,   775,
     776,   776,   777,   777,   777,   778,   778,   779,   779,   780,
     780,   781,   781,   782,   782,   783,   783,   784,   784,   784,
     784,   784,   785,   785,   786,   786,   787,   788,   788,   789,
     789,   789,   790,   790,   791,   791,   792,   792,   793,   794,
     795,   795,   796,   796,   796,   796,   796,   796,   796,   796,
     796,   796,   796,   796,   796,   796,   797,   798,   799,   799,
     799,   800,   800,   801,   801,   801,   802,   802,   802,   803,
     803,   803,   804,   804,   805,   805,   806,   806,   807,   808,
     808,   808,   808,   809,   809,   810,   810,   810,   810,   810,
     810,   810,   810,   810,   810,   810,   810,   810,   811,   811,
     812,   812,   813,   813,   814,   814,   814,   814,   815,   815,
     816,   816,   817,   817,   817,   818,   818,   818,   818,   819,
     819,   819,   819,   819,   819,   819,   819,   819,   819,   819,
     819,   819,   819,   820,   820,   821,   821,   821,   822,   822,
     823,   824,   824,   825,   825,   826,   826,   827,   827,   828,
     828,   829,   829,   830,   830,   830,   831,   832,   832,   833,
     833,   834,   834,   835,   835,   836,   836,   837,   837,   838,
     838,   839,   839,   840,   840,   840,   840,   840,   841,   842,
     842,   843,   843,   844,   844,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   846,
     847,   847,   847,   848,   848,   849,   849,   849,   849,   849,
     849,   850,   850,   850,   850,   850,   850,   851,   851,   851,
     852,   852,   852,   853,   853,   854,   854,   854,   855,   855,
     856,   856,   857,   857,   858,   858,   859,   859,   860,   860,
     861,   862,   863,   864,   864,   865,   866,   866,   867,   867,
     868,   868,   869,   870,   870,   870,   871,   871,   871,   871,
     872,   872,   872,   872,   873,   873,   873,   873,   873,   874,
     874,   874,   874,   874,   875,   875,   875,   875,   875,   876,
     876,   877,   877,   878,   878,   879,   880,   881,   882,   882,
     882,   883,   883,   884,   884,   885,   886,   886,   887,   887,
     887,   887,   888,   888,   888,   888,   889,   889,   890,   890,
     890,   891,   891,   891,   891,   891,   892,   892,   892,   893,
     893,   894,   894,   895,   895,   896,   896,   896,   896,   897,
     898,   898,   899,   900,   900,   901,   901,   902,   902,   902,
     902,   903,   903,   903,   903,   904,   904,   904,   904,   905,
     905,   906,   906,   906,   906,   906,   906,   906,   907,   907,
     908,   908,   909,   909,   910,   910,   911,   911,   912,   912,
     913,   914,   914,   915,   915,   916,   916,   917,   918,   919,
     919,   920,   920,   920,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   924,   924,   924,
     924,   924,   924,   924,   924,   924,   924,   924,   924,   924,
     924,   924,   924,   924,   924,   924,   924,   924,   924,   924,
     924,   924,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   926,   926,   926,   926,   926,   926,
     926,   926,   926,   926,   926,   926,   926,   926,   926,   926,
     926,   926,   926,   926,   926,   926,   926,   926,   926,   926,
     926,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     9,    12,    11,     0,     2,     1,     1,     1,
       1,     1,     1,     3,     0,     1,     2,     1,     1,     2,
       2,     3,     1,     1,     2,     2,     1,     2,     3,     5,
       3,     2,     5,     5,     2,     3,     1,     1,     2,     2,
       0,     4,     0,     3,     4,     4,     0,     3,     2,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     2,     2,     2,     2,     2,     2,
       0,     3,     3,     3,     0,     1,     2,     1,     2,     2,
       2,     2,     4,     1,     3,     1,     3,     1,     1,     1,
       1,     3,     1,     2,     0,     1,     0,     1,     3,     0,
       2,     0,     3,     3,     1,     5,     3,     1,     3,     1,
       4,     5,     5,     6,     3,     7,     4,    11,     1,     3,
       2,     2,     2,     0,     3,     1,     1,     2,     2,     2,
       2,     1,     0,     1,     2,     2,     4,     5,     2,     4,
       4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
       3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
       3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
       4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
       6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
       2,     2,     2,     1,     3,     4,     2,     1,     0,     6,
       4,     6,     4,     6,     8,     4,     6,     1,     1,     1,
       1,     1,     2,     1,     2,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     1,
       3,     1,     1,     0,     1,     1,     1,     1,     3,     6,
       1,     1,     2,     3,     2,     3,     2,     3,     2,     5,
       8,     1,     0,     3,     9,    12,     3,     0,     7,     1,
       4,     4,     7,     2,     1,     3,     4,     3,     0,     1,
       0,     2,     3,     5,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     3,     2,     2,     1,     2,
       2,     2,     2,     3,     4,     2,     1,     1,     1,     3,
       9,    11,    12,    14,     3,     4,     4,     0,     8,     1,
       1,     3,     3,     1,     2,     4,     4,     2,     3,     5,
       5,     1,     1,    10,    10,     1,     2,     4,     4,     4,
       2,     2,     3,     1,     3,     6,     2,     0,     3,     3,
       4,     4,     4,     4,     3,     2,     1,     1,     0,     1,
       1,     0,     1,     5,     1,     0,     2,     2,     0,     1,
       0,     3,     1,     3,     4,     3,     1,     1,     0,     2,
       2,     0,     2,     2,     1,     1,     1,     0,     2,     4,
       5,     4,     2,     3,     2,     2,     2,     2,     1,     2,
       3,     0,     1,     0,     5,     1,     4,     6,     2,     1,
       0,     4,     0,     1,     1,     2,     2,     2,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     3,     1,     1,     1,     1,     1,     2,     4,     4,
       5,     1,     1,     2,     0,     1,     3,     1,     0,     1,
       2,     3,     2,     4,     2,     3,     2,     0,     1,     2,
       0,     4,     5,     2,     0,     1,     3,     3,     3,     3,
       3,     3,     1,     4,     2,     3,     4,     5,     4,     5,
       4,     5,     2,     4,     1,     1,     0,     1,     4,     5,
       4,     0,     2,     2,     2,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     2,     3,     5,     6,     2,     3,
       5,     5,     3,     4,     0,     1,     1,     1,     1,     1,
       2,     4,     1,     1,     1,     1,     2,     3,     0,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     1,
       3,     0,     1,     1,     1,     1,     5,     2,     1,     1,
       1,     1,     4,     1,     2,     2,     1,     3,     3,     2,
       1,     0,     5,     2,     5,     2,     1,     3,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     0,     1,     3,     3,     5,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,
       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,
       3,     2,     4,     3,     2,     1,     3,     3,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       4,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       5,     6,     6,     7,     1,     1,     2,     2,     2,     4,
       1,     2,     1,     2,     2,     4,     3,     6,     7,     9,
       7,     7,     4,     4,     1,     1,     1,     5,     1,     1,
       4,     1,     4,     1,     4,     1,     4,     1,     1,     1,
       1,     1,     1,     6,     6,     4,     4,     4,     4,     6,
       5,     5,     5,     4,     6,     4,     5,     0,     5,     0,
       2,     0,     1,     3,     3,     2,     2,     0,     6,     1,
       0,     3,     0,     2,     2,     0,     1,     4,     2,     2,
       2,     2,     2,     4,     3,     1,     5,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       4,     1,     4,     1,     2,     1,     2,     1,     2,     1,
       3,     1,     3,     1,     0,     1,     3,     1,     3,     3,
       1,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     5,     1,     2,     4,     2,     0,     1,     0,
       1,     2,     2,     3,     5,     1,     0,     1,     2,     0,
       2,     1,     0,     1,     0,     1,     3,     3,     2,     1,
       3,     5,     4,     2,     1,     0,     3,     1,     3,     4,
       2,     0,     1,     3,     1,     2,     1,     3,     1,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     3,     0,     1,     1,
       1,     1,     1,     1,     1,     6,     6,     8,     6,     8,
       6,     8,     6,     8,     8,    10,     8,    10,     1,     0,
       4,     7,     2,     0,     1,     1,     1,     1,     4,     6,
       1,     2,     1,     1,     0,     1,     2,     2,     1,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     3,     3,
       3,     1,     3,     1,     0,     1,     2,     2,    13,    16,
       1,     2,     0,     1,     0,     1,     0,     2,     0,     1,
       0,     7,    10,     2,     3,     0,     4,    11,     9,     1,
       1,     3,     0,     1,     3,     1,     0,     1,     0,     1,
       0,     1,     3,     1,     1,     1,     3,     0,     2,     2,
       0,     2,     0,     1,     0,     1,     1,     1,     3,     3,
       1,     1,     3,     3,     3,     3,     4,     3,     2,     1,
       1,     1,     1,     1,     3,     6,     8,     6,     8,     6,
       8,     2,     2,     2,     2,     2,     2,     1,     1,     0,
       2,     2,     3,     1,     1,    10,    10,     9,     4,     0,
       1,     3,     2,     4,     2,     0,     1,     2,     1,     1,
       2,     2,     3,     1,     0,     2,     1,     0,     1,     1,
       2,     1,     1,     1,     1,     1,     5,     6,     9,     3,
       6,     7,    10,     4,     5,     6,     9,     3,     7,     4,
       5,     5,     4,     6,     1,     1,     1,     1,     1,     1,
       0,     1,     3,     1,     0,     4,     3,     7,     1,     2,
       3,     2,     0,     2,     0,     5,     3,     0,     1,     1,
       1,     1,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     8,     1,     0,     1,     3,     2,     3,     3,
       3,     1,     3,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     3,
      14,     4,     1,     1,     1,     1,     1,     3,     5,     3,
       4,     2,     3,     1,     1,     1,     3,    11,     2,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 493 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 14828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 509 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 14844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 521 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 14855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 566 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 14861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 14878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 14895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 14912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 14918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 14946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 14952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 14958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 14964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 14970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51:
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 14976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 14982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 14988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54:
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 14994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 15006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 15012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 15018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 15024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 15030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 15041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 15070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 15092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 15106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 15120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 15161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 15174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 212 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 15201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 237 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 15207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 243 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 15213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 245 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 15219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 247 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 15225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 249 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 15231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 251 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 15237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 256 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 15243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 257 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                        { (yyval.list) = NIL; }
#line 15249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 261 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 15255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 262 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 15261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 15267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 264 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 15273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 269 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 15279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 273 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 15285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 274 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 15291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 280 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 15302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 286 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 15314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 292 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 15320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 15326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 294 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 15332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96:
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 15338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 296 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 15344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 15350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 298 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 15356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 304 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 15362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 305 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 15368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 309 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 315 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 15385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 322 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 329 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 15418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 347 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 15430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 349 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 15436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 350 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 15442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 359 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 15454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 360 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 15460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 15466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 366 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 371 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 15478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 372 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 15484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 373 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 15490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 374 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 15496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 15502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 376 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 15508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 382 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 15531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 409 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 15553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 416 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 15559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 420 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 15565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 424 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 425 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 426 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 431 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 15591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 435 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 15599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 442 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 15605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 443 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 448 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 449 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 15623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 454 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 15631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 461 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 462 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 467 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 15649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 468 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 15655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 472 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 15661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 15669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 482 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 15677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 486 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 15686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 491 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 15694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 498 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 499 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 15712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 505 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 15722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 511 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 15733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 15750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 536 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 549 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 564 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 577 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 592 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 15842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158:
#line 614 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 15850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 618 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 15858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 625 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 15866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 629 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 15878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 15886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 641 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 15894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 649 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 15905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 658 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 659 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 660 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 661 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 15929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 663 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 15940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 670 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 15951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 676 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 15957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 677 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 15963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 682 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 15969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 683 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 15975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 16024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 16148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 16154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 16166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 16174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 16182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 16197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 16205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 16213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 16221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 16315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 16351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 16371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 16451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 16492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 16539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 16549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 16582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 16594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 16602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 16611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 16620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 16628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 16652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 16658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 16664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 16734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 16748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 16762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 16776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 16782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 16788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 16794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 16800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 16806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 16812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 16818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 16824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 16830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 16836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 16842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 16848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 16854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 16860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 16866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 16872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 16878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 16884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 16890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 16896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 16902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 16908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 123 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 16914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 16920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 129 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 16926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 16932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 16938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 136 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 16944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 16950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 16956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 141 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 16962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 16968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-3].range);
					n->params = (yyvsp[-2].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 24 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 16988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 28 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 16996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 17006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 17016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 17026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 17036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 17060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 17074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 17086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 17097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 17117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 17137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 17149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 17161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 17171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 17182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 17192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 17203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 17213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 17221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 17230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 17242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 17254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 17262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 17268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 17274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 17286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 17295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 17320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 17333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 17346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 17354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 17369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 17384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 17399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 17411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 17417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 17423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 17429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 17435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 17447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 17459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 17465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 17471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 17483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 17489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 17495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 257 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 17507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 17539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 17551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 17562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 17573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 17584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 17595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "all";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 17606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 57 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 17612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 59 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 17618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 17634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 17650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 17671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 17692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 17698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 17704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 17710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 17716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 17731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 17737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 17743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 17760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 17796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 17808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 17861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-8].list);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 17879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 186 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 17908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 207 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 232 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 17943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 239 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 17954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382:
#line 246 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 17965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383:
#line 255 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384:
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 17977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385:
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 17990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386:
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 18004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387:
#line 282 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 18010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388:
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389:
#line 296 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390:
#line 301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391:
#line 306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392:
#line 311 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393:
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394:
#line 327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 18079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395:
#line 332 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 18088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396:
#line 337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 18097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397:
#line 343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 18103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398:
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 18109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 18115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 357 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 18133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 358 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 362 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 18145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 18157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 18163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 18175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 378 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 382 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 18193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 18199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 18212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 396 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 18225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 406 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 18231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 18237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 18243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 411 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 18249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 18255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 18261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 18267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 18273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424:
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 18279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425:
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 18285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 18297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 18316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 18322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 450 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 18328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 458 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 18340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 466 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 18348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 470 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 18356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 474 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 18364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 478 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 18372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 482 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 18380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 18388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 493 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 18396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 18402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 504 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 18408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 505 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 18414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 18422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 18430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 18438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 18446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 18454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 18466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 541 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 18472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 18478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 546 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 18493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 18499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 18505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 18511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 18541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 590 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 18547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 18553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 18559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 18565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 18571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 18595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 18633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 663 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 18663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 18669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 681 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 697 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 18729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492:
#line 712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 18735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493:
#line 713 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 18741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494:
#line 714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 18747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495:
#line 715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 18753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496:
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497:
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498:
#line 725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 18771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499:
#line 726 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 18777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500:
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 18783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501:
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502:
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503:
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504:
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505:
#line 765 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506:
#line 766 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507:
#line 773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 18837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 18849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 787 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 18874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 18887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 18895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 18904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 18912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 18920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 18937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 18955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 878 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 18974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 18990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 19017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 19026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 19036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 19045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 19051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 945 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 19057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 19065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 19073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 19083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 19093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 19101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 979 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 19107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 19113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 19119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 19125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 19131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 19143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 19160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 1013 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 1020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 19182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 1027 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 1059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 19208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 19223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 1083 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 19229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 1087 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 19235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 1088 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 19241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 1091 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 19259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 1108 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 19315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 1146 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 19333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 1159 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 19341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 1162 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 19349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 1169 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 19358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 1174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 19368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 1181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 19377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 1186 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 1192 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 19396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 1197 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 19406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 1202 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 19417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 1208 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 19428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 1218 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 19434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 19440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 1222 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 19446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 1228 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 1232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 19485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 1237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 19495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 1256 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 1257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 1258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 1259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 1271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 1284 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 1285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 1292 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 1297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 1302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 1312 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 1317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 1327 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 1333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 1339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 1345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 19668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 1373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 19676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 1383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 1387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 19709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 1407 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 1419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 1440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 1444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 19779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 1467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 19789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 1485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 1487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 1489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 19819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 1491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 1493 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 1495 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 1499 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 19843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 1552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 19914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 1553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 19920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 1583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 19932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 1585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 19938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 1587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 19944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 1589 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 19950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 19956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 1593 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 19962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 19968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 19974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 19983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 19992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 20013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 1622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 20022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 20032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 20041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 20047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 20059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 1674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 1682 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 20081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 1697 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 1699 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 20093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 1705 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 1711 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 1713 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 1723 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 1726 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 1728 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 1730 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 20183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 20201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 20207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 1742 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 1747 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 1752 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 20236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 20245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 1764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 20256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 20277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694:
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 20286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 20298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 20310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 1806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 20322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 1814 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 20334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 1822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 20346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 1840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 1848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 1856 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 20382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 1864 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 20415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 1883 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 20424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 1887 "third_party/libpg_query/grammar/statements/select.y"
                                                {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 20433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 1892 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 1900 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = list_make1((yyvsp[-2].node));
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 1908 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 20477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 1924 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 20489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 20501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 20513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 1948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 20525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 1956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 20537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 1964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 20549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 1972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 20557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 20565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 1980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 20581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 1988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 20593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 1996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 20605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 2004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 20617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 2012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 20629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 20653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 2040 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 20694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 20705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 2080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 2093 "third_party/libpg_query/grammar/statements/select.y"
                                                      {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 20733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 2110 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 2112 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 20745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 20757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 2118 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 2120 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 2122 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 2130 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 2132 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 2134 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 2142 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 2144 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 20847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 20855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 2152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 20863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 2156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 2160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 20879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 20937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 2210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 20953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[-1].node);
					}
				}
#line 20975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 2236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 21018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 21044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 2291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 21052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 21063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 2302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 21075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 2310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 21087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 21102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 2329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 21173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 2400 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 2410 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 2419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 21201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 2425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 21209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 21217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 2433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 21225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 21233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 2441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 21241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783:
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 21249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784:
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 21257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 2453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 21265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 21273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 2461 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 21281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 2465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 21289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 2469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 21297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 2473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 21305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 2477 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 21313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792:
#line 2481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 21321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 2485 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 21327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 21333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 2489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 21341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 2493 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 21354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 2502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 21363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 2507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 21374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 2514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 2529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 2536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 2540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 2544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 21428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 21436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 2552 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 21447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 21465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 2580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812:
#line 2584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 21495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 21505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 21511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 21528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 2614 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 21534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 2619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 21552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 2645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 21564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 2649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 2661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 21586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 2667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 21596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 2673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 21629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 2700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 21670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 2745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 2753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 2761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833:
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 2798 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 21748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 2802 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 21754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 2806 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 21767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 2816 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 2817 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 2819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 21785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 21791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 2821 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 21797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843:
#line 2824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844:
#line 2825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 21809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845:
#line 2828 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 21815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846:
#line 2829 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 21821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 21827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 2831 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 21833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 2832 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 2833 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 21845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 2834 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 21851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 2835 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 21863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 2837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 21869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 2838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 21875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 21881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 2843 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 2845 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 2850 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 2857 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 2859 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 2861 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 21923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 2863 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 21929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 2865 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 21935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 21941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 2869 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 21947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 2871 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 21953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 2885 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 21965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 2902 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 2906 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 21997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 2914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 22021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 22034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 2937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 22047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 2947 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 22053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 22059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 2953 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 22067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 2963 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 22085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 2965 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 2966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 22097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 2967 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 22103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 22109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 2969 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 22121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 2971 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 22127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 2972 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 2983 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 22141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 22149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 2994 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 22161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899:
#line 3018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 22175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 22184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 22211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 3050 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 22225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 3057 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 22243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 3061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 22266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 3072 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 22272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 22286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 22310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 3112 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 3113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 22322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 3116 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 3117 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 22334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 3121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 22342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 3125 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 22350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 3132 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 22370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 3144 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 22382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 3154 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 3155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 22394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 3165 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 3179 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 3184 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 3185 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 22442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 3189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 22454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 22478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 3221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 22497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 3236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 22517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 22541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 3261 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 22547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 22583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953:
#line 3282 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 22589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954:
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 22597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 22626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 22638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 3347 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 22665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 22697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 3378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 3382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 3436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 22779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 3440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 22787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 22795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 3448 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 22803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 3452 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 22811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 22819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 3460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 22827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 22833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977:
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978:
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979:
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980:
#line 3484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 3495 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 3496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 3499 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 3500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 3501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991:
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992:
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993:
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 22935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994:
#line 3514 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995:
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 22947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996:
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997:
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999:
#line 3532 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000:
#line 3533 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001:
#line 3534 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002:
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003:
#line 3538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004:
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 23231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 23237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 23279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 23285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 23291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 23297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 23303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 23312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 23318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 23326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 23350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 23374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 23390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 23423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 23437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 23443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 23455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 23461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 23533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 23539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 23545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 23557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 23569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 23575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 23581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 23621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 23627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 23633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 23647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 23679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 23714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 23768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 23780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 23822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 24022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 24121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 24131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 24170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 24176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 24182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 24193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141:
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 24204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142:
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 24215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143:
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144:
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 24227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145:
#line 11 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    {
        PGMatchPattern *n = makeNode(PGMatchPattern);
        n->pg_name = (yyvsp[-8].str);
        n->distance_type = PG_DISTANCE_TYPE_SHORTEST;
        n->pattern = (yyvsp[-4].list);
        n->where_clause = (yyvsp[-3].node);
        n->columns = (yyvsp[-2].list);
        n->name = (yyvsp[0].range);
        (yyval.node) = (PGNode *) n;
    }
#line 24242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146:
#line 26 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGMatchPattern *n = makeNode(PGMatchPattern);
                n->pg_name = (yyvsp[-8].str);
                n->distance_type = PG_DISTANCE_TYPE_CHEAPEST;
                n->pattern = (yyvsp[-4].list);
                n->where_clause = (yyvsp[-3].node);
                n->columns = (yyvsp[-2].list);
                n->name = (yyvsp[0].range);
                (yyval.node) = (PGNode *) n;
            }
#line 24257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147:
#line 41 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                {
		    PGMatchPattern *n = makeNode(PGMatchPattern);
		    n->pg_name = (yyvsp[-7].str);
		    n->distance_type = PG_DISTANCE_TYPE_SHORTEST;
		    n->pattern = (yyvsp[-4].list);
		    n->where_clause = (yyvsp[-3].node);
		    n->columns = (yyvsp[-2].list);
		    n->name = (yyvsp[0].range);
		    (yyval.node) = (PGNode *) n;
		}
#line 24272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148:
#line 63 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                             { (yyval.list) = (yyvsp[-1].list); }
#line 24278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149:
#line 64 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                               { (yyval.list) = NIL; }
#line 24284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150:
#line 69 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    (yyval.list) = list_make1((yyvsp[0].target)); 
                }
#line 24292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151:
#line 73 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                {
                     (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); 
                }
#line 24300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152:
#line 100 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        (yyval.list) = list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))); 
    }
#line 24308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153:
#line 104 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
    { 
        (yyval.list) = lappend((yyvsp[-3].list), list_make1(list_make2((yyvsp[-1].str),(yyvsp[0].list))));
    }
#line 24316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154:
#line 111 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.str) = (yyvsp[-1].str); }
#line 24322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155:
#line 112 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.str) = NULL;}
#line 24328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156:
#line 116 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                {(yyval.list) = list_make1((yyvsp[0].node));}
#line 24334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157:
#line 117 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));}
#line 24340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158:
#line 121 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159:
#line 122 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160:
#line 128 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 24363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161:
#line 136 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 24374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162:
#line 144 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern);
                n->pattern_clause = (yyvsp[-1].node);
                // n->label_name = $3;
                n->is_vertex_pattern = true;
                (yyval.node) = (PGNode *) n;
            }
#line 24386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163:
#line 155 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 24392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164:
#line 156 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = NULL; }
#line 24398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165:
#line 160 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str);}
#line 24404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166:
#line 164 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 24410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167:
#line 165 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                    { (yyval.str) = NULL; }
#line 24416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170:
#line 179 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[-1].str);
                n->label_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 24427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171:
#line 186 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphVariablePattern *n = makeNode(PGGraphVariablePattern);
                n->alias_name = (yyvsp[0].str);
                (yyval.node) = (PGNode *) n;
            }
#line 24437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172:
#line 194 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 24443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173:
#line 204 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 24449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174:
#line 205 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 24455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175:
#line 206 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                    {(yyval.node) = (yyvsp[0].node);}
#line 24461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176:
#line 213 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-2].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_NONE;
                (yyval.node) = (PGNode *) n;
            }
#line 24474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177:
#line 222 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-3].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_ALL;
                // $$ = $3;
                (yyval.node) = (PGNode *) n;
            }
#line 24488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178:
#line 232 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            {
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-6].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_BOUNDED;
                n->lower_bound = (yyvsp[-4].ival);
                n->upper_bound = (yyvsp[-2].ival);
                (yyval.node) = (PGNode *) n;
            }
#line 24503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179:
#line 243 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
            { 
                PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                n->pattern_clause = (yyvsp[-1].node);
                n->direction = PG_MATCH_DIR_RIGHT;
                n->is_vertex_pattern = false;
                n->star_pattern = PG_STAR_NONE;
                (yyval.node) = (PGNode *) n;
            }
#line 24516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180:
#line 255 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-2].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 24529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181:
#line 265 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-3].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_ALL;
                    (yyval.node) = (PGNode *) n;
                }
#line 24542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182:
#line 275 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-6].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_BOUNDED;
                    n->lower_bound = (yyvsp[-4].ival);
                    n->upper_bound = (yyvsp[-2].ival);
                    (yyval.node) = (PGNode *) n;
                }
#line 24557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183:
#line 286 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-1].node);
                    n->direction = PG_MATCH_DIR_LEFT;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 24571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184:
#line 299 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-2].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 24584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185:
#line 308 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-3].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_ALL;
                    (yyval.node) = (PGNode *) n;
                }
#line 24597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186:
#line 317 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-6].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_BOUNDED;
                    n->lower_bound = (yyvsp[-4].ival);
                    n->upper_bound = (yyvsp[-2].ival);
                    (yyval.node) = (PGNode *) n;
                }
#line 24612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187:
#line 329 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                { 
                    PGGraphElementPattern *n = makeNode(PGGraphElementPattern); 
                    n->pattern_clause = (yyvsp[-1].node);
                    n->direction = PG_MATCH_DIR_ANY;
                    n->is_vertex_pattern = false;
                    n->star_pattern = PG_STAR_NONE;
                    (yyval.node) = (PGNode *) n;
                }
#line 24625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188:
#line 339 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                {
		    PGGraphElementPattern *n = makeNode(PGGraphElementPattern);
		    n->pattern_clause = (yyvsp[-4].node);
		    n->direction = PG_MATCH_DIR_ANY;
		    n->is_vertex_pattern = false;
		    n->star_pattern = PG_STAR_NONE;
		    n->cost_pattern = (yyvsp[-2].str);
		    (yyval.node) = (PGNode *) n;
		}
#line 24639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189:
#line 461 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190:
#line 475 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191:
#line 489 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 24691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192:
#line 501 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 24703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193:
#line 509 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 24717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194:
#line 522 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 24723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195:
#line 523 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 24729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196:
#line 524 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 24735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197:
#line 525 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 24741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198:
#line 527 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 24755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199:
#line 539 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                                        { (yyval.boolean) = true; }
#line 24761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200:
#line 540 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                                                { (yyval.boolean) = false; }
#line 24767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201:
#line 545 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 24773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202:
#line 546 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 24779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203:
#line 550 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                                        { (yyval.boolean) = true; }
#line 24785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204:
#line 551 "third_party/libpg_query/grammar/statements/sql-pgq-syntax.y"
                                                                                                { (yyval.boolean) = false; }
#line 24791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 24805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 24837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 24848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 24859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 24871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 24883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 24907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 24918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 24932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 24943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 24960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 24966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 24984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236:
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237:
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238:
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239:
#line 72 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240:
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241:
#line 79 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 25022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242:
#line 83 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 25030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243:
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 25036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 25042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245:
#line 96 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 25048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 25054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 25060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248:
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249:
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250:
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251:
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 25086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252:
#line 8 "third_party/libpg_query/grammar/statements/create_enum.y"
                                {
					PGCreateEnumStmt *n = makeNode(PGCreateEnumStmt);
					n->typeName = (yyvsp[-5].list);
					n->vals = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253:
#line 17 "third_party/libpg_query/grammar/statements/create_enum.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254:
#line 18 "third_party/libpg_query/grammar/statements/create_enum.y"
                                                                                { (yyval.list) = NIL; }
#line 25109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255:
#line 22 "third_party/libpg_query/grammar/statements/create_enum.y"
                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 25115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256:
#line 24 "third_party/libpg_query/grammar/statements/create_enum.y"
                                { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 25121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 25131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 25141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 25151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260:
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 25161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261:
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 25167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262:
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263:
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 25193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264:
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 25205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265:
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 25217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266:
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 25229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267:
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268:
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269:
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 25257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 25263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271:
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272:
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273:
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 25298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 25309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 25315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 25321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277:
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 25327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278:
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279:
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280:
#line 15 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[-10].str);
					n->vertex_tables = 	(yyvsp[-6].list);
					n->edge_tables = (yyvsp[-1].list);
					// n->property_graph_content = $5;
					(yyval.node) = (PGNode *)n;
					// n = $5;
				}
#line 25353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281:
#line 25 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286:
#line 46 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287:
#line 47 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288:
#line 53 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-4].range);
					n->labels = (yyvsp[-2].list);
					n->keys = (yyvsp[-3].list);
					n->is_vertex_table = true;
					n->contains_discriminator = true;
					n->discriminator = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 25390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289:
#line 65 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-2].range);
					n->labels = (yyvsp[0].list);
					n->keys = (yyvsp[-1].list);
					n->is_vertex_table = true;
					n->contains_discriminator = false;
					(yyval.node) = (PGNode *) n;
				}
#line 25404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290:
#line 78 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291:
#line 82 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].str)); }
#line 25416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292:
#line 83 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str)); }
#line 25422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293:
#line 87 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294:
#line 89 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                        { (yyval.str) = (char*) "default"; }
#line 25434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295:
#line 93 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296:
#line 94 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297:
#line 101 "third_party/libpg_query/grammar/statements/create_property_graph.y"
                                {
					PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
					n->name = (yyvsp[-10].range);
					n->keys = (yyvsp[-9].list);
					n->is_vertex_table = false;
					n->source_key = (yyvsp[-7].list);
					n->source_key_reference = (yyvsp[-5].range);
					n->destination_key = (yyvsp[-3].list);
					n->destination_key_reference = (yyvsp[-1].range);
					n->labels = (yyvsp[0].list); 
					(yyval.node) = (PGNode *) n;
				}
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 25469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 25480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 25490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 25496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 25507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 25518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 25522 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 51 "third_party/libpg_query/grammar/statements/variable_reset.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
